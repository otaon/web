<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:webfeeds="http://webfeeds.org/rss/1.0">
  <channel>
    <title>Lazy Lambda</title>
    <link>https://otaon.github.io/web/ja-jp/</link>
    <description>Recent content on Lazy Lambda</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sun, 20 Aug 2017 21:38:52 +0800</lastBuildDate>
    
        <atom:link href="https://otaon.github.io/web/ja-jp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>このサイトについて</title>
      <link>https://otaon.github.io/web/ja-jp/about/</link>
      <pubDate>Sun, 20 Aug 2017 21:38:52 +0800</pubDate>
      
      <guid>https://otaon.github.io/web/ja-jp/about/</guid>
      
        <description>&lt;p&gt;気になったことや身につけたことについて残します。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Gitの使い方</title>
      <link>https://otaon.github.io/web/ja-jp/2019/03/13/git%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9/</link>
      <pubDate>Wed, 13 Mar 2019 01:00:00 +0900</pubDate>
      
      <guid>https://otaon.github.io/web/ja-jp/2019/03/13/git%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9/</guid>
      
        <description>

&lt;h1 id=&#34;目的&#34;&gt;目的&lt;/h1&gt;

&lt;p&gt;Gitを端末上で使用するため、操作とそのコマンドを記す。&lt;/p&gt;

&lt;h1 id=&#34;操作の種類一覧&#34;&gt;操作の種類一覧&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;情報更新/情報表示

&lt;ol&gt;
&lt;li&gt;リモートリポジトリの情報をローカルリポジトリに反映する(フェッチ)&lt;/li&gt;
&lt;li&gt;ローカルブランチ&amp;amp;リモートブランチを一覧表示&lt;/li&gt;
&lt;li&gt;現在のブランチ状態を表示&lt;/li&gt;
&lt;li&gt;コミットログを表示&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;リポジトリ操作

&lt;ol&gt;
&lt;li&gt;リポジトリを新規作成する&lt;/li&gt;
&lt;li&gt;リモートリポジトリからローカルリポジトリをクローンする&lt;/li&gt;
&lt;li&gt;リモートリポジトリをローカルリポジトリに関連付ける&lt;/li&gt;
&lt;li&gt;現在のローカルリポジトリのブランチを&lt;code&gt;push&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;リモートリポジトリのブランチを&lt;code&gt;pull&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;ブランチ操作

&lt;ol&gt;
&lt;li&gt;ローカルブランチを作成/削除する&lt;/li&gt;
&lt;li&gt;ローカルブランチを切り替える(&lt;code&gt;checkout&lt;/code&gt;する)&lt;/li&gt;
&lt;li&gt;ローカルブランチに対応するリモート追跡ブランチを確認する&lt;/li&gt;
&lt;li&gt;既存のリモートブランチに対応するローカルブランチを作成する&lt;/li&gt;
&lt;li&gt;ローカルブランチを作成し、リモートブランチを対応付けて作成する&lt;/li&gt;
&lt;li&gt;現在のブランチに、指定コミットの指定ファイルを展開する&lt;/li&gt;
&lt;li&gt;指定したブランチを現在のブランチにマージ&lt;/li&gt;
&lt;li&gt;マージ時のコンフリクトを解消する&lt;/li&gt;
&lt;li&gt;コミット履歴を改竄する(&lt;code&gt;rebase&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;ファイル操作

&lt;ol&gt;
&lt;li&gt;ファイルをステージングする&lt;/li&gt;
&lt;li&gt;ステージング済みのファイルをリポジトリへコミット&lt;/li&gt;
&lt;li&gt;直前のコミットを修正&lt;/li&gt;
&lt;li&gt;変更をリセット&lt;/li&gt;
&lt;li&gt;ファイル内容確認(&lt;code&gt;grep&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;ファイルを移動する/ファイルを削除する/ファイルをリネームする&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;差分(&lt;code&gt;diff&lt;/code&gt;)確認

&lt;ol&gt;
&lt;li&gt;様々な差分(&lt;code&gt;diff&lt;/code&gt;)を確認&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;問題を特定する

&lt;ol&gt;
&lt;li&gt;二分探索で問題を特定する&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;情報更新-情報表示&#34;&gt;情報更新/情報表示&lt;/h1&gt;

&lt;h2 id=&#34;リモートリポジトリの情報をローカルリポジトリに反映する-フェッチ&#34;&gt;リモートリポジトリの情報をローカルリポジトリに反映する(フェッチ)&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; &lt;code&gt;fetch&lt;/code&gt;が実際にやっているのは、リモート追跡ブランチの作成。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# シンタックス&lt;/span&gt;
$ git fetch &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;リポジトリ略称 ブランチ名&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 例:リモートブランチhow-to-use-gitのリモート追跡ブランチを作成&lt;/span&gt;
$ git fetch origin how-to-use-git
From github.com:otaon/web
 * branch            how-to-use-git -&amp;gt; FETCH_HEAD&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[ブランチ名]&lt;/code&gt; 作成対象となるリモート追跡ブランチ。省略すると全てのリモート追跡ブランチを作成する。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ローカルブランチ-リモートブランチを一覧表示&#34;&gt;ローカルブランチ&amp;amp;リモートブランチを一覧表示&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# シンタックス&lt;/span&gt;
$ git branch &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;-a&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;-r&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;--merged&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;--no-merged&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;--color&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;--no-color&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; 
&lt;span class=&#34;c1&#34;&gt;# 例:ローカルとリモートのブランチを全て一覧表示&lt;/span&gt;
$ git branch -a
  how-to-make-web-page-with-hugo
* how-to-use-git
  how-to-use-mermaid-in-hugo
  master
  migrate-from-gist-to-githubio
  remotes/origin/gh-pages
  remotes/origin/how-to-make-web-page-with-hugo
  remotes/origin/how-to-use-git
  remotes/origin/how-to-use-mermaid-in-hugo
  remotes/origin/master
  remotes/origin/migrate-from-gist-to-githubio&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[-a]&lt;/code&gt; ローカルとリモートの全てのブランチ情報表示。省略した場合はローカルのみ。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[-r]&lt;/code&gt; リモートの全てのブランチ情報表示。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[-merged]&lt;/code&gt; HEADにマージ済みのブランチ情報表示。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[-no-merged]&lt;/code&gt; HEADにマージされていないブランチ情報表示。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[-color]&lt;/code&gt; ブランチ情報に色を付けて表示。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[-no-color]&lt;/code&gt; ブランチ情報に色を付けずに表示。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;現在のブランチ状態を表示&#34;&gt;現在のブランチ状態を表示&lt;/h2&gt;

&lt;p&gt;現在いるブランチ、そのupstream、ファイルのステージング状況を表示する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# シンタックス&lt;/span&gt;
$ git status
&lt;span class=&#34;c1&#34;&gt;# 例:現在のブランチ状態を表示&lt;/span&gt;
$ git status
On branch how-to-use-git
Your branch is up to date with &lt;span class=&#34;s1&#34;&gt;&amp;#39;origin/how-to-use-git&amp;#39;&lt;/span&gt;.

Changes not staged &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; commit:
  &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;use &lt;span class=&#34;s2&#34;&gt;&amp;#34;git add &amp;lt;file&amp;gt;...&amp;#34;&lt;/span&gt; to update what will be committed&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;use &lt;span class=&#34;s2&#34;&gt;&amp;#34;git checkout -- &amp;lt;file&amp;gt;...&amp;#34;&lt;/span&gt; to discard changes in working directory&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;

        modified:   content/ja-jp/posts/0027_how_to_use_git/index.md

no changes added to commit &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;use &lt;span class=&#34;s2&#34;&gt;&amp;#34;git add&amp;#34;&lt;/span&gt; and/or &lt;span class=&#34;s2&#34;&gt;&amp;#34;git commit -a&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;コミットログを表示&#34;&gt;コミットログを表示&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# シンタックス&lt;/span&gt;
$ git log &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;--pretty&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;short&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;--graph&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;-数字&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;-p&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;-u&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;--patch 対象ファイルパス*&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;--decorate&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 例:コミットログ直近2件分をグラフ形式で表示&lt;/span&gt;
$ git log -2 --graph
* commit d37e53c8f12bfba66c1bd1accce89ca6bcbc33a0 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;HEAD -&amp;gt; how-to-use-git, origin/how-to-use-git&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; Author: otaon &amp;lt;******@github.com&amp;gt;
&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; Date:   Tue Mar &lt;span class=&#34;m&#34;&gt;12&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;03&lt;/span&gt;:24:19 &lt;span class=&#34;m&#34;&gt;2019&lt;/span&gt; +0900
&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;     feature: add figure of &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;merge&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
* commit de2baba4ddb3f7469aba02f88190a790523312cd
&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; Author: otaon &amp;lt;******@github.com&amp;gt;
&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; Date:   Mon Mar &lt;span class=&#34;m&#34;&gt;11&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;02&lt;/span&gt;:28:11 &lt;span class=&#34;m&#34;&gt;2019&lt;/span&gt; +0900
&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;     feature: edit an article&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[--pretty=short]&lt;/code&gt; 表示メッセージを短くする。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[--graph]&lt;/code&gt; ブランチをグラフ表示する。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[-数字]&lt;/code&gt; 指定した通じの数だけログを表示する。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[-p|-u|--patch 対象ファイルパス*]&lt;/code&gt; 指定ファイルの差分をパッチ形式で表示する。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[--decorate]&lt;/code&gt; 現在のHEAD、ブランチ名、タグ名を表示する。&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;リポジトリ操作&#34;&gt;リポジトリ操作&lt;/h1&gt;

&lt;h2 id=&#34;リポジトリを新規作成する&#34;&gt;リポジトリを新規作成する&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# -*- ローカルリポジトリを作成する -*-&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# シンタックス&lt;/span&gt;
$ git init &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;ディレクトリ&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 例:ローカルリポジトリwebを作成する&lt;/span&gt;
$ git init web

&lt;span class=&#34;c1&#34;&gt;# -*- リモートリポジトリを作成する -*-&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# シンタックス&lt;/span&gt;
$ git init --bare --shared &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;ディレクトリ&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 例:リモートリポジトリwebを作成する&lt;/span&gt;
$ git init --bare --shared web&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[ディレクトリ]&lt;/code&gt; 指定したディレクトリに&lt;code&gt;.git&lt;/code&gt;というサブディレクトリが作成される。省略時はカレントディレクトリ。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--bare&lt;/code&gt; 最小限のリポジトリを作成する。もし環境変数&lt;code&gt;GIT_DIR&lt;/code&gt;が設定されていなければ、現在のワーキング・ディレクトリが設定される。&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:git&#34;&gt;&lt;a href=&#34;#fn:git&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--shared&lt;/code&gt; Gitリポジトリが複数のユーザで共有されることを指定する。このオプションは、同じグループに属するユーザがそのリポジトリにpushすることを許可する。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;リモートリポジトリからローカルリポジトリをクローンする&#34;&gt;リモートリポジトリからローカルリポジトリをクローンする&lt;/h2&gt;

&lt;p&gt;既にリモートリポジトリが存在する時、それを元にローカルリポジトリをクローンする。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# シンタックス&lt;/span&gt;
$ git clone リモートリポジトリ名 &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;ディレクトリ&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 例:リモートリポジトリgit@github.com:otaon/web.gitをローカルリポジトリwebとしてクローンする&lt;/span&gt;
$ git clone git@github.com:otaon/web.git web&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[ディレクトリ]&lt;/code&gt; 指定したディレクトリを作成してリモートリポジトリ内のデータを置く。&lt;br /&gt;
省略した場合はリモートリポジトリ名のディレクトリを作成してリモートリポジトリ内のデータを置く。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;リモートリポジトリをローカルリポジトリに関連付ける&#34;&gt;リモートリポジトリをローカルリポジトリに関連付ける&lt;/h2&gt;

&lt;p&gt;既にローカルリポジトリとリモートリポジトリが存在する時、それをリモートリポジトリに関連付ける。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# シンタックス&lt;/span&gt;
$ git remote add リモートリポジトリの略称 リモートリポジトリのURL
&lt;span class=&#34;c1&#34;&gt;# 例:リモートリポジトリgit@github.com:otaon/web.gitを略称originとしてローカルリポジトリwebに関連付ける&lt;/span&gt;
$ git remote add origin git@github.com:otaon/web.git&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;現在のローカルリポジトリのブランチを-push&#34;&gt;現在のローカルリポジトリのブランチを&lt;code&gt;push&lt;/code&gt;&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# シンタックス&lt;/span&gt;
$ git push &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;-u&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;--set-upstream&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; リモートリポジトリの略称 ブランチ名
&lt;span class=&#34;c1&#34;&gt;# 例:現在のHEADをoriginのhow-to-use-gitブランチにpush&lt;/span&gt;
$ git push origin how-to-use-git&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[-u|--set-upstream]&lt;/code&gt; ローカルリポジトリ/現在ブランチの&lt;strong&gt;upstream&lt;/strong&gt;をリモートリポジトリの略称/ブランチ名に設定する。&lt;br /&gt;
こうすると、次回からは&lt;code&gt;git push&lt;/code&gt;で&lt;strong&gt;upstream&lt;/strong&gt;にpushできるようになる。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;リモートリポジトリのブランチを-pull&#34;&gt;リモートリポジトリのブランチを&lt;code&gt;pull&lt;/code&gt;&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# シンタックス&lt;/span&gt;
$ git pull リモートリポジトリの略称 ブランチ名
&lt;span class=&#34;c1&#34;&gt;# 例:originのhow-to-use-gitを、対応するローカルブランチにpull&lt;/span&gt;
$ git pull origin how-to-use-git&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr /&gt;

&lt;h1 id=&#34;ブランチ操作&#34;&gt;ブランチ操作&lt;/h1&gt;

&lt;h2 id=&#34;ローカルブランチを作成-削除-名称変更-リモート追跡ブランチ変更する&#34;&gt;ローカルブランチを作成/削除/名称変更/リモート追跡ブランチ変更する&lt;/h2&gt;

&lt;h3 id=&#34;ローカルブランチを作成する&#34;&gt;ローカルブランチを作成する&lt;/h3&gt;

&lt;p&gt;ローカルブランチを作成する。&lt;br /&gt;
リモート追跡ブランチが作成されている場合は、それを元にローカルブランチを作成する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# シンタックス&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;## ブランチ作成&lt;/span&gt;
$ git branch ブランチ名 &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;リモート追跡ブランチ名&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# 例:ローカルブランチhow-to-use-gitを作成する&lt;/span&gt;
$ git branch how-to-use-git

&lt;span class=&#34;c1&#34;&gt;# 例:ローカルブランチhow-to-use-gitをorigin/how-to-use-gitに関連付けて作成する&lt;/span&gt;
$ git branch how-to-use-git origin/how-to-use-git&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;ローカルブランチを削除する&#34;&gt;ローカルブランチを削除する&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;## ブランチ作成&lt;/span&gt;
$ git branch &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;-d&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;-D&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; ブランチ名 &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;リモート追跡ブランチ名&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;ローカルブランチ名を変更する&#34;&gt;ローカルブランチ名を変更する&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;## ブランチ名変更&lt;/span&gt;
$ git branch -m &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;古いブランチ名&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; 新しいブランチ名&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;リモート追跡ブランチを設定する&#34;&gt;リモート追跡ブランチを設定する&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;## リモート追跡ブランチを設定&lt;/span&gt;
$ git branch -u 追跡対象のリモートブランチ名 &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;ローカルブランチ名&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;リモート追跡ブランチの設定を解除する&#34;&gt;リモート追跡ブランチの設定を解除する&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;## リモート追跡ブランチの設定を解除&lt;/span&gt;
$ git branch --unset-upstream &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;ローカルブランチ名&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;ローカルブランチを切り替える-checkout-する&#34;&gt;ローカルブランチを切り替える(&lt;code&gt;checkout&lt;/code&gt;する)&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# シンタックス&lt;/span&gt;
$ git checkout &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;-b&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;-f&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; ブランチ名
&lt;span class=&#34;c1&#34;&gt;# 例:ローカルブランチをチェックアウトする&lt;/span&gt;
$ git checkout master &lt;span class=&#34;c1&#34;&gt;# masterをチェックアウト(作成はしない)&lt;/span&gt;
$ git checkout -b how-to-use-git &lt;span class=&#34;c1&#34;&gt;# hot-to-use-gitブランチを作成してチェックアウト&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[-b]&lt;/code&gt; リモートに対応付けてブランチを作成&amp;amp;チェックアウト。&lt;br /&gt;
&lt;strong&gt;NOTE:&lt;/strong&gt; &lt;code&gt;-b&lt;/code&gt;は&lt;code&gt;git branch ブランチ名; git checkout ブランチ名&lt;/code&gt;のショートハンド。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[-f]&lt;/code&gt; 作業ブランチやステージに変更があった場合でも、それを強制的に破棄してチェックアウトする。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ローカルブランチに対応するリモート追跡ブランチを確認する&#34;&gt;ローカルブランチに対応するリモート追跡ブランチを確認する&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git branch -vv&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;既存のリモートブランチに対応するローカルブランチを作成する&#34;&gt;既存のリモートブランチに対応するローカルブランチを作成する&lt;/h2&gt;

&lt;p&gt;リモートブランチは直接チェックアウトできない。&lt;br /&gt;
そこで、リモートブランチに対応する&lt;strong&gt;リモート追跡ブランチ&lt;/strong&gt;を作成し、それからローカルブランチをチェックアウトする。&lt;br /&gt;
リモート追跡ブランチが存在する場合、そのブランチ名をチェックアウトすると、下記が自動的に行われる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git checkout リモート追跡ブランチ名&lt;/code&gt; で、ローカルブランチが自動的に作成される。&lt;/li&gt;
&lt;li&gt;作成されたローカルブランチの&lt;strong&gt;upstream&lt;/strong&gt;ブランチに、リモートブランチが自動的に設定される。&lt;/li&gt;
&lt;li&gt;この方法は効率が悪い。&lt;br /&gt;
&lt;code&gt;git pull origin how-to-use-git &amp;amp;&amp;amp; git checkout how-to-use-git&lt;/code&gt; として、&lt;br /&gt;
リモート追跡ブランチ作成、ローカルブランチ更新を同時に行った方が効率が良い。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 例:リモートで作られたブランチを、ローカルにチェックアウトする&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 1.特定のリモート追跡ブランチを作成&lt;/span&gt;
$ git fetch origin how-to-use-git
&lt;span class=&#34;c1&#34;&gt;# 2.ローカルブランチをチェックアウトする&lt;/span&gt;
$ git checkout how-to-use-git

&lt;span class=&#34;c1&#34;&gt;## NOTE:ローカルブランチは自動的に作成される&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;ローカルブランチを作成し-リモートブランチを対応付けて作成する&#34;&gt;ローカルブランチを作成し、リモートブランチを対応付けて作成する&lt;/h2&gt;

&lt;p&gt;ローカルブランチ &lt;code&gt;file-system&lt;/code&gt; を作成する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git branch -b file-system&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ローカルブランチに対応するリモートブランチを作成する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git push -u origin file-system&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;現在のブランチに-指定コミットの指定ファイルを展開する&#34;&gt;現在のブランチに、指定コミットの指定ファイルを展開する&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# シンタックス&lt;/span&gt;
$ git checkout &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;コミットSHA&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; ファイルパス
&lt;span class=&#34;c1&#34;&gt;# 例:コミットafpj73zのindex.htmlを現在のブランチに展開する&lt;/span&gt;
$ git checkout afpj73z index.html&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[コミットSHA]&lt;/code&gt; 展開対象のファイルがあるコミット。省略時は現在のindexのコミットを指す。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;指定したブランチを現在のブランチにマージ&#34;&gt;指定したブランチを現在のブランチにマージ&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# シンタックス&lt;/span&gt;
$ git merge &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;--no-ff&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; ブランチ名
&lt;span class=&#34;c1&#34;&gt;# 例:how-to-use-gitブランチを現在のブランチにマージ&lt;/span&gt;
$ git merge --no-ff how-to-use-git&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;マージ時のコンフリクトを解消する&#34;&gt;マージ時のコンフリクトを解消する&lt;/h2&gt;

&lt;h3 id=&#34;コンフリクト時のファイル表記の意味&#34;&gt;コンフリクト時のファイル表記の意味&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-gitdiff&#34; data-lang=&#34;gitdiff&#34;&gt;\&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD
AAAA
=======
BBBB
\&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; master&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;HEAD&lt;/code&gt;では&amp;rsquo;AAAA&amp;rsquo;に変更しているが、&lt;code&gt;master&lt;/code&gt;では&amp;rsquo;BBBB&amp;rsquo;に変更している。&lt;/p&gt;

&lt;h3 id=&#34;片方のコミット内容を全て採用する&#34;&gt;片方のコミット内容を全て採用する&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# HEAD側を優先する&lt;/span&gt;
$ git checkout --ours how-to-use-git.md

&lt;span class=&#34;c1&#34;&gt;# HEADと反対側を優先する&lt;/span&gt;
$ git checkout --theirs how-to-use-git.md&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; indexが変化するのはカレントブランチであり、引数で指定したindexは一切変化しない事を覚えておくこと。&lt;br /&gt;
つまり、&lt;code&gt;merge&lt;/code&gt;実行時のカレントブランチは常に「変更を取り込む側」となる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;master&lt;/code&gt;ブランチにいるときに&lt;code&gt;git merge --no-ff&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;featureブランチでの開発が完了してmasterブランチにマージしたい場合などに用いる。&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;git_merge_noff.svg&#34; alt=&#34;git-merge-no-ff&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;how-to-use-git&lt;/code&gt;ブランチにいるときに&lt;code&gt;git merge [--ff] master&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;featureブランチを作成したまま放置していたらmasterが進んでしまった場合などに用いる。&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;git_merge_ff.svg&#34; alt=&#34;git-merge-ff&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;コミット履歴を改竄する-rebase&#34;&gt;コミット履歴を改竄する(&lt;code&gt;rebase&lt;/code&gt;)&lt;/h2&gt;

&lt;h3 id=&#34;ブランチの開始地点を変更する&#34;&gt;ブランチの開始地点を変更する&lt;/h3&gt;

&lt;p&gt;ブランチ元にコミットが発生した時、それに追従するために、ブランチの開始地点を、ブランチ元の新しいHEADに変更する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# シンタックス&lt;/span&gt;
$ git rebase &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;ブランチ元&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;現在のブランチ&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 例:how-to-use-gitブランチの付け根(base)をmasterのHEADの位置にrebaseする&lt;/span&gt;
$ git rebase master how-to-use-git&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;git_rebase_master.svg&#34; alt=&#34;git-rebase-master&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;複数のコミットを一つにまとめる&#34;&gt;複数のコミットを一つにまとめる&lt;/h3&gt;

&lt;p&gt;複数のコミットをまとめた、新しいコミットを作る。(つまりSHAが変わることに注意)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# シンタックス&lt;/span&gt;
$ git rebase -i 改竄対象の直前のコミット
&lt;span class=&#34;c1&#34;&gt;# 例:現在のブランチの直近2件を1件にまとめ上げる。SHAは変わってしまう。&lt;/span&gt;
$ git rebase -i HEAD~2

&lt;span class=&#34;c1&#34;&gt;# エディタで、HEADを含めて2つまでのコミット履歴をpickからfixupに編集する&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;### 編集前 ###(上の方が古い)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# pick 7a34294 first commit&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# pick 6fba227 second commit&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;### 編集後 ###(2つ目のコミットをfixupに変更)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# pick 7a34294 first commit&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# fixup 6fba227 second commit&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;git_rebase-i.svg&#34; alt=&#34;git-rebase-i&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;ファイル操作&#34;&gt;ファイル操作&lt;/h1&gt;

&lt;h2 id=&#34;ファイルをステージングする&#34;&gt;ファイルをステージングする&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# シンタックス&lt;/span&gt;
$ git add &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;--all&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;ファイル+&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 例:index.htmlをステージングする(indexに登録する、とも言う)&lt;/span&gt;
$ git add index.html&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--all&lt;/code&gt; 変更が加えられたファイルと未追跡だったファイルをaddする&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ステージング済みのファイルをリポジトリへコミット&#34;&gt;ステージング済みのファイルをリポジトリへコミット&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# シンタックス&lt;/span&gt;
$ git commit &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;-m &lt;span class=&#34;s2&#34;&gt;&amp;#34;コミットメッセージ&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 例:ステージング済みのファイルをコミットする&lt;/span&gt;
$ git commit -m &lt;span class=&#34;s2&#34;&gt;&amp;#34;feature: edit index.html&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;直前のコミットを修正&#34;&gt;直前のコミットを修正&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# シンタックス:直前のコミットを修正&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;## コミットメッセージも修正&lt;/span&gt;
$ git commit --amend &lt;span class=&#34;c1&#34;&gt;# -&amp;gt; エディタでメッセージを修正&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;## コミットメッセージは修正しない&lt;/span&gt;
$ git --amend --no-edit

&lt;span class=&#34;c1&#34;&gt;# 例:直近のコミットのメッセージだけを変更する&lt;/span&gt;
$ git commit --amend &lt;span class=&#34;c1&#34;&gt;# -&amp;gt; エディタでメッセージを修正&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 例:直近のコミットだけを修正する&lt;/span&gt;
$ git add --all &lt;span class=&#34;c1&#34;&gt;## 何らかの修正をステージング&lt;/span&gt;
$ git commit --amend --no-edit &lt;span class=&#34;c1&#34;&gt;## 直前のコミットにまとめる(メッセージは変えない)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;変更をリセット&#34;&gt;変更をリセット&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# シンタックス&lt;/span&gt;
$ git reset &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;--soft&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;--mixed&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;--hard&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;HEAD&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;HEAD^&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;SHA&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;ブランチ名&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 例:変更をリセットする &amp;amp; リセットをリセットする&lt;/span&gt;
git reset --mixed HEAD &lt;span class=&#34;c1&#34;&gt;# addを取り消す&lt;/span&gt;
git reset --hard ORIG_HEAD &lt;span class=&#34;c1&#34;&gt;# git resetを取り消す&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--soft&lt;/code&gt; HEADの位置のみリセットする。(&lt;code&gt;commit&lt;/code&gt;のみ取り消し)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--mixed|指定なし&lt;/code&gt; HEADの位置とindexをリセットする。(&lt;code&gt;add&lt;/code&gt;と&lt;code&gt;commit&lt;/code&gt;を取り消し)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--hard&lt;/code&gt; HEADの位置とindexとワークツリー内容をリセットする。(ワークツリーの編集内容と&lt;code&gt;add&lt;/code&gt;と&lt;code&gt;commit&lt;/code&gt;を取り消し)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ファイル確認-grep&#34;&gt;ファイル確認(&lt;code&gt;grep&lt;/code&gt;)&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git grep &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;-w&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;-i&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;単語&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;--not&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;正規表現&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[(&lt;/span&gt;--and&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;--or &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;--not&lt;span class=&#34;o&#34;&gt;])&lt;/span&gt; -e ...*&lt;span class=&#34;o&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;対象パス&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-e &#39;正規表現&#39;&lt;/code&gt; 正規表現にマッチしたものにヒットする。&lt;code&gt;&#39;\(foo\|bar\)&#39;&lt;/code&gt;でfoo&lt;strong&gt;か&lt;/strong&gt;barを含む行にヒットする。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[--not] ...&lt;/code&gt; 正規表現にマッチしたものを除外する。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[--and ...]&lt;/code&gt; 複数の正規表現のandを取る。&lt;code&gt;-e &#39;foo&#39; --and -e &#39;bar&#39;&lt;/code&gt;でfoo&lt;strong&gt;と&lt;/strong&gt;barを含む行にヒットする。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[--or ...]&lt;/code&gt; 複数の正規表現のorを取る。&lt;code&gt;-e &#39;foo&#39; --or -e &#39;bar&#39;&lt;/code&gt;でfoo&lt;strong&gt;か&lt;/strong&gt;barを含む行にヒットする。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[-w]&lt;/code&gt; 単語を検索する。&lt;code&gt;git grep -w user&lt;/code&gt;で、&lt;code&gt;user&lt;/code&gt;のみ(つまり&lt;code&gt;users&lt;/code&gt;などは除く)を検索する。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[-i]&lt;/code&gt; 大文字小文字を無視する。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ファイルを移動する-ファイルを削除する-ファイルをリネームする&#34;&gt;ファイルを移動する/ファイルを削除する/ファイルをリネームする&lt;/h2&gt;

&lt;h3 id=&#34;gitで追跡させつつファイルを移動-リネームする&#34;&gt;gitで追跡させつつファイルを移動/リネームする&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# シンタックス&lt;/span&gt;
$ git mv ファイル名 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;移動先パス&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;リネーム後ファイル名&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 例:ファイルを移動する&lt;/span&gt;
$ git mv how-to-use-git.md path/to/move/&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;gitで追跡させつつファイルを削除する&#34;&gt;gitで追跡させつつファイルを削除する&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# シンタックス&lt;/span&gt;
$ git rm ファイル名
&lt;span class=&#34;c1&#34;&gt;# 例:ファイルを削除する&lt;/span&gt;
$ git rm  ファイル名&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;ファイルをgit管理下から外す&#34;&gt;ファイルをgit管理下から外す&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# シンタックス&lt;/span&gt;
$ git rm -cached ファイル名
&lt;span class=&#34;c1&#34;&gt;# 例:ファイルをgit管理下から外す&lt;/span&gt;
$ git rm -cached how-to-use-git.md&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr /&gt;

&lt;h1 id=&#34;差分-diff-確認&#34;&gt;差分(&lt;code&gt;diff&lt;/code&gt;)確認&lt;/h1&gt;

&lt;h2 id=&#34;様々な差分-diff-を確認&#34;&gt;様々な差分(&lt;code&gt;diff&lt;/code&gt;)を確認&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# シンタックス&lt;/span&gt;
$ git diff
  &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;HEAD
  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;HEAD^
  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;HEAD..リモート名/ブランチ名
  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;リモート名/ブランチ名..HEAD
  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;--cached
  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;変更前のSHA..変更後のSHA
  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;確認したいコミットのSHA^..確認したいコミットのSHA
  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;ブランチA..ブランチB&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;-- 対象ファイルパス+&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;その他オプション&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 例:差分を表示する&lt;/span&gt;
$ git diff -U5 how-to-use-git..origin/how-to-use-git -- index.html&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;A..B&lt;/code&gt;と書いた場合、左が古く、右が新しいとみなされる&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;比較対象の状態を指定する方法

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;指定なし&lt;/code&gt; index(ステージ領域) → 現在のワークツリー&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HEAD&lt;/code&gt; 最新コミット → 現在のワークツリー&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HEAD^|HEAD^..HEAD&lt;/code&gt; 一つ前のコミット → 最新コミット&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HEAD..リモートリポジトリ名/ブランチ名&lt;/code&gt; 最新コミット →指定リモートリポジトリ/指定ブランチ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;リモート名/ブランチ名..HEAD&lt;/code&gt; 指定リモートリポジトリ/指定ブランチ →最新コミット&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--cached|--staged&lt;/code&gt; 最新コミット →index(ステージ領域)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SHA1..SHA2&lt;/code&gt; 指定コミット(SHA1) → 指定コミット(SHA2)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SHA1^..SHA1&lt;/code&gt; 指定コミット(SHA1)の一つ前 → 指定コミット(SHA1)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ブランチ名A..ブランチ名B&lt;/code&gt; ブランチA → ブランチB&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;比較対象のファイルを指定する方法

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-- 対象ファイルパス+&lt;/code&gt; 指定ファイルパスのみを対象とする

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git diff -- ファイルパスA ファイルパスB&lt;/code&gt; 指定ファイルパスAと、指定ファイルパスB&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;表示形式を指定する方法

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--stat&lt;/code&gt; 変更点ではなく、ファイル毎の変更種別と変更量のみ表示する。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--name-only&lt;/code&gt; ファイル名のみ表示する。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git add -n .; git diff --name-only&lt;/code&gt; git add をdry-runして追加されたファイルも対象として、ファイル名のみ表示する。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-U0&lt;/code&gt; &lt;code&gt;-U10&lt;/code&gt; 変更行の前後0行or10行を表示する。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--color-words&lt;/code&gt; 単語に色を付ける。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--compaction-heuristic&lt;/code&gt; 上方向への差分比較も実施した上で差分表示する。環境によっては使用不可の模様。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;問題を特定する&#34;&gt;問題を特定する&lt;/h1&gt;

&lt;h2 id=&#34;二分探索で問題を特定する&#34;&gt;二分探索で問題を特定する&lt;/h2&gt;

&lt;h3 id=&#34;1-問題が有るコミットと問題が無いコミットの中間バージョンをチェックアウトする&#34;&gt;1. 問題が有るコミットと問題が無いコミットの中間バージョンをチェックアウトする&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# シンタックス&lt;/span&gt;
$ git bisect start 問題が有るコミット 問題が無いコミット
&lt;span class=&#34;c1&#34;&gt;# 例:問題が有るコミット=HEAD,問題が無いコミット=v1.0&lt;/span&gt;
$ git bisect srart HEAD v1.0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;2-a-テストスクリプトで問題混入したコミットをチェックアウトする&#34;&gt;2-A. テストスクリプトで問題混入したコミットをチェックアウトする&lt;/h3&gt;

&lt;p&gt;以下のコマンドを実行すると、gitがテスト実行と中間バージョンのチェックアウトを繰り返して、問題が混入したコミットをチェックアウトする。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git bisect run テストスクリプトパス&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;2-b-手動でgood-badを指定して問題を混入したコミットをチェックアウトする&#34;&gt;2-B. 手動でgood,badを指定して問題を混入したコミットをチェックアウトする&lt;/h3&gt;

&lt;p&gt;テストスクリプトを用いなくとも、以下のいずれかのコマンドを実行すると、badとgoodの中間バージョンがチェックアウトされる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 現在のコミットが問題無いことを表明する=&amp;gt;次の中間バージョンがチェックアウトされる&lt;/span&gt;
$ git bisect good
&lt;span class=&#34;c1&#34;&gt;# 現在のコミットが問題有ることを表明する=&amp;gt;次の中間バージョンがチェックアウトされる&lt;/span&gt;
$ git bisect bad&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;xxx-現在チェックアウトしているコミットを確認する&#34;&gt;xxx. 現在チェックアウトしているコミットを確認する&lt;/h3&gt;

&lt;p&gt;現在チェックアウトしているコミットを見る。デフォルトではgikで表示する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git bisect view &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;-p&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[-p]&lt;/code&gt; パッチ形式でコンソールに出力する。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;xxx-二分探索の過程を確認する&#34;&gt;xxx. 二分探索の過程を確認する&lt;/h3&gt;

&lt;p&gt;git bisectのログを表示する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git bisect log&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;xxx-git-bisect-実行前の状態に戻す&#34;&gt;xxx. &lt;code&gt;git bisect&lt;/code&gt;実行前の状態に戻す&lt;/h3&gt;

&lt;p&gt;git bisectを実行する前の状態に戻す。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git bisect reset&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:git&#34;&gt;&lt;code&gt;.git&lt;/code&gt;フォルダの場所を指す環境変数。指定されていない場合、Gitはディレクトリツリーを&lt;code&gt;~&lt;/code&gt;または&lt;code&gt;/&lt;/code&gt;にたどり着くまで上っていき、各ディレクトリで&lt;code&gt;.git&lt;/code&gt;ディレクトリを探す。&lt;a href=&#34;https://git-scm.com/book/ja/v2/Git%E3%81%AE%E5%86%85%E5%81%B4-%E7%92%B0%E5%A2%83%E5%A4%89%E6%95%B0&#34;&gt;10.8_Gitの内側-環境変数&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:git&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
      
    </item>
    
    <item>
      <title>mermaid.jsをHugoで使えるようにする</title>
      <link>https://otaon.github.io/web/ja-jp/2019/03/08/mermaid.js%E3%82%92hugo%E3%81%A7%E4%BD%BF%E3%81%88%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B/</link>
      <pubDate>Fri, 08 Mar 2019 00:00:00 +0900</pubDate>
      
      <guid>https://otaon.github.io/web/ja-jp/2019/03/08/mermaid.js%E3%82%92hugo%E3%81%A7%E4%BD%BF%E3%81%88%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B/</guid>
      
        <description>

&lt;h2 id=&#34;目的&#34;&gt;目的&lt;/h2&gt;

&lt;p&gt;Hugoで&lt;code&gt;mermaid.js&lt;/code&gt;を使用できるようにする設定手順を示す。&lt;br /&gt;
&lt;code&gt;mermaid.js&lt;/code&gt;は&lt;code&gt;mermaid&lt;/code&gt;のjavascript版で、これを使えばサイトで表示するダイアグラム等を簡単に記述できるようになる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mermaid&lt;/code&gt;説明サイト: &lt;a href=&#34;https://mermaidjs.github.io/&#34;&gt;mermaid - GitBook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参考にしたページ: &lt;a href=&#34;https://qiita.com/_takeuchi_/items/35c52fd85884a83c154d&#34;&gt;Hugoにmermaidを組み込んでみた&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;mermaidをunpkgから取得する&#34;&gt;mermaidをUNPKGから取得する&lt;/h2&gt;

&lt;p&gt;今回はmermaid.jsの本体のみ必要なので、UNPKGから&lt;code&gt;mermaid.js&lt;/code&gt;をダウンロードする。&lt;br /&gt;
ちなみにUNPKGとは、npmなどのコンテンツをダウンロードすることができるCDNのひとつ。&lt;br /&gt;
サイトのデータ量を少しでも削減したい場合は、ダウンロードせずに、直接CDNのURLを指定すること。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://unpkg.com/mermaid/dist/&#34;&gt;最新版のmermaid.jsが置いてあるURL&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mermaid.js&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今回は気が向いたときにコードを読み書きするかも知れないので通常版をダウンロードした。&lt;br /&gt;
ミニマイズ済みのもので良ければ&lt;code&gt;mermaid.min.js&lt;/code&gt;をダウンロードすれば良い。&lt;/p&gt;

&lt;p&gt;ダウンロードしたら&lt;code&gt;themes/&amp;lt;テーマ名&amp;gt;/static/asset&lt;/code&gt;にmermaidフォルダを作成してコピーする。&lt;br /&gt;
本サイトの場合、下記に格納した。&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:-&#34;&gt;&lt;a href=&#34;#fn:-&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;br /&gt;
&lt;code&gt;&amp;lt;git-top&amp;gt;/web/web/themes/hugo-theme-den/static/asset/mermaid/mermaid.js&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;mermaid-js-用の-div-に置換するためショートコードを作成する&#34;&gt;&lt;code&gt;mermaid.js&lt;/code&gt;用の&lt;code&gt;div&lt;/code&gt;に置換するためショートコードを作成する&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;themes/theme/layouts/shortcodes&lt;/code&gt;に&lt;code&gt;mermaid.html&lt;/code&gt;を作成して下記を記述する。&lt;br /&gt;
これで&lt;code&gt;mermaid&lt;/code&gt;クラス内のコンテンツが、&lt;code&gt;align&lt;/code&gt;設定を考慮しつつ表示されるようになる。
本サイトの場合&lt;code&gt;&amp;lt;git-top&amp;gt;/web/web/themes/hugo-theme-den/layouts/shortcodes/mermaid.js&lt;/code&gt;に置いてある。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;mermaid&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;align&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{{ if .Get &amp;#34;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;align&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;}}{{&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;Get&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;align&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;}}{{&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;}}&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;center&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;}}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    {{ safeHTML .Inner }}
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;全ページで-mermaid-js-が読み込まれるように設定する&#34;&gt;全ページで&lt;code&gt;mermaid.js&lt;/code&gt;が読み込まれるように設定する&lt;/h2&gt;

&lt;p&gt;下記の設定を、scriptタグが書かれている箇所に追記しておく。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{{&amp;#34;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;asset&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;mermaid&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;mermaid&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;js&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;relURL&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;}}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;追記対象ファイル&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;scriptをthemes/theme/layouts/partials&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;header.html&lt;/code&gt; or &lt;code&gt;footer.html&lt;/code&gt; or &lt;code&gt;scripts.html&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;scripts.html&lt;/code&gt;に&lt;code&gt;jquery&lt;/code&gt;や&lt;code&gt;bootstrap&lt;/code&gt;などの読み込みも行っているため、ここに記述するのが良さそう。&lt;/p&gt;

&lt;h2 id=&#34;記事内で-mermaid-js-を使用する&#34;&gt;記事内で&lt;code&gt;mermaid.js&lt;/code&gt;を使用する&lt;/h2&gt;

&lt;p&gt;記事内で下記のように記述すると&lt;code&gt;mermaid.js&lt;/code&gt;がレンダリングしてくれる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;記事に記載する&lt;code&gt;mermaid.js&lt;/code&gt;用コード&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:-&#34;&gt;&lt;a href=&#34;#fn:-&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;{&lt;/code&gt;の前のエスケープは実際には無い。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;\{\{\&amp;lt;mermaid align=&amp;quot;center&amp;quot;&amp;gt;}}
sequenceDiagram
    participant Alice
    participant Bob
    Alice-&amp;gt;John: Hello John, how are you?
    loop Healthcheck
        John-&amp;gt;John: Fight against hypochondria
    end
    Note right of John: Rational thoughts &amp;lt;br/&amp;gt;prevail...
    John--&amp;gt;Alice: Great!
    John-&amp;gt;Bob: How about you?
    Bob--&amp;gt;John: Jolly good!
\{\{\&amp;lt;/mermaid&amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mermaid.js&lt;/code&gt;がレンダリングした結果&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;mermaid&#34; align=&#34;center&#34;&gt;
    
sequenceDiagram
    participant Alice
    participant Bob
    Alice-&gt;John: Hello John, how are you?
    loop Healthcheck
        John-&gt;John: Fight against hypochondria
    end
    Note right of John: Rational thoughts &lt;br/&gt;prevail...
    John--&gt;Alice: Great!
    John-&gt;Bob: How about you?
    Bob--&gt;John: Jolly good!

&lt;/div&gt;

&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:-&#34;&gt;本サイトのディレクトリ構成は&lt;a href=&#34;https://otaon.github.io/web/web/ja-jp/2019/03/03/github-hugo-travis-ci-%E3%81%A7%E9%9D%99%E7%9A%84%E3%82%B5%E3%82%A4%E3%83%88%E3%82%92-github-pages-%E3%81%AB%E5%85%AC%E9%96%8B%E3%81%99%E3%82%8B/&#34;&gt;ここ&lt;/a&gt;を参照すること。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:-&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:-&#34;&gt;&lt;a href=&#34;https://mermaidjs.github.io/&#34;&gt;https://mermaidjs.github.io/&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:-&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
      
    </item>
    
    <item>
      <title>Common Lispで継続・継続渡し方式(cps)を学ぶ</title>
      <link>https://otaon.github.io/web/ja-jp/2019/03/07/common-lisp%E3%81%A7%E7%B6%99%E7%B6%9A%E7%B6%99%E7%B6%9A%E6%B8%A1%E3%81%97%E6%96%B9%E5%BC%8Fcps%E3%82%92%E5%AD%A6%E3%81%B6/</link>
      <pubDate>Thu, 07 Mar 2019 02:00:00 +0900</pubDate>
      
      <guid>https://otaon.github.io/web/ja-jp/2019/03/07/common-lisp%E3%81%A7%E7%B6%99%E7%B6%9A%E7%B6%99%E7%B6%9A%E6%B8%A1%E3%81%97%E6%96%B9%E5%BC%8Fcps%E3%82%92%E5%AD%A6%E3%81%B6/</guid>
      
        <description>

&lt;h1 id=&#34;主旨&#34;&gt;主旨&lt;/h1&gt;

&lt;p&gt;本稿は、Schemeなどの言語で明示的にサポートされている &lt;strong&gt;継続(continuation)&lt;/strong&gt; という概念と、それにまつわる諸概念の学習記録である。&lt;/p&gt;

&lt;h1 id=&#34;本稿のゴール&#34;&gt;本稿のゴール&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;プログラミング言語の種類によらず、再帰関数の作成時に、継続渡し方式(cps: continuation passing style)を応用できるようになる。

&lt;ul&gt;
&lt;li&gt;なんらかの再帰関数を、継続渡しを用いた形にリファクタリングできるようになる。&lt;/li&gt;
&lt;li&gt;非末尾再帰形の再帰関数を、末尾再帰形の再帰関数にリファクタリングできるようになる。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;勉強の参考サイト&#34;&gt;勉強の参考サイト&lt;/h1&gt;

&lt;p&gt;継続については下記サイトを主軸に勉強した。とても分かりやすい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://practical-scheme.net/docs/cont-j.html&#34;&gt;Practical Scheme - なんでも継続&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://practical-scheme.net/wiliki/wiliki.cgi?Scheme%3A%E4%BD%BF%E3%81%84%E3%81%9F%E3%81%84%E4%BA%BA%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AE%E7%B6%99%E7%B6%9A%E5%85%A5%E9%96%80&#34;&gt;Practical Scheme - Scheme:使いたい人のための継続入門&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;一言-二言で説明&#34;&gt;一言・二言で説明&lt;/h1&gt;

&lt;h2 id=&#34;継続とは&#34;&gt;継続とは&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;継続とは，動作中に凍結したプログラムだ.&lt;br /&gt;
すなわち計算処理の状態を含んだ一つの関数的オブジェクトだ.&lt;br /&gt;
保存された計算処理は，それが中断された時点から再開する.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;http://www.paulgraham.com/onlisp.html&#34;&gt;Paul Graham - On Lisp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;継続とは、これから評価すべき環境(処理およびデータ)を、「後で評価可能な環境」として保持したもの。&lt;br /&gt;
後で評価可能な環境とは、「自由変数と束縛変数と処理」のことであり、これはすなわちクロージャのこと。&lt;/p&gt;

&lt;h2 id=&#34;クロージャとは&#34;&gt;クロージャとは&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;（無名）関数とクロージャの違いは、lambda式内に自由変数があるか否か&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;http://d.hatena.ne.jp/harg/20070613/1181757060&#34;&gt;[・ _ゝ・]日記を書くはやみずさん- クロージャと記号論理学と高校数学&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;プログラミングにおいては、自由変数とは関数の中で参照される局所変数や引数以外の変数を意味する。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E8%87%AA%E7%94%B1%E5%A4%89%E6%95%B0%E3%81%A8%E6%9D%9F%E7%B8%9B%E5%A4%89%E6%95%B0&#34;&gt;Wikipedia - 自由変数と束縛変数&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;クロージャとは、関数が保持する情報の他に、自由変数(グローバル変数や、関数の外にある変数の値)も保持できるもののこと。&lt;br /&gt;
したがって、クロージャを使えば、クロージャを定義した時点での環境を包み込んで、それを継続として扱える。&lt;br /&gt;
下記コードだと、 &lt;code&gt;addn&lt;/code&gt; がクロージャである(自由変数nを束縛するため)。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;クロージャの例&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;add1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# クロージャを生成する関数&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;addn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# クロージャ(addnの外側にある変数(自由変数)nを束縛するため)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;addn&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;add1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# 6&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 11&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ちなみに、クロージャの名前の由来は、 &lt;strong&gt;開いた関数&lt;/strong&gt; を &lt;strong&gt;閉じた関数&lt;/strong&gt; にすることから。&lt;br /&gt;
&lt;em&gt;cf.&lt;/em&gt; ある論理式Aが自由変数を含むとき、 &lt;strong&gt;論理式Aは開いている&lt;/strong&gt; といい、自由変数を1つも含まないとき、 &lt;strong&gt;論理式Aは閉じている&lt;/strong&gt; という。&lt;br /&gt;
→ (関数 | 論理式)が(関数の中で参照される局所変数や引数以外の変数 | 自由変数)を1つも含まないとき、(関数 | 論理式)は閉じている。&lt;/p&gt;

&lt;h2 id=&#34;末尾再帰とは&#34;&gt;末尾再帰とは&lt;/h2&gt;

&lt;p&gt;ある関数内で再帰的に同じ関数を呼び出したとき、呼び出し先から呼び出し元に戻ってきた後に行われる処理が何もなければ末尾再帰である。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;末尾再帰の例&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;acc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;    1からxまでの総和を求める(末尾再帰)
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;acc&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;acc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;nb&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 55&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;非末尾再帰の例&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;    1からxまでの総和を求める(add呼び出しの後に+演算があるため末尾再帰ではない)
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;nb&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 55&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr /&gt;

&lt;h1 id=&#34;継続-継続呼び出し-末尾呼び出し最適化の詳細とそれらの関係性&#34;&gt;継続・継続呼び出し・末尾呼び出し最適化の詳細とそれらの関係性&lt;/h1&gt;

&lt;h2 id=&#34;継続-継続渡しとは&#34;&gt;継続・継続渡しとは&lt;/h2&gt;

&lt;p&gt;ある関数 &lt;code&gt;function&lt;/code&gt; があるとする。この &lt;code&gt;function&lt;/code&gt; の任意の処理の間で分断する。&lt;br /&gt;
このとき、分断からの処理を実行するには、分断までの環境(変数の値等)が必要となる。&lt;br /&gt;
この情報のことを &lt;strong&gt;継続&lt;/strong&gt; という。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;global_a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# ---------------ここで分断する&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;global_a&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 16 (= 1 + 2 + 3 + 10)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次に、関数呼び出しがある場合の継続について考える。&lt;br /&gt;
この場合も同様で、 &lt;code&gt;function2&lt;/code&gt; の処理が終わった後に &lt;code&gt;function1&lt;/code&gt; の残りを処理するため、&lt;code&gt;function2&lt;/code&gt; 呼び出しまでの環境を覚えておく必要がある。&lt;br /&gt;
このとき、 &lt;code&gt;function2&lt;/code&gt; から &lt;code&gt;function1&lt;/code&gt; へ戻るための情報(function1の続きへのアドレス、戻り値、変数の値等)が &lt;strong&gt;継続&lt;/strong&gt; である。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;function1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;z&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;function2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# ---------------ここで分断する&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;function2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;function1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 31 (= 10 + 1 + (2 * 10))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一般的な手続き型言語における継続は、下図のように表せる。&lt;br /&gt;
図の通り、関数呼び出しがある度、呼び出し元の続きを処理するために &lt;strong&gt;暗黙的に&lt;/strong&gt; 継続が作られる。&lt;br /&gt;
ここで、 &lt;code&gt;func1&lt;/code&gt; の継続には、 &lt;code&gt;func0&lt;/code&gt; の継続が含まれていることに注意する。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;cf.&lt;/em&gt; C系の言語においては、コールスタックとして継続を保持している。&lt;br /&gt;
コールスタックは言語のユーザに意識させないようになっているため、継続は &lt;strong&gt;暗黙的に&lt;/strong&gt; 作られるといえる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;暗黙的な継続の利用の図&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;+------------+
| func0      |
| call func1 |
+------------+
*     |
*     +------------+
*                  |
*                  v
*            +------------+
*            | func1      |
*            | call func2 |
*            +------------+
*            *     |
*            *     +------------+
*            *                  |
*            *                  v
*            *            +------------+
*            *            | func2      |
*            *            |            |
*            *            | return     |
*            *            +------------+
*            *                  :
*            *     +............+
*            *     :
*            next1 v
*            +------------+
*            | return     |
*            +------------+
*                  :
*     +............+
*     :
next0 v
+------------+
| return     |
+------------+

legend -------------------------------------------------------

+----------------+        call       +----------------+
| funcA          |------------------&amp;gt;| funcB          |
|                |                   | process        |
| return         |&amp;lt;..................| return         |
+----------------+       return      +----------------+
*
* duration of retention of continuation of funcA
*
nextA
+----------------+
|                |
+----------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここで、関数を呼び出した際、引数だけでなく、 &lt;strong&gt;明示的に&lt;/strong&gt; 継続(評価可能な環境)を呼び出し先の関数に渡すことを考えると、下図のようになる。&lt;br /&gt;
なお、継続を渡して最後に評価するという考えにおいては、&lt;code&gt;return&lt;/code&gt; (呼び出し元へ戻る)という概念は存在しないことに注意する。&lt;br /&gt;
このように、関数呼び出しの際に、継続も一緒に渡すことを &lt;strong&gt;継続渡し(continuation passing)&lt;/strong&gt; という。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;継続渡しの図&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;+----------------------------+
| func0                      |
| call func1                 |
+----------------------------+
              | (continuation of func0)
              +-------+
                      |
                      v
        +----------------------------+
        | func1                      |
        | call func2                 |
        +----------------------------+
                      | (continuation of func1, continuation of func0)
                      +-------+
                              |
                              v
                +----------------------------+
                | func2                      |
                | call continuation of func1 |
                +----------------------------+
                              | (continuation of func0)
                      +-------+
                      |
        next          v
        +----------------------------+
        | continuation of func1      |
        | call continuation of func0 |
        +----------------------------+
                     |
             +-------+
             |
next         v
+----------------------------+
| continuation of func0      |
+----------------------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;継続渡しと末尾呼び出し最適化&#34;&gt;継続渡しと末尾呼び出し最適化&lt;/h2&gt;

&lt;p&gt;末尾再帰とは、再帰呼出しのうち、再帰呼出し以降に処理がないタイプのことをいった。&lt;/p&gt;

&lt;p&gt;ここで、上図の &lt;code&gt;func1&lt;/code&gt; の継続を考える。&lt;br /&gt;
&lt;code&gt;func2&lt;/code&gt; から &lt;code&gt;func1&lt;/code&gt; のnextへ処理が帰ってきたとき、 &lt;code&gt;func1&lt;/code&gt; のnextの処理が、 &lt;code&gt;func0&lt;/code&gt; へ帰ることのみならば、わざわざ &lt;code&gt;func1&lt;/code&gt; のnextに帰らず、 &lt;code&gt;func0&lt;/code&gt; のnextへ直接帰れば良い。&lt;br /&gt;
言い換えれば、 &lt;code&gt;func1&lt;/code&gt; の継続を使用しない場合、 &lt;code&gt;func2&lt;/code&gt; には &lt;code&gt;func0&lt;/code&gt; の継続のみを渡せば良い。&lt;br /&gt;
同様に、N段階の再帰においても、各々の継続が呼び出し元へ帰ることのみであれば、その継続は不要であるため、最初の関数の継続を渡すのみで良い。&lt;/p&gt;

&lt;p&gt;ここで、最初の継続のみ渡せば良い場合、各再帰呼び出しによってスタックを使用する必要がない。&lt;br /&gt;
&lt;strong&gt;末尾呼び出し最適化&lt;/strong&gt; とは、コンパイラが末尾呼び出しを見つけたら、スタックを使用しないように内部の処理を最適化し、再帰呼び出しによってスタックオーバーフローを起こさないようにすることをいう。&lt;/p&gt;

&lt;p&gt;pythonによる末尾呼び出し最適化可能なコードを以下に示す。&lt;br /&gt;
&lt;strong&gt;caution:&lt;/strong&gt; ただし、pythonにおいてこのコードは末尾呼び出し最適化されない。pythonは末尾呼び出し最適化をサポートしていないため、関数呼び出しのたびに継続を作ってしまう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;continuation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&amp;#34;1からxまでの総和を求める&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;temp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;continuation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;temp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;continuation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    
&lt;span class=&#34;nb&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 55&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上記のコードを見ると、クロージャ &lt;code&gt;temp&lt;/code&gt; は、自由変数 &lt;code&gt;x&lt;/code&gt; を内包し、 &lt;code&gt;y&lt;/code&gt; が入力されたら出力が定まる。&lt;br /&gt;
さらに、上記のコードの処理を関数呼び出し毎に確認していくと、継続がどのように作られていくのかがよく分かる。&lt;br /&gt;
ここでは、 &lt;code&gt;sum(3, print)&lt;/code&gt; を呼び出した場合を確認してみることにする。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;sum(3, print)&lt;/code&gt;&lt;br /&gt;
最初に &lt;code&gt;sum&lt;/code&gt; を呼び出す際、呼び出し元では、その &lt;code&gt;sum&lt;/code&gt; を評価した後に実行したい処理を引数に継続として渡す。&lt;br /&gt;
ここでは、「sumの評価結果を表示する」ために &lt;code&gt;print&lt;/code&gt; を &lt;code&gt;sum&lt;/code&gt; に渡している。&lt;br /&gt;
また、もちろん &lt;code&gt;sum&lt;/code&gt; の入力である &lt;code&gt;x&lt;/code&gt; にも &lt;code&gt;3&lt;/code&gt; を渡している。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;nb&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;def sum(3, print): ...&lt;/code&gt;&lt;br /&gt;
0.で、 &lt;code&gt;x&lt;/code&gt; は &lt;code&gt;3&lt;/code&gt; に束縛され、また、 &lt;code&gt;continuation&lt;/code&gt; は &lt;code&gt;print&lt;/code&gt; に束縛されている。&lt;br /&gt;
これにより、 &lt;code&gt;temp&lt;/code&gt; は、「入力に3を足して表示する」関数として定義される。&lt;br /&gt;
さらに、 &lt;code&gt;if&lt;/code&gt; のtrue節に入るため、次の &lt;code&gt;sum(3 - 1, temp)&lt;/code&gt; &amp;lt;=&amp;gt; &lt;code&gt;sum(2, temp)&lt;/code&gt; を呼び出す。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;continuation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# def sum(3, print):&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&amp;#34;1からxまでの総和を求める&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;temp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# def temp1(y): 「入力+3を表示する関数」&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;continuation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;# temp1(y) =&amp;gt; print(y + 3)&lt;/span&gt;
 
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# if 3 &amp;gt; 1:&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;temp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;# sum(3 - 1, temp1) # 評価される&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;continuation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;# print(3)  # 評価されない&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;def sum(2, temp1): ...&lt;/code&gt;&lt;br /&gt;
基本的に1.と同様。 &lt;code&gt;temp&lt;/code&gt; の定義では、内部で最後に &lt;code&gt;continuation&lt;/code&gt; を評価するようにしてある。&lt;br /&gt;
これで、関数実行後に継続を評価することになる。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;continuation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# def sum(2, temp):&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&amp;#34;1からxまでの総和を求める&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;temp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# def temp2(y): 「「入力+3を表示する関数」に入力+2を渡して評価する関数」&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;continuation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;# temp2(y) =&amp;gt; temp1(y + 2)&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;#          =&amp;gt; print((y + 2) + 3)&lt;/span&gt;
 
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# if 2 &amp;gt; 1:&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;temp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;# sum(2 - 1, temp2) # 評価される&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;continuation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;# continuation(2) =&amp;gt; temp1(2)&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;#                 =&amp;gt; print(2 + 3)  # 評価されない&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;def sum(1,temp2): ...&lt;/code&gt;&lt;br /&gt;
最後の再帰呼出し。上記までに作成した継続を評価する。これにより、再帰呼び出し内の処理が終わった後に、残っていた処理を全て処理してしまう。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;continuation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# def sum(1, temp):&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&amp;#34;1からxまでの総和を求める&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;temp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# def temp3(y): 「「「入力+3を表示する関数」に入力+2を渡して評価する関数」に入力+1を渡して評価する関数」&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;continuation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;# temp3(y) =&amp;gt; temp2(y + 1)&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;#          =&amp;gt; temp1((y + 1) + 2)&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;#          =&amp;gt; print(((y + 1) + 2) + 3)&lt;/span&gt;
 
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# if 1 &amp;gt; 1:&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;temp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;# sum(1 - 1, temp3) # 評価されない&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;continuation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;# continuation(1) =&amp;gt; temp2(1)&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;#                 =&amp;gt; temp1(1 + 2)&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;#                 =&amp;gt; print((1 + 2) + 3) # 評価される&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;continuation(x)&lt;/code&gt;&lt;br /&gt;
継続を処理する。この例を見て分かるように、継続渡しによる末尾再帰は、結局は再帰関数内でのクロージャの作成とその実行によって実現される。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 6&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;継続渡しによる末尾最適化済みのプログラムは下図のように表せる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+----------------------------+
| func0                      |
| call func1                 |
+----------------------------+
              | (continuation of func0)
              +-------+
                      |
                      v
        +----------------------------+
        | func1                      |
        | call func2                 |
        +----------------------------+
                      | (continuation of func0)
                      +-------+
                              |
                              v
                +----------------------------+
                | func2                      |
                | call continuation of func1 |
                +----------------------------+
                              |
              +---------------+
              |
next          v
+----------------------------+
| continuation of func0      |
+----------------------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちなみに、上図を見て分かる通り、末尾呼び出し最適化済みの処理は、再帰構造になっておらず、継続を渡していくことによる、ただの処理の連鎖になる。&lt;br /&gt;
したがって、末尾再帰最適化よりも、末尾呼び出し最適化の方が本質をついた呼び方だと言える。&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;継続渡しによる末尾呼び出し最適化を実践する&#34;&gt;継続渡しによる末尾呼び出し最適化を実践する&lt;/h1&gt;

&lt;p&gt;末尾呼び出し最適化がされていない関数を、末尾呼び出し最適化された関数にリファクタリングする手順を以下に示す。&lt;/p&gt;

&lt;h2 id=&#34;例1-単純な再帰を継続渡し方式-cps-にリファクタリングする&#34;&gt;例1: 単純な再帰を継続渡し方式(cps)にリファクタリングする&lt;/h2&gt;

&lt;p&gt;例として、リスト内の全要素を足し合わせる &lt;code&gt;add-elements&lt;/code&gt; 関数をcpsにリファクタリングする。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;add-elements&lt;/code&gt; 関数仕様

&lt;ul&gt;
&lt;li&gt;入力: 加算可能な数値が入ったリスト 例: &lt;code&gt;(1 2 3 4)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;出力: リスト内の全要素の総和 例: &lt;code&gt;10&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;その他: デバッグのため &lt;code&gt;break&lt;/code&gt; を設定する。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;最終型&#34;&gt;最終型&lt;/h3&gt;

&lt;p&gt;先に、上記仕様の関数をコードに落とし込んだ結果を示す。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;関連データ・関数&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;; デバッグ処理を有効化&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;declaim&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;optimize&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;debug&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;;; ヘルパー関数&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;two-or-more-p&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;リスト内に2個以上要素が入っているか?&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cdr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;
      &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;;; 少ないリスト数&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;progn&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defparameter&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*small-list*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;make-list&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:initial-element&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
       &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;;; 多いリスト数(継続渡し方式でないとスタックオーバーフローするくらい大きなサイズとする)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;progn&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defparameter&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*large-list*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;make-list&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5000000&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:initial-element&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
       &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;末尾呼び出し最適化されていない関数&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;add-elements&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;非末尾呼び出し形式&amp;amp;非継続渡し形式&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;two-or-more-p&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
         &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;add-elements&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cdr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;prin1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;add-elements&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*small-list*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; 呼び出し数が少なければcpsでなくてもスタックオーバーフローしない&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;prin1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;add-elements&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*large-list*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; 呼び出し数が多いとスタックオーバーフローする&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;継続渡し形式(末尾呼び出し形式)にした関数&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;add-elements/cps&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cont&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;末尾呼び出し形式&amp;amp;継続渡し形式&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;two-or-more-p&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;add-elements/cps&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cdr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                        &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                            &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;funcall&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cont&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;funcall&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cont&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;prin1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;add-elements/cps&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*small-list*&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;prin1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;add-elements/cps&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*large-list*&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;; 呼び出し数が多くてもcpsであるからオーバーフローしない&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;最初は素直に再帰関数を実装する&#34;&gt;最初は素直に再帰関数を実装する&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;add-elements&lt;/code&gt; の仕様は、下記のとおりに解釈できる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;全要素の総和とは、「ある要素」を、「以降の要素の総和」と足し合わせたものである&lt;/li&gt;
&lt;li&gt;要素1つのみの総和とは、その要素自身である&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;見て分かるとおり、この解釈は、数学的帰納法としての解釈にほぼ等しい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sum(list) := car(list) + sum(cdr(list))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sum(element) := element&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これを素直にコードに落とし込むと、下記の通りになる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;add-elements&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;非末尾呼び出し形式&amp;amp;非継続渡し形式&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;two-or-more-p&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
         &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;add-elements&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cdr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このコードは、再帰呼び出しした後、その結果を &lt;code&gt;(car lst)&lt;/code&gt; と足し合わせる処理がある。&lt;br /&gt;
したがって、再帰呼び出しした際、その呼び出し元の継続が暗黙的に作成されてしまう。&lt;/p&gt;

&lt;h3 id=&#34;末尾呼び出し最適化の方針を決める&#34;&gt;末尾呼び出し最適化の方針を決める&lt;/h3&gt;

&lt;p&gt;ここで、継続が暗黙的に作成されないように修正する方法は下記の2種類ある。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;再帰呼び出しの後に何も処理がないように、関数のアルゴリズム自体を書き換える。&lt;/li&gt;
&lt;li&gt;再帰呼び出しの後にすべき処理をクロージャに包み込んで、再帰呼び出し先に一緒に渡してしまい、暗黙的な継続の作成を阻止する。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上の例のように簡単な関数のアルゴリズムであれば、関数のアルゴリズムを書き換えたほうが簡単である。&lt;br /&gt;
実際に、アルゴリズムを書き換えたものは下記のようにも修正できる。&lt;br /&gt;
このとき、引数に渡した値は &lt;code&gt;accumulator&lt;/code&gt; といい、計算の途中結果を意味する。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;accumulator&lt;/code&gt; を用いた末尾呼び出し&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;add-elements&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;&amp;amp;optional&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;acc&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;非末尾呼び出し形式&amp;amp;非継続渡し形式&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;two-or-more-p&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;add-elements&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cdr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;acc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;acc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;簡単なアルゴリズムの場合、上記のように書き換えるのは簡単である。&lt;br /&gt;
しかし、複雑なアルゴリズムの場合 継続渡し方式ならば、ほぼ機械的に末尾呼び出しに変形できる。&lt;br /&gt;
したがって、継続渡し方式の方がより汎用性があるといえる。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;以下では、継続渡し方式による末尾呼び出し最適化を行うことにする&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;戻り値を返す箇所を継続の呼び出しに変更する&#34;&gt;戻り値を返す箇所を継続の呼び出しに変更する&lt;/h3&gt;

&lt;p&gt;上記の関数を継続渡し方式に修正する手順を以下に示す。&lt;/p&gt;

&lt;h4 id=&#34;1-関数の処理完了後に評価されるべき継続-以下-継続-という-を束縛するための仮引数を用意する&#34;&gt;1. 「関数の処理完了後に評価されるべき継続」(以下「継続」という)を束縛するための仮引数を用意する&lt;/h4&gt;

&lt;p&gt;仮引数に、継続渡しのための仮引数を追加する。&lt;br /&gt;
継続を意味する変数を &lt;code&gt;cont&lt;/code&gt; (continuationの略)とする。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;add-elements&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cont&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; 1.&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;非末尾呼び出し形式&amp;amp;非継続渡し形式&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;two-or-more-p&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
         &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;add-elements&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cdr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;2-継続-を-呼び出し先の関数に引数として渡す&#34;&gt;2. 「継続」を、呼び出し先の関数に引数として渡す&lt;/h4&gt;

&lt;h5 id=&#34;2-1-修正前の関数において-再帰呼出し後に実行する処理を-継続-として抽出する&#34;&gt;2-1. 修正前の関数において、再帰呼出し後に実行する処理を「継続」として抽出する&lt;/h5&gt;

&lt;p&gt;この関数における「継続」は &lt;code&gt;(+ (car lst) (add-elements (cdr lst)))&lt;/code&gt; である。つまり、「add-elementsの評価結果を(car lst)と足す」である。&lt;br /&gt;
これをクロージャに包み込むと、 &lt;code&gt;#&#39;(lambda (&amp;lt;add-elementsの戻り値&amp;gt;) (+ (car lst) &amp;lt;add-elementsの戻り値&amp;gt;))&lt;/code&gt; となる。&lt;br /&gt;
実際のコードとしては、例えば &lt;code&gt;add-elementsの戻り値&lt;/code&gt; を &lt;code&gt;m&lt;/code&gt; とおいて &lt;code&gt;#&#39;(lambda (m) (+ (car lst) m))&lt;/code&gt; とすれば良い。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;:NOTE:&lt;/strong&gt; ここで、 &lt;code&gt;lst&lt;/code&gt; は自由変数であるため、 &lt;code&gt;lst&lt;/code&gt; は、ひいては &lt;code&gt;(car lst)&lt;/code&gt; は、クロージャの定義時に評価された値に束縛されることに注意する。&lt;br /&gt;
つまり、&lt;code&gt;lst&lt;/code&gt; は、クロージャを定義した時点のリスト自体を表すことになる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;add-elements&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cont&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; 1.&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;非末尾呼び出し形式&amp;amp;非継続渡し形式&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;two-or-more-p&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;                  &lt;span class=&#34;c1&#34;&gt;;; 2-1. (add-elements)呼び出し後の本関数の処理(=継続)は、「add-elementsの評価結果を(car lst)と足す」である&lt;/span&gt;
         &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;add-elements&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cdr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;;;      =&amp;gt; 継続をクロージャとすると #&amp;#39;(lambda (add-elementsの戻り値) (+ (car lst) add-elementsの戻り値))&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;2-2-抽出した-継続-を-再帰呼出しする際に-引数-cont-に渡す&#34;&gt;2-2. 抽出した「継続」を、再帰呼出しする際に、引数 &lt;code&gt;cont&lt;/code&gt; に渡す&lt;/h5&gt;

&lt;p&gt;2-1. で抽出した継続を、&lt;code&gt;(add-elements)&lt;/code&gt; の引数に渡す。&lt;br /&gt;
こうすることで、 &lt;code&gt;(add-elements)&lt;/code&gt; の評価の末尾で、渡した継続が評価されることになる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;add-elements&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cont&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; 1.&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;非末尾呼び出し形式&amp;amp;非継続渡し形式&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;two-or-more-p&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;add-elements&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cdr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;funcall&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cont&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; 2-2.&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;3-最終的に戻り値を返すのではなく-継続を呼び出すように変更する&#34;&gt;3. 最終的に戻り値を返すのではなく、継続を呼び出すように変更する&lt;/h4&gt;

&lt;p&gt;再帰呼び出しの最後で、もともと戻り値を返していた箇所を、その戻り値を入力にして継続を評価するように変更する。&lt;br /&gt;
これによって、今までクロージャに内包し続けてきた継続を全て評価しきることになる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;add-elements&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cont&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; 1.&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;末尾呼び出し形式&amp;amp;継続渡し形式&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;two-or-more-p&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;add-elements&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cdr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;funcall&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cont&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; 2-2.&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;funcall&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cont&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; 3.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで、非再帰呼び出しの形式から、継続渡し方式による末尾呼び出し形式にリファクタリングできた。&lt;/p&gt;

&lt;h2 id=&#34;例2-関数内で再帰呼び出しを2回行う関数を継続渡し方式-cps-にリファクタリングする&#34;&gt;例2: 関数内で再帰呼び出しを2回行う関数を継続渡し方式(cps)にリファクタリングする&lt;/h2&gt;

&lt;p&gt;例として、木の全ての葉の個数を足し合わせる &lt;code&gt;count-leaf&lt;/code&gt; 関数をcpsにリファクタリングする。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;count-leaf&lt;/code&gt; 関数仕様

&lt;ul&gt;
&lt;li&gt;入力: コンスセルをノードとして構成された木 例: &lt;code&gt;((a . b) . ((c . d) . e))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;出力: 木の全ての葉の個数の総数 例: &lt;code&gt;5&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;その他: デバッグのため &lt;code&gt;break&lt;/code&gt; を設定する。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;                           +-------+
                           |   |   |
                           +-------+
                             |   |
           +-----------------+   +-----------------+
           |                                       |
       +-------+                               +-------+
       |   |   |                               |   |   |
       +-------+                               +-------+
         |   |                                   |   |
 +-------+   +-------+                   +-------+   +-------+
 |                   |                   |                   |
&#39;a                  &#39;b               +-------+              &#39;e
                                     |   |   |
                                     +-------+
                                       |   |
                                   +---+   +---+
                                   |           |
                                  &#39;c          &#39;d
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;最終型-1&#34;&gt;最終型&lt;/h3&gt;

&lt;p&gt;先に、上記仕様の関数をコードに落とし込んだ結果を示す。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;関連データ・関数&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;; デバッグ処理を有効化&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;declaim&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;optimize&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;debug&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;;; ブランチが少ないツリー&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;progn&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defparameter&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*small-tree*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;make-list&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:initial-element&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
       &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;;; ブランチが多いツリー(継続渡し方式でないとスタックオーバーフローするくらい大きなサイズとする)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;progn&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defparameter&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*large-tree*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;make-list&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5000000&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:initial-element&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
       &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;末尾呼び出し最適化されていない関数&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;count-leaf&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;非末尾呼び出し形式&amp;amp;非継続渡し形式&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;consp&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;count-leaf&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
         &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;count-leaf&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cdr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
      &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;prin1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;count-leaf&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*small-tree*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; 呼び出し数が少なければcpsでなくてもスタックオーバーフローしない&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;prin1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;count-leaf&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*large-tree*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; 呼び出し数が多いとスタックオーバーフローする&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;継続渡し形式(末尾呼び出し形式)にした関数&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;define&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;count-leaf/cps&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cont&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;consp&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;count-leaf/cps&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;count-leaf/cps&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cdr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
              &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;funcall&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cont&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))))&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;funcall&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cont&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;prin1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;count-leaf/cps&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*small-tree*&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; 呼び出し数が少なければスタックオーバーフローしない&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;prin1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;count-leaf/cps&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*large-tree*&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; 呼び出し数が多くてもスタックオーバーフローしない&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;最初は素直に再帰関数を実装する-1&#34;&gt;最初は素直に再帰関数を実装する&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;count-leaf&lt;/code&gt; の仕様は、下記のとおりに解釈できる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;あるノードにおける葉の数は、ノードのcar側の枝の下にある葉の数と、ノードのcdr側の枝の下にある葉の数の和である&lt;/li&gt;
&lt;li&gt;ある葉における葉の数は、1である&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この問題を解く計算式を考えると、下記のとおりになる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;count-leaf(node) := count-leaf(car(node)) + count-leaf(cdr(node))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dount-leaf(leaf) := 1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これを素直にコードに落とし込むと、下記の通りになる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;count-leaf&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;非末尾呼び出し形式&amp;amp;非継続渡し形式&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;consp&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;leaf-count&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
         &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;leaf-count&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cdr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
      &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このコードも、再帰呼び出しを2回実行した後、その結果を足し合わせている。&lt;br /&gt;
したがって、再帰呼び出しした際、その呼び出し元の継続が暗黙的に作成されてしまう。&lt;/p&gt;

&lt;h3 id=&#34;末尾呼び出し最適化の方針を決める-1&#34;&gt;末尾呼び出し最適化の方針を決める&lt;/h3&gt;

&lt;p&gt;ここでも &lt;code&gt;accumulator&lt;/code&gt; によって末尾呼び出しに修正できるが、やや面倒である。&lt;br /&gt;
例えば、以下のようにすれば、末尾呼び出しにできる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;accumulator&lt;/code&gt; を途中で見つけた葉の数を覚えておくために使用する。&lt;/li&gt;
&lt;li&gt;親ノードに戻れるようにするため、ツリー全体の情報と、現在位置(インスタンスへの参照)を引数に覚える。&lt;/li&gt;
&lt;li&gt;ツリーのルートから深さ優先探索を行い、途中で葉を見つけたら &lt;code&gt;accumulator&lt;/code&gt; をインクリメントする。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ただし、この方法は探索の各時点における情報を管理する必要があり、再帰呼出しの利点を活かせていない。&lt;br /&gt;
やはりこの場合、継続渡しを用いた末尾呼び出しへの修正を考えたほうが良い。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;以下では、継続渡し方式による末尾呼び出し最適化を行うことにする&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;戻り値を返す箇所を継続の呼び出しに変更する-1&#34;&gt;戻り値を返す箇所を継続の呼び出しに変更する&lt;/h3&gt;

&lt;p&gt;上記の関数を継続渡し方式に修正する手順を以下に示す。&lt;/p&gt;

&lt;h4 id=&#34;1-関数の処理完了後に評価されるべき継続-以下-継続-という-を束縛するための仮引数を用意する-1&#34;&gt;1. 「関数の処理完了後に評価されるべき継続」(以下「継続」という)を束縛するための仮引数を用意する&lt;/h4&gt;

&lt;p&gt;仮引数に、継続渡しのための仮引数を追加する。&lt;br /&gt;
継続を意味する変数を &lt;code&gt;cont&lt;/code&gt; (continuationの略)とする。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;count-leaf&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cont&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; 1.&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;非末尾呼び出し形式&amp;amp;非継続渡し形式&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;consp&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;leaf-count&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
         &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;leaf-count&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cdr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
      &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;2-継続-を-呼び出し先の関数に引数として渡す-1&#34;&gt;2. 「継続」を、呼び出し先の関数に引数として渡す&lt;/h4&gt;

&lt;h5 id=&#34;2-1-修正前の関数において-再帰呼出し後に実行する処理を-継続-として抽出する-1&#34;&gt;2-1. 修正前の関数において、再帰呼出し後に実行する処理を「継続」として抽出する&lt;/h5&gt;

&lt;p&gt;この関数における「継続」は、やや複雑になる。というのも、再帰呼出しが2回あるため、再帰呼び出し後の継続の中に、さらに再帰呼び出しが内包される形になる。&lt;/p&gt;

&lt;h6 id=&#34;2-1-1-再帰呼び出しと継続を抽出する&#34;&gt;2-1-1. 再帰呼び出しと継続を抽出する&lt;/h6&gt;

&lt;p&gt;再帰関数が作成する継続は2段階に分けられる。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;(count-leaf (car tree))&lt;/code&gt; 再帰呼び出し自体&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(count-leaf (cdr tree))&lt;/code&gt; 継続1&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(+ 0: 1:)&lt;/code&gt; 継続2&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;c1&#34;&gt;; 再帰呼び出し処理があるパスの、&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 再帰呼び出し自体&amp;amp;それ以降の処理&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;count-leaf&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;count-leaf&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cdr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;c1&#34;&gt;; 再帰呼び出しと、それ以降の処理をステップ毎に列挙する&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 0: は再帰呼出し自体&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; 0:&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;count-leaf&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 1:&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;count-leaf&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cdr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 2:&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;0:の戻り値&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;1:の戻り値&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h6 id=&#34;2-1-2-再帰呼び出しの-継続-仮引数部分に継続を渡す&#34;&gt;2-1-2. 再帰呼び出しの「継続」仮引数部分に継続を渡す&lt;/h6&gt;

&lt;p&gt;再帰呼び出しのcont部分に継続を渡す。&lt;br /&gt;
&lt;code&gt;(make-cont x:)&lt;/code&gt; は、処理 &lt;code&gt;x:&lt;/code&gt; 以降の処理を内包するクロージャを作成する仮想的な関数である。&lt;br /&gt;
この仮想的な関数を導入することで、継続渡し方式への変換が後々楽になる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;c1&#34;&gt;; 0:&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;count-leaf/cps&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;make-cont&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;1:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 1:&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;count-leaf/cps&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cdr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;make-cont&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;2:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 2:&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;0:の戻り値&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;1:の戻り値&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h6 id=&#34;2-1-3-再帰呼び出し後の処理の最後に継続の呼び出しを追加する&#34;&gt;2-1-3. 再帰呼び出し後の処理の最後に継続の呼び出しを追加する&lt;/h6&gt;

&lt;p&gt;再帰呼び出し後の処理の最後に、継続の呼び出しを追加する。&lt;br /&gt;
こうすることで、再帰呼出し後に、蓄積した継続を全て処理するようになる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;c1&#34;&gt;; 0:&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;count-leaf/cps&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;make-cont&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;1:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 1:&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;count-leaf/cps&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cdr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;make-cont&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;2:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 2:&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;funcall&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cont&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;0:の戻り値&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;1:の戻り値&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h6 id=&#34;2-1-4-最後の処理をクロージャに閉包する&#34;&gt;2-1-4. 最後の処理をクロージャに閉包する&lt;/h6&gt;

&lt;p&gt;抽出した複数の継続のうち、最後の継続、つまり2:をクロージャに閉包する。&lt;br /&gt;
ここで作成したクロージャの引数は、1:の戻り値を受け取る。&lt;br /&gt;
ここでは、1:の戻り値を &lt;code&gt;m&lt;/code&gt; とする。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;c1&#34;&gt;; 0:&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;count-leaf/cps&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;make-cont&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;1:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 1:&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;count-leaf/cps&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cdr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;make-cont&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;2:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; (count-leaf/cps (cdr tree))の戻り値をmとする&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 2:をcontとして閉包する&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; m = 1:の戻り値&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;funcall&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cont&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;0:の戻り値&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h6 id=&#34;2-1-5-継続を遡っていき-順々にクロージャに閉包していく&#34;&gt;2-1-5. 継続を遡っていき、順々にクロージャに閉包していく&lt;/h6&gt;

&lt;p&gt;再帰呼び出し後の最後の処理から前の処理に遡りつつクロージャに閉包していく。&lt;br /&gt;
ここで作成したクロージャの引数は、0:の戻り値を受け取る。&lt;br /&gt;
ここでは、0:の戻り値を &lt;code&gt;n&lt;/code&gt; とする。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;c1&#34;&gt;; 0:&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;count-leaf/cps&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;make-cont&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;1:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; (count-leaf/cps (car tree))の戻り値をnとする&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 1:&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; contとして閉包する&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; n = 0:の戻り値&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;count-leaf/cps&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cdr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 2:&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; m = 1:の戻り値&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;funcall&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cont&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h6 id=&#34;2-1-6-閉包したクロージャを最後の処理から遡りつつ入れ子にしていく&#34;&gt;2-1-6. 閉包したクロージャを最後の処理から遡りつつ入れ子にしていく&lt;/h6&gt;

&lt;p&gt;上記で別々に作成したクロージャをまとめていく。&lt;br /&gt;
まず、1:の中に2:を入れる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;c1&#34;&gt;; 0:&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;count-leaf/cps&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;make-cont&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;1:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 1:&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; n = 0:の戻り値&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;count-leaf/cps&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cdr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; m = 1:の戻り値&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;funcall&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cont&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次に、0:の中に1:を入れる。&lt;br /&gt;
これで全てのクロージャを一つにまとめられた。&lt;br /&gt;
これがcpsの再帰呼び出しになる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;c1&#34;&gt;; 0: = count-leaf/cpsの継続&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;count-leaf/cps&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; n = 0:の戻り値&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;count-leaf/cps&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cdr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; m = 1:の戻り値&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;funcall&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cont&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;2-2-抽出した-継続-を-再帰呼出しする際に-引数-cont-に渡す-1&#34;&gt;2-2. 抽出した「継続」を、再帰呼出しする際に、引数 &lt;code&gt;cont&lt;/code&gt; に渡す&lt;/h5&gt;

&lt;p&gt;関数呼び出し処理にcpsの再帰呼び出しを入れる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;define&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;count-leaf/cps&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cont&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;consp&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;count-leaf/cps&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; n = 0:の戻り値&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;count-leaf/cps&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cdr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
              &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; m = 1:の戻り値&lt;/span&gt;
                  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;funcall&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cont&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))))&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;funcall&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cont&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで、再帰呼出し処理を機械的にcpsに変換できた。&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;非末尾再帰を継続渡し形式によって末尾再帰に変換する手順&#34;&gt;非末尾再帰を継続渡し形式によって末尾再帰に変換する手順&lt;/h1&gt;

&lt;p&gt;上記で実施した手順をまとめると、非末尾再帰を継続渡し形式によって末尾再帰に変換するルールが分かる。&lt;br /&gt;
このルールを以下に示す。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;関数の仮引数に継続用の変数を追加する&lt;/li&gt;
&lt;li&gt;関数の戻り値を返す部分を継続の呼び出し処理に修正する&lt;/li&gt;
&lt;li&gt;再帰呼出し処理とその後の処理の部分を抽出する&lt;/li&gt;
&lt;li&gt;再帰呼び出しの継続部分に継続を渡す&lt;/li&gt;
&lt;li&gt;再帰呼び出し後の処理に継続の呼び出しを追加する&lt;/li&gt;
&lt;li&gt;継続の最後の処理をクロージャに閉包する&lt;/li&gt;
&lt;li&gt;他の処理も6.と同様にクロージャに閉包する&lt;/li&gt;
&lt;li&gt;クロージャを一つにまとめる&lt;/li&gt;
&lt;li&gt;最初の再帰呼び出しに継続を代入する&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;コード例&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;predicate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;bar&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;1-関数の仮引数に継続用の変数を追加する&#34;&gt;1. 関数の仮引数に継続用の変数を追加する&lt;/h2&gt;

&lt;p&gt;継続用の変数は &lt;code&gt;continuation&lt;/code&gt; の略である &lt;code&gt;cont&lt;/code&gt; をよく用いる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cont&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;predicate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;bar&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;2-関数の戻り値を返す部分を継続の呼び出し処理に修正する&#34;&gt;2. 関数の戻り値を返す部分を継続の呼び出し処理に修正する&lt;/h2&gt;

&lt;p&gt;関数の戻り値を返す部分を、戻り値を入力とした &lt;code&gt;cont&lt;/code&gt; の呼び出し処理に置き換える。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cont&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;predicate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;bar&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;funcall&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cont&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;3-再帰呼出し処理とその後の処理の部分を抽出する&#34;&gt;3. 再帰呼出し処理とその後の処理の部分を抽出する&lt;/h2&gt;

&lt;p&gt;再帰呼出し処理と、その後の処理の部分を抽出する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;bar&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;後で分かりやすくするために、各処理を分解しておく。&lt;br /&gt;
ここで、ある処理について、それ以前の処理の戻り値を使用している場合は、その戻り値を使用している箇所を明示しておく。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;c1&#34;&gt;; 0:&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 1:&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 2:&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;bar&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;0:の戻り値&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;1:の戻り値&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;4-再帰呼び出しの継続部分に継続を渡す&#34;&gt;4. 再帰呼び出しの継続部分に継続を渡す&lt;/h2&gt;

&lt;p&gt;再帰関数の呼び出し箇所において、継続渡し用の仮引数に、その処理の次の処理を継続として渡すように明示する。&lt;br /&gt;
&lt;code&gt;(make-cont x:)&lt;/code&gt; は、処理 &lt;code&gt;x:&lt;/code&gt; 以降の処理を内包するクロージャを作成する仮想的な関数。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;c1&#34;&gt;; 0:&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;make-cont&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;1:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 1:&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;make-cont&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;2:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 2:&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;funcall&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cont&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;bar&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;0:の戻り値&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;1:の戻り値&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;5-再帰呼び出し後の処理に継続の呼び出しを追加する&#34;&gt;5. 再帰呼び出し後の処理に継続の呼び出しを追加する&lt;/h2&gt;

&lt;p&gt;再帰呼び出しの後の継続を全て評価するため、再帰呼び出し後の処理に継続の呼び出しを追加する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;c1&#34;&gt;; 0:&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;make-cont&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;1:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 1:&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;make-cont&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;2:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 2:&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;funcall&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cont&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;bar&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;0:の戻り値&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;1:の戻り値&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;6-継続の最後の処理をクロージャに閉包する&#34;&gt;6. 継続の最後の処理をクロージャに閉包する&lt;/h2&gt;

&lt;p&gt;継続の最後の処理をクロージャに閉包する。&lt;br /&gt;
このクロージャの引数には、クロージャに閉包する処理の前の処理の戻り値が渡されることになる。&lt;br /&gt;
こうすることで、クロージャが評価された時、その最後に、引数で渡された戻り値を使って継続が評価されることになる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;c1&#34;&gt;; 0:&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;make-cont&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;1:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 1:&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;make-cont&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;2:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; 1: (foo n) の戻り値をxとする&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 2:&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; x = 1:の戻り値&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;funcall&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cont&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;bar&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;0:の戻り値&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;7-他の処理も6-と同様にクロージャに閉包する&#34;&gt;7. 他の処理も6.と同様にクロージャに閉包する&lt;/h2&gt;

&lt;p&gt;上記6.のクロージャへの閉包と同様に、各処理を最後から前に遡りながら、クロージャに閉包していく。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;c1&#34;&gt;; 0:&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;make-cont&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;1:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; 0: (foo n) の戻り値をyとする&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 1:&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; y = 0:の戻り値&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;make-cont&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;2:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 2:&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; x = 1:の戻り値&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;funcall&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cont&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;bar&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;8-クロージャを一つにまとめる&#34;&gt;8. クロージャを一つにまとめる&lt;/h2&gt;

&lt;p&gt;上記で作成したクロージャを一つにまとめる。&lt;br /&gt;
&lt;code&gt;(make-cont ?:)&lt;/code&gt; の部分に &lt;code&gt;?:&lt;/code&gt; を代入する。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;2:&lt;/code&gt; を &lt;code&gt;1:&lt;/code&gt; の &lt;code&gt;(make-cont 2:)&lt;/code&gt; に代入する。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;c1&#34;&gt;; 0:&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;make-cont&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;1:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 1:&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; y = 0:の戻り値&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; x = 1:の戻り値&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;funcall&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cont&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;bar&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1:&lt;/code&gt; を &lt;code&gt;0:&lt;/code&gt; の &lt;code&gt;(make-cont 1:)&lt;/code&gt; に代入する。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;c1&#34;&gt;; 0:&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt;
  &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; y = 0:の戻り値&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt;
        &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; x = 1:の戻り値&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;funcall&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cont&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;bar&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで、再帰呼び出し後の継続を作成できた。&lt;/p&gt;

&lt;h2 id=&#34;9-最初の再帰呼び出しに継続を代入する&#34;&gt;9. 最初の再帰呼び出しに継続を代入する&lt;/h2&gt;

&lt;p&gt;最初の再帰呼び出しの継続用の仮引数部分に、上記で作成した継続を代入する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cont&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;predicate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt;
        &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; y = 0:の戻り値&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt;
              &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; x = 1:の戻り値&lt;/span&gt;
                  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;funcall&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cont&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;bar&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))))&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;funcall&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cont&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで、非末尾再帰を継続渡し形式によって末尾再帰に変換できた。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Vimをビルドする</title>
      <link>https://otaon.github.io/web/ja-jp/2019/03/07/vim%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%99%E3%82%8B/</link>
      <pubDate>Thu, 07 Mar 2019 02:00:00 +0900</pubDate>
      
      <guid>https://otaon.github.io/web/ja-jp/2019/03/07/vim%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%99%E3%82%8B/</guid>
      
        <description>

&lt;h4 id=&#34;gitからclone&#34;&gt;gitからclone&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git clone https://github.com/vim/vim.git ~/git/vim&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;コンフィグ&#34;&gt;コンフィグ&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;prefix&lt;/code&gt;にvimのインストール先を設定する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ~/git/vim 
$ ./configure &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--prefix&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$HOME&lt;/span&gt;/.local &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--with-features&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;huge &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--enable-multibyte &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--enable-rubyinterp &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--enable-pythoninterp &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--enable-python3interp &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--enable-perlinterp &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--enable-fontset &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--enable-luainterp &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--enable-fail-if-missing&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;make-install&#34;&gt;make install&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ make install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;pathを通す&#34;&gt;PATHを通す&lt;/h4&gt;

&lt;p&gt;場合によっては最初からPATHが通っている。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;$HOME/.profile&lt;/strong&gt;*&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# if running bash&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; -n &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$BASH_VERSION&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# include .bashrc if it exists&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; -f &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$HOME&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/.bashrc&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
	. &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$HOME&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/.bashrc&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# set PATH so it includes user&amp;#39;s private bin if it exists&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; -d &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$HOME&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/bin&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;PATH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$HOME&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/bin:&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$PATH&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# set PATH so it includes user&amp;#39;s private bin if it exists&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; -d &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$HOME&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/.local/bin&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;PATH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$HOME&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/.local/bin:&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$PATH&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>slimvショートカット一覧</title>
      <link>https://otaon.github.io/web/ja-jp/2019/03/07/slimv%E3%82%B7%E3%83%A7%E3%83%BC%E3%83%88%E3%82%AB%E3%83%83%E3%83%88%E4%B8%80%E8%A6%A7/</link>
      <pubDate>Thu, 07 Mar 2019 02:00:00 +0900</pubDate>
      
      <guid>https://otaon.github.io/web/ja-jp/2019/03/07/slimv%E3%82%B7%E3%83%A7%E3%83%BC%E3%83%88%E3%82%AB%E3%83%83%E3%83%88%E4%B8%80%E8%A6%A7/</guid>
      
        <description>

&lt;ul&gt;
&lt;li&gt;一部誤謬がある可能性がある&lt;/li&gt;
&lt;li&gt;&lt;code&gt;abc^de&lt;/code&gt; はカーソルがcの上にあることを意味する&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;編集-edit&#34;&gt;編集 edit&lt;/h2&gt;

&lt;h3 id=&#34;一般操作&#34;&gt;一般操作&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;コマンド&lt;/th&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;操作例&lt;/th&gt;
&lt;th&gt;操作結果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;,)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;S式を閉じる&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(foo&lt;/code&gt; ,)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(foo)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;タブ&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;シンボルを補完する&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(conca)&lt;/code&gt;上でタブ&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(concatenate)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;,j&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;定義を探す&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(^foo)&lt;/code&gt;,j&lt;br/&gt;→対象名を入力してEnter&lt;/td&gt;
&lt;td&gt;タグファイルがあれば&lt;code&gt;foo&lt;/code&gt;の定義にタグジャンプ&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;,(&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;pareditモードを切り替える&lt;/td&gt;
&lt;td&gt;下記コマンドが(使える|使えない)&lt;/td&gt;
&lt;td&gt;下記コマンドが(使えない|使える)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;pareditモード操作&#34;&gt;pareditモード操作&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;コマンド&lt;/th&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;操作例&lt;/th&gt;
&lt;th&gt;操作結果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;,W&lt;/code&gt;&lt;br/&gt;&lt;code&gt;,w(&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;S式を括弧で包む&lt;/td&gt;
&lt;td&gt;&lt;code&gt;foo^&lt;/code&gt; ,W&lt;br/&gt;&lt;code&gt;foo^&lt;/code&gt; ,w(&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(foo)&lt;/code&gt;&lt;br/&gt;&lt;code&gt;(foo)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;,S&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;S式をスプライスする(上の式と一緒にする)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(foo (^bar))&lt;/code&gt;  ,S&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(foo bar)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;,O&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;S式をカーソルの左右で分離させる&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(foo^ bar)&lt;/code&gt;  ,O&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(foo) (bar)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;,J&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;S式をくっつける&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(foo) ^ (bar)&lt;/code&gt;  ,J&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(foo bar)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;,I&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;S式を1つ上の式に移動させ、&lt;br/&gt;元あった上のS式を削除する&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(foo (bar))&lt;/code&gt; ,I&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(bar)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;,&amp;lt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;括弧を左に動かす&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(foo)^ (bar baz qux)&lt;/code&gt; ,&amp;lt;&lt;br/&gt;&lt;code&gt;(foo) (^bar baz qux)&lt;/code&gt; ,&amp;lt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;() foo (bar baz qux)&lt;/code&gt;&lt;br/&gt;&lt;code&gt;((foo) bar baz qux)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;,&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;括弧を右に動かす&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(foo)^ (bar baz qux)&lt;/code&gt; ,&amp;gt;&lt;br/&gt;&lt;code&gt;^(foo) (bar baz qux)&lt;/code&gt; ,&amp;gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(foo (bar baz qux))&lt;/code&gt;&lt;br/&gt;&lt;code&gt;foo () (bar baz qux)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;評価-evaluation&#34;&gt;評価 evaluation&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;コマンド&lt;/th&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;操作例&lt;/th&gt;
&lt;th&gt;操作結果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;,d&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;defunを評価する&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(^defun foo () ...)&lt;/code&gt; ,d&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(defun foo () ...)&lt;/code&gt; を評価する&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;,e&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;現在の式を評価する&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(defun foo () aaa^ bbb)&lt;/code&gt; ,e&lt;/td&gt;
&lt;td&gt;&lt;code&gt;aaa&lt;/code&gt; を評価する&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;,r&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;選択範囲を評価する&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(defun foo () ^aaa bbb^)&lt;/code&gt; ,r&lt;/td&gt;
&lt;td&gt;&lt;code&gt;aaa bbb&lt;/code&gt; を評価する&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;,b&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;現在のバッファを評価する&lt;/td&gt;
&lt;td&gt;現在のバッファ&lt;code&gt;foo.lisp&lt;/code&gt; ,b&lt;/td&gt;
&lt;td&gt;&lt;code&gt;foo.lisp&lt;/code&gt; を評価する&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;,v&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;対話的に評価する&lt;/td&gt;
&lt;td&gt;,v&lt;/td&gt;
&lt;td&gt;対話的に評価する&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;,u&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;関数の定義を解消する&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(^defun foo () ...)&lt;/code&gt; ,u&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(defun foo () ...)&lt;/code&gt; の定義を解消する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;デバッグ-debugging&#34;&gt;デバッグ debugging&lt;/h2&gt;

&lt;h3 id=&#34;デバッグ用コード編集&#34;&gt;デバッグ用コード編集&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;コマンド&lt;/th&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;操作例&lt;/th&gt;
&lt;th&gt;操作結果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;,1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;マクロを1段階展開する&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(^macro ...)&lt;/code&gt; ,1&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(macro ...)&lt;/code&gt; を1段階展開した結果をREPLに表示する&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;,m&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;マクロを全段階展開する&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(^macro ...)&lt;/code&gt; ,m&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(macro ...)&lt;/code&gt; を全段階展開した結果をREPLに表示する&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;,t&lt;/code&gt;&lt;br/&gt;&lt;code&gt;(trace functinname)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;関数のトレースを切り替える&lt;br/&gt;トレース時は、実行時に再帰的にトレース情報表示する&lt;/td&gt;
&lt;td&gt;&lt;code&gt;foo^&lt;/code&gt; ,t&lt;/td&gt;
&lt;td&gt;関数トレースを切り替える&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;,T&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;全ての関数に対するトレースを解消する&lt;/td&gt;
&lt;td&gt;トレース設定されている関数がない ,T&lt;/td&gt;
&lt;td&gt;トレース設定されている関数がない&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;,B&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ブレークポイントを設定する&lt;br/&gt;# 実行するとエラー&lt;/td&gt;
&lt;td&gt;&lt;code&gt;^(foo ...)&lt;/code&gt; ,B&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(break) (foo ...)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;,E&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;例外発生時にブレークする&lt;br/&gt;# ritz-swankのみで有効&lt;/td&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;,l&lt;/code&gt;&lt;br/&gt;&lt;code&gt;(disassemble &#39;foo)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;シンボルをディスアセンブルする&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(^foo ...)&lt;/code&gt; ,l&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(foo ...)&lt;/code&gt; をディスアセンブルした結果をREPLに表示する&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;,i&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;インスペクトを表示する&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(^macro ...)&lt;/code&gt; ,i&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(macro ...)&lt;/code&gt; を評価する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;デバッガ操作&#34;&gt;デバッガ操作&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;コマンド&lt;/th&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;操作例&lt;/th&gt;
&lt;th&gt;操作結果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;,a&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;デバッガをabortする&lt;/td&gt;
&lt;td&gt;デバッガ起動中 ,a&lt;/td&gt;
&lt;td&gt;デバッガが終了する&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;,q&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;デバッガを終了してトップレベルに戻る&lt;/td&gt;
&lt;td&gt;デバッガ起動中 ,q&lt;/td&gt;
&lt;td&gt;デバッガが終了してREPLがトップレベルに戻る&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;,n&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コンテニューする&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(^defun foo () ...)&lt;/code&gt; ,n&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(defun foo () ...)&lt;/code&gt; を評価する&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;,N&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定フレームから再開する&lt;/td&gt;
&lt;td&gt;デバッガのBacktrace:&lt;code&gt;n:(foo bar)&lt;/code&gt; ,N&lt;/td&gt;
&lt;td&gt;指定フレームから再開する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;スレッド操作&#34;&gt;スレッド操作&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;コマンド&lt;/th&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;操作例&lt;/th&gt;
&lt;th&gt;操作結果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;,H&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;スレッド一覧を表示する&lt;/td&gt;
&lt;td&gt;ファイル編集時 ,H&lt;/td&gt;
&lt;td&gt;スレッド一覧をREPL側にする&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;,K&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;スレッドをkillする&lt;/td&gt;
&lt;td&gt;,K → スレッド番号指定&lt;/td&gt;
&lt;td&gt;指定したスレッドをkillする&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;,G&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;スレッドをデバッグする&lt;/td&gt;
&lt;td&gt;,G → スレッド番号指定&lt;/td&gt;
&lt;td&gt;指定したスレッドをデバッグする&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;コンパイル-compilation&#34;&gt;コンパイル compilation&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;コマンド&lt;/th&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;操作例&lt;/th&gt;
&lt;th&gt;操作結果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;,D&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;defunをコンパイルする&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(defun foo^ () ...)&lt;/code&gt; ,D&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(defun foo () ...)&lt;/code&gt; をコンパイルする&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;,L&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ファイルをロードしてコンパイルする&lt;/td&gt;
&lt;td&gt;,L&lt;/td&gt;
&lt;td&gt;編集中のファイルをロードしてコンパイルする&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;,F&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ファイルをコンパイルする&lt;/td&gt;
&lt;td&gt;,F&lt;/td&gt;
&lt;td&gt;編集中のファイルをコンパイルする&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;,R&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;選択範囲をコンパイルする&lt;/td&gt;
&lt;td&gt;範囲選択→,R&lt;/td&gt;
&lt;td&gt;選択範囲をコンパイルする&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;xref&#34;&gt;Xref&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;コマンド&lt;/th&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;操作例&lt;/th&gt;
&lt;th&gt;操作結果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;,xc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;呼び出す側を表示する&lt;/td&gt;
&lt;td&gt;&lt;code&gt;foo^&lt;/code&gt; ,xc&lt;/td&gt;
&lt;td&gt;&lt;code&gt;foo&lt;/code&gt; 対象を呼び出すコードの位置を表示する&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;,xr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;参照する側を表示する&lt;/td&gt;
&lt;td&gt;&lt;code&gt;foo^&lt;/code&gt; ,xr&lt;/td&gt;
&lt;td&gt;&lt;code&gt;foo&lt;/code&gt; 対象を参照するコードの位置を表示する&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;,xs&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;セットする側を表示する&lt;/td&gt;
&lt;td&gt;&lt;code&gt;foo^&lt;/code&gt; ,xs&lt;/td&gt;
&lt;td&gt;&lt;code&gt;foo&lt;/code&gt; 対象をセットするコードの位置を表示する&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;,xb&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;バインドする側を表示する&lt;/td&gt;
&lt;td&gt;&lt;code&gt;foo^&lt;/code&gt; ,xb&lt;/td&gt;
&lt;td&gt;&lt;code&gt;foo&lt;/code&gt; 対象をバインドするコードの位置を表示する&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;,xm&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;マクロを展開する側を表示する&lt;/td&gt;
&lt;td&gt;&lt;code&gt;foo^&lt;/code&gt; ,xm&lt;/td&gt;
&lt;td&gt;&lt;code&gt;foo&lt;/code&gt; 対象マクロを展開するコードの位置を表示する&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;,xp&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;特化(継承)する側を表示する&lt;/td&gt;
&lt;td&gt;&lt;code&gt;foo^&lt;/code&gt; ,xp&lt;/td&gt;
&lt;td&gt;&lt;code&gt;foo&lt;/code&gt; 対象を特化したコードの位置を表示する&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;,xl&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;呼び出す側をリスト表示する&lt;/td&gt;
&lt;td&gt;&lt;code&gt;foo^&lt;/code&gt; ,xl&lt;/td&gt;
&lt;td&gt;&lt;code&gt;foo&lt;/code&gt; 対象を呼び出すコードをリスト表示する&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;,xe&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;呼び出される側をリスト表示する&lt;/td&gt;
&lt;td&gt;&lt;code&gt;foo^&lt;/code&gt; ,xe&lt;/td&gt;
&lt;td&gt;&lt;code&gt;foo&lt;/code&gt; 対象から呼び出されるコードをリスト表示する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;プロファイリング-profiling&#34;&gt;プロファイリング Profiling&lt;/h2&gt;

&lt;h3 id=&#34;プロファイリング設定&#34;&gt;プロファイリング設定&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;コマンド&lt;/th&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;操作例&lt;/th&gt;
&lt;th&gt;操作結果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;,p&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;シンボルへのプロファイリングを切り替える&lt;/td&gt;
&lt;td&gt;&lt;code&gt;foo^&lt;/code&gt; ,p → シンボル名を入力してEnter&lt;/td&gt;
&lt;td&gt;指定したシンボルへのプロファイリングを開始/終了する&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;,P&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;部分文字列によってプロファイリングを切り替える&lt;/td&gt;
&lt;td&gt;&lt;code&gt;foo^&lt;/code&gt; ,P → シンボル名を入力してEnter&lt;/td&gt;
&lt;td&gt;指定したシンボルへのプロファイリングを開始/終了する&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;,U&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;全てのプロファイルを削除する&lt;/td&gt;
&lt;td&gt;,U&lt;/td&gt;
&lt;td&gt;全てのプロファイリング中を解除する&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;,?&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;プロファイルされたものを表示する&lt;/td&gt;
&lt;td&gt;,?&lt;/td&gt;
&lt;td&gt;プロファイリング対象を表示する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;プロファイリング確認&#34;&gt;プロファイリング確認&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;コマンド&lt;/th&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;操作例&lt;/th&gt;
&lt;th&gt;操作結果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;,o&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;プロファイルリポートを確認する&lt;/td&gt;
&lt;td&gt;,o&lt;/td&gt;
&lt;td&gt;REPLにプロファイルレポートを表示する&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;,X&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;プロファイル設定をリセットする&lt;/td&gt;
&lt;td&gt;関数へのプロファイルカウンタがセットされている ,X&lt;/td&gt;
&lt;td&gt;全ての関数へのプロファイルカウンタされる&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;ドキュメント-documentation&#34;&gt;ドキュメント documentation&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;コマンド&lt;/th&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;操作例&lt;/th&gt;
&lt;th&gt;操作結果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;,s&lt;/code&gt; or &lt;code&gt;(describe &amp;quot;symbol&amp;quot;)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;シンボルの情報を表示する&lt;/td&gt;
&lt;td&gt;&lt;code&gt;^symbol&lt;/code&gt; ,s&lt;/td&gt;
&lt;td&gt;&lt;code&gt;symbol&lt;/code&gt;の情報をステータスラインに表示する&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;,A&lt;/code&gt; or &lt;code&gt;(appropos &amp;quot;keyword&amp;quot;)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;キーワードに一致する定義情報を一覧表示する&lt;/td&gt;
&lt;td&gt;&lt;code&gt;^keyword&lt;/code&gt; ,A&lt;/td&gt;
&lt;td&gt;&lt;code&gt;keyword&lt;/code&gt;が含まれる定義情報をREPLに表示する&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;,h&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;選択シンボルをhyperspecで開く&lt;/td&gt;
&lt;td&gt;&lt;code&gt;^symbol&lt;/code&gt; ,h&lt;/td&gt;
&lt;td&gt;&lt;code&gt;symbol&lt;/code&gt;をhyperspecで表示する&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;,]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;タグを生成する&lt;/td&gt;
&lt;td&gt;,]&lt;/td&gt;
&lt;td&gt;タグファイルを生成する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;repl&#34;&gt;REPL&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;コマンド&lt;/th&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;操作例&lt;/th&gt;
&lt;th&gt;操作結果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;,c&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;サーバに接続する&lt;/td&gt;
&lt;td&gt;,c&lt;/td&gt;
&lt;td&gt;swankサーバに接続する&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;,y&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;lispのプロセスにインタラプトする&lt;/td&gt;
&lt;td&gt;,y&lt;/td&gt;
&lt;td&gt;実行中のlispのプロセスに割り込んでデバッガを起動する&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;,-&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;REPLの表示をクリアする&lt;/td&gt;
&lt;td&gt;c-&lt;/td&gt;
&lt;td&gt;REPLの表示をクリアする&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;,Q&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;REPLを終了する&lt;/td&gt;
&lt;td&gt;,Q&lt;/td&gt;
&lt;td&gt;REPLを終了する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
      
    </item>
    
    <item>
      <title>Common Lisp ディレクトリパスを取得/設定する</title>
      <link>https://otaon.github.io/web/ja-jp/2019/03/07/common-lisp-%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E3%83%91%E3%82%B9%E3%82%92%E5%8F%96%E5%BE%97/%E8%A8%AD%E5%AE%9A%E3%81%99%E3%82%8B/</link>
      <pubDate>Thu, 07 Mar 2019 00:00:00 +0900</pubDate>
      
      <guid>https://otaon.github.io/web/ja-jp/2019/03/07/common-lisp-%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E3%83%91%E3%82%B9%E3%82%92%E5%8F%96%E5%BE%97/%E8%A8%AD%E5%AE%9A%E3%81%99%E3%82%8B/</guid>
      
        <description>

&lt;h1 id=&#34;本記事の目的&#34;&gt;本記事の目的&lt;/h1&gt;

&lt;p&gt;Lisp処理系起動時のディレクトリパス/カレントディレクトリパスを取得/設定する&lt;/p&gt;

&lt;h1 id=&#34;参考サイト&#34;&gt;参考サイト&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://lisphub.jp/common-lisp/cookbook/index.cgi?%E5%87%A6%E7%90%86%E7%B3%BB%E3%82%92%E8%B5%B7%E5%8B%95%E3%81%97%E3%81%9F%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E3%81%AE%E3%83%91%E3%82%B9%E3%83%8D%E3%83%BC%E3%83%A0%E3%82%92%E8%BF%94%E3%81%99&#34;&gt;処理系を起動したディレクトリのパスネームを返す&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;処理系を起動したディレクトリのパスネームを返す&#34;&gt;処理系を起動したディレクトリのパスネームを返す&lt;/h2&gt;

&lt;p&gt;truenameを使う。&lt;/p&gt;

&lt;h3 id=&#34;対応環境-sbcl-clisp-cmucl&#34;&gt;対応環境: &lt;code&gt;SBCL&lt;/code&gt;, &lt;code&gt;CLISP&lt;/code&gt;, &lt;code&gt;CMUCL&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;truename&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;./&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;;=&amp;gt; #P&amp;#34;処理系を起動したディレクトリ&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;実行例&#34;&gt;実行例&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;truename&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;./&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;;=&amp;gt; #P&amp;#34;/users/username/&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;各処理系でのカレントディレクトリの取得と設定&#34;&gt;各処理系でのカレントディレクトリの取得と設定&lt;/h2&gt;

&lt;h3 id=&#34;対応環境-sbcl&#34;&gt;対応環境: &lt;code&gt;SBCL&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;c1&#34;&gt;; ディレクトリパスを取得する&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;sb-posix:getcwd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;;=&amp;gt;#P&amp;#34;カレントディレクトリ&amp;#34;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; ディレクトリパスを設定する&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;sb-posix:chdir&lt;/span&gt; &lt;span class=&#34;l&#34;&gt;#P&amp;#34;設定したいディレクトリ&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;対応環境-clisp&#34;&gt;対応環境: &lt;code&gt;CLISP&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;c1&#34;&gt;; ディレクトリパスを取得する&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;ext:default-directory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;;=&amp;gt;#P&amp;#34;カレントディレクトリ&amp;#34;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; ディレクトリパスを設定する&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;ext:cd&lt;/span&gt; &lt;span class=&#34;l&#34;&gt;#P&amp;#34;設定したいディレクトリ&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;対応環境-cmucl&#34;&gt;対応環境: &lt;code&gt;CMUCL&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;c1&#34;&gt;; ディレクトリパスを取得する&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;extensions:default-directory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;;=&amp;gt;#P&amp;#34;カレントディレクトリ&amp;#34;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; ディレクトリパスを設定する&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;setf&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;extensions:default-directory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;l&#34;&gt;#P&amp;#34;設定したいディレクトリ&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;カレントディレクトリの設定後に &lt;code&gt;(truename &amp;quot;./&amp;quot;)&lt;/code&gt; が返す値が変化しているかは処理系により異なる。
また、処理系によっては &lt;code&gt;*default-pathname-defaults*&lt;/code&gt; に起動時のディレクトリが入っている。
CLISPだと &lt;code&gt;*default-pathname-defaults* ;=&amp;gt; #P&amp;quot;&amp;quot;&lt;/code&gt; のとおり空白だった。&lt;/p&gt;

&lt;p&gt;SBCLだと、 &lt;code&gt;*default-pathname-defaults*&lt;/code&gt; を書き換えないと&lt;code&gt;load&lt;/code&gt;関数で参照する先が変わらない。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Common Lisp リスト操作方法を学ぶ</title>
      <link>https://otaon.github.io/web/ja-jp/2019/03/07/common-lisp-%E3%83%AA%E3%82%B9%E3%83%88%E6%93%8D%E4%BD%9C%E6%96%B9%E6%B3%95%E3%82%92%E5%AD%A6%E3%81%B6/</link>
      <pubDate>Thu, 07 Mar 2019 00:00:00 +0900</pubDate>
      
      <guid>https://otaon.github.io/web/ja-jp/2019/03/07/common-lisp-%E3%83%AA%E3%82%B9%E3%83%88%E6%93%8D%E4%BD%9C%E6%96%B9%E6%B3%95%E3%82%92%E5%AD%A6%E3%81%B6/</guid>
      
        <description>

&lt;h1 id=&#34;目的&#34;&gt;目的&lt;/h1&gt;

&lt;p&gt;この記事では、リスト操作において基本的な関数の使い方について説明する。&lt;/p&gt;

&lt;h1 id=&#34;関数の説明&#34;&gt;関数の説明&lt;/h1&gt;

&lt;h2 id=&#34;member-関数&#34;&gt;&lt;code&gt;member&lt;/code&gt;関数&lt;/h2&gt;

&lt;p&gt;リスト中に、或る要素が含まれているか否かを調べる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;member&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
	&lt;span class=&#34;ss&#34;&gt;&amp;#39;one-is-in-the-list&lt;/span&gt;
	&lt;span class=&#34;ss&#34;&gt;&amp;#39;one-is-not-in-the-list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ONE-IS-IN-THE-LIST&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; memberの実際の返り値&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;member&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上記に示したように、memberの挙動は下記のとおりである。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;リストをcarして、&lt;/li&gt;
&lt;li&gt;その要素が目的oの値だったら、&lt;/li&gt;
&lt;li&gt;そのリストを返す。&lt;/li&gt;
&lt;li&gt;違ったら、cdrしたリストを対象にする。&lt;/li&gt;
&lt;li&gt;上記1-4を繰り返す。&lt;/li&gt;
&lt;li&gt;最後までみつからなかったらNILを返す。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;member&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; (3 4 (1 2) 4)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;member&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; NIL  ; シンボルでないと駄目らしい&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;find-if-関数&#34;&gt;&lt;code&gt;find-if&lt;/code&gt;関数&lt;/h2&gt;

&lt;p&gt;第2引数を&lt;code&gt;car&lt;/code&gt;した値を対象に、第1引数に指定した関数を使って評価し、
真を返した値を返す。
もしも全ての値が偽だった場合は&lt;code&gt;nil&lt;/code&gt;を返す。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;find-if&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;hoge&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; (foo bar)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;#&#39;oddp&lt;/code&gt;により、リストから奇数が見つかるまで順に操作して、
真を返す値を見つけたら、その値を返す。
さもなければ、空リストを返す。&lt;/p&gt;

&lt;p&gt;例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;find-if&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;null&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
	&lt;span class=&#34;ss&#34;&gt;&amp;#39;there-is-an-odd-number&lt;/span&gt;
	&lt;span class=&#34;ss&#34;&gt;&amp;#39;there-is-no-odd-number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; &amp;#39;THERE-IS-AN-ODD-NUMBER&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;注意:nilを探す場合には使えない。&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;find-if&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;null&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; NIL&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;assoc-関数&#34;&gt;&lt;code&gt;assoc&lt;/code&gt;関数&lt;/h2&gt;

&lt;p&gt;連想リスト(association list)から、指定したキーのリストを返す。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;assoc&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;key2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;key1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;list1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;key2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;list2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;key3&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;list3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; (KEY2 (LIST2))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;assoc&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;d&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; (A (1 2))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;mapcar-関数&#34;&gt;&lt;code&gt;mapcar&lt;/code&gt;関数&lt;/h2&gt;

&lt;p&gt;リストを第n引数(2 &amp;lt;= n &amp;lt;= N)に持ち、これの要素を1つずつ取り出して、第1引数の関数に対して適用する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;mapcar&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;list-for-arg-1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;list-for-arg-n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; `((func &amp;#39;(list-for-arg-1の第1要素) ... &amp;#39;(list-for-arg-nの第1要素))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;      (func &amp;#39;(list-for-arg-1の第2要素) ... &amp;#39;(list-for-arg-nの第2要素))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;      ...&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;      (func &amp;#39;(list-for-arg-1の第m要素) ...&amp;#39;(list-for-arg-nの第m要素)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;定義:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defuc&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;mapcar&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;mlist&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cond&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;null&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;mlist&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
          &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cons&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;funcall&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;mlist&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;mapcar&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cdr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;mlist&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; 上記のmapcarを実行した結果&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;mapcar&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; mapcarを定義にしたがって展開する&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cons&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;funcall&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;mapcar&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cdr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cons&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;funcall&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;mapcar&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cons&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;-1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;mapcar&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cons&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;-1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cons&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;funcall&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;mapcar&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cons&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;-1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cons&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;-2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;mapcar&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cons&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;-1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cons&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;-2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cons&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;funcall&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;mapcar&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cons&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;-1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cons&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;-2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cons&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;-3&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;mapcar&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cons&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;-1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cons&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;-2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cons&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;-3&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;-1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;-2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;-3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;-1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;-2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;-3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;append-関数&#34;&gt;&lt;code&gt;append&lt;/code&gt;関数&lt;/h2&gt;

&lt;p&gt;引数に会う複数のリストを、1つのリストに統合する。
(append = 〜を付け加える。)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;append&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;list1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;list2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;list3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; (LIST1 LIST2 LIST3) &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;append&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;many&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;had&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;little&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lamb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;MARY&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;HAD&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;LITTLE&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;LAMB&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;apply-関数&#34;&gt;&lt;code&gt;apply&lt;/code&gt;関数&lt;/h2&gt;

&lt;p&gt;引数にある、複数の要素を持つリスト（要素1つのリストでも良い）の各要素を、
引数にある関数の引数として渡す。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;apply&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;例1:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;apply&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;1+&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; 3&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;apply&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; 5&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;apply&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;append&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;mary&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;had&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;little&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lamb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; (MARY HAD A LITTLE LAMB)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;append-関数と-apply-関数の使用例&#34;&gt;&lt;code&gt;append&lt;/code&gt;関数と&lt;code&gt;apply&lt;/code&gt;関数の使用例&lt;/h2&gt;

&lt;p&gt;とあるゲーム(Land of Lispのアレ)を例に示す。&lt;/p&gt;

&lt;h3 id=&#34;ゲームの変数を定義する&#34;&gt;ゲームの変数を定義する。&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;とあるゲームにおいて、各々の場所について(つながっている他の場所 移動方向 移動方法)を定義&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defparameter&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*edges*&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;living-room&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;garden&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;west&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;door&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                                    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;attic&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;upstairs&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ladder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;garden&lt;/span&gt;      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;living-room&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;east&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;door&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;attic&lt;/span&gt;       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;living-room&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;downstairs&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ladders&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;とあるゲームにおいて、登場するオブジェクトを定義&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defparameter&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*objects*&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;whiskey&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;bucket&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;frog&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;chain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;とあるゲームにおいて、登場するオブジェクトが置いてある場所を定義&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defparameter&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*objects-locations*&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;whiskey&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;living-room&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                                    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;bucket&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;living-room&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                                    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;chain&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;garden&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                                    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;frog&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;garden&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;関数を定義する&#34;&gt;関数を定義する。&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;与えられたパスを表示する&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;describe-path&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;edge&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;there&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;caddr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;edge&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;going&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cadr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;edge&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;here.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; 使用例:&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;describe-path&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;garden&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;west&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;door&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; (THERE IS A DOOR GOING WEST FROM HERE.)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;指定した場所のパスを一覧表示する&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;describe-paths&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;location&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;edges&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;apply&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;append&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;mapcar&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;describe-path&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cdr&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;assoc&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;location&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;edges&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; 使用例:&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;describe-paths&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;living-room&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*edges*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; (THERE IS A DOOR GOING WEST FROM HERE. \&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;     THERE IS A LADDER GOING UPSTAIRS FROM HERE.)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;指定した場所にあるオブジェクトを一覧表示する&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;objects-at&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;loc&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;objs&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;obj-locs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;labels&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;at-loc-p&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
             &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;eq&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cadr&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;assoc&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;obj&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;obj-locs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;loc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
             &lt;span class=&#34;c1&#34;&gt;; remove-if-not : predicate が偽となる要素を取り除く&lt;/span&gt;
             &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;remove-if-not&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;at-loc-p&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;objs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; 使用例:&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;objects-at&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;living-room&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*objects*&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*objects-locations*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; (objects-at *objects* *objects-locations*)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; (remove-if-not #&amp;#39;at-loc-p *objects*)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; 下記の評価を*objects*リストの全要素について行い、&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;    真になったものをリストから消す。&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;    (eq (cadr (assoc obj obj-locs)) &amp;#39;living-room)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;                     │   └ &amp;#39;((whiskey living-room) &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;                     │       (bucket living-room) &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;                     │       (chain garden) &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;                     │       (frog garden))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;                     └ &amp;#39;whiskey&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;    =&amp;gt; T&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;    (eq (cadr (assoc obj obj-locs)) &amp;#39;living-room)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;                     │   └ &amp;#39;((whiskey living-room) &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;                     │       (bucket living-room) &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;                     │       (chain garden) &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;                     │       (frog garden))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;                     └ &amp;#39;bucket&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;    =&amp;gt; T&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;    (eq (cadr (assoc obj obj-locs)) &amp;#39;living-room)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;                     │   └ &amp;#39;((whiskey living-room) &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;                     │       (bucket living-room) &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;                     │       (chain garden) &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;                     │       (frog garden))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;                     └ &amp;#39;frog&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;    =&amp;gt; F&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;    (eq (cadr (assoc obj obj-locs)) &amp;#39;living-room)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;                     │   └ &amp;#39;((whiskey living-room) &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;                     │       (bucket living-room) &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;                     │       (chain garden) &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;                     │       (frog garden))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;                     └ &amp;#39;chain&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;    =&amp;gt; F&lt;/span&gt;
 
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; (WHISKEY BUCKET)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;全てのオブジェクトを一覧表示する&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;describe-objects&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;loc&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;objs&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;obj-loc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;labels&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;describe-obj&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
              &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;you&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;see&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;obj&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;on&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;the&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;floor.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;apply&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;append&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;mapcar&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;describe-obj&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;objects-at&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;loc&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;objs&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;obj-loc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; 使用例:&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;describe-objects&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;living-room&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*objects*&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*objects-locations*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; (apply #&amp;#39;append (mapcar #&amp;#39;describe-obj (objects-at living-room *objects* *objects-locations*)))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; (apply #&amp;#39;append (mapcar #&amp;#39;describe-obj &amp;#39;(WHISKEY BUCKET)))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; (apply #&amp;#39;append &amp;#39;((YOU SEE A WHISKEY ON THE FLOOR.) &amp;#39;(YOU SEE A BUCKET ON THE FLOOR.)))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; (append &amp;#39;(YOU SEE A WHISKEY ON THE FLOOR.) &amp;#39;(YOU SEE A BUCKET ON THE FLOOR.))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; (YOU SEE A WHISKEY ON THE FLOOR. YOU SEE A BUCKET ON THE FLOOR.)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;find-関数&#34;&gt;&lt;code&gt;find&lt;/code&gt;関数&lt;/h2&gt;

&lt;p&gt;リストから引数の要素を探す。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;find&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;keyword&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;object&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:key&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; &amp;#39;objectの各要素に対してfuncを適用した値がkeywordと等しいとき、その要素を返す。&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;find&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:key&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cadr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; (3 Y)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;push-関数&#34;&gt;&lt;code&gt;push&lt;/code&gt;関数&lt;/h2&gt;

&lt;p&gt;引数をリストの先頭に追加する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;push&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; (val list)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下記の2つの処理は同等。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;push&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*foo*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;setf&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*foo*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cons&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*foo*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defparameter&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*foo*&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;push&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*foo*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; (7 1 2 3)&lt;/span&gt;
&lt;span class=&#34;vg&#34;&gt;*foo*&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; (7 1 2 3)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;assoc-関数と-push-関数を使った-alist-association-list-の値変更&#34;&gt;&lt;code&gt;assoc&lt;/code&gt;関数と&lt;code&gt;push&lt;/code&gt;関数を使った、alist(association list)の値変更&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;assoc&lt;/code&gt;関数は、先頭から探索して、最初に見つかった要素を返したら残りは無視する。
従って、&lt;code&gt;assoc&lt;/code&gt;と&lt;code&gt;push&lt;/code&gt;を使用すると、alistの値を、さも変更したかのように見せられる。&lt;/p&gt;

&lt;p&gt;例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defparameter&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*foo*&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;whiskey&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;living-room&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; 
                      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;bucket&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;living-room&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; 
                      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;chain&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;garden&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; 
                      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;frog&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;garden&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;assoc&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;whiskey&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*foo*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; (WHISKEY LIVING-ROOM)&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;push&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;whiskey&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*foo*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;assoc&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;whiskey&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*foo*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; (WHISKEY VOID)&lt;/span&gt;

&lt;span class=&#34;vg&#34;&gt;*foo*&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; ((WHISKEY VOID) &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;     (WHISKEY LIVING-ROOM) &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;     (BUCKET LIVING-ROOM) &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;     (CHAIN GARDEN) &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;     (FROG GARDEN))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>Common Lisp 基本構文を学ぶ</title>
      <link>https://otaon.github.io/web/ja-jp/2019/03/07/common-lisp-%E5%9F%BA%E6%9C%AC%E6%A7%8B%E6%96%87%E3%82%92%E5%AD%A6%E3%81%B6/</link>
      <pubDate>Thu, 07 Mar 2019 00:00:00 +0900</pubDate>
      
      <guid>https://otaon.github.io/web/ja-jp/2019/03/07/common-lisp-%E5%9F%BA%E6%9C%AC%E6%A7%8B%E6%96%87%E3%82%92%E5%AD%A6%E3%81%B6/</guid>
      
        <description>

&lt;h1 id=&#34;本記事の構成&#34;&gt;本記事の構成&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;001_Common-Lisp-基本構文説明.md&lt;/li&gt;
&lt;li&gt;002_Common-Lisp-リスト操作説明.md&lt;/li&gt;
&lt;li&gt;003_Lisp処理系起動時のディレクトリパス-カレントディレクトリパスを取得-設定する.md&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;目的&#34;&gt;目的&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Common Lisp の基本的なシンタックスをすぐに確認するため。&lt;/li&gt;
&lt;li&gt;自分用の備忘録。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;前提条件&#34;&gt;前提条件&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Common Lisp および Lisp が、括弧だらけのプログラミング言語だと知っていること。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Common Lisp の実行環境を持っていること。(CLisp、Steel Bank Common Lisp など)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;lisp-listprocessor-list構造を理解しよう&#34;&gt;Lisp = ListProcessor (List構造を理解しよう)&lt;/h1&gt;

&lt;h2 id=&#34;lispとast&#34;&gt;LispとAST&lt;/h2&gt;

&lt;p&gt;LispはAST(抽象構文木)を直接記述するかの如くプログラミングする言語である。
換言すれば、ソースコードが殆どASTと等価であると見做せる。
また、Lispは、そのインタプリタによって、逐次的にソースコードを読み込み、評価し、表示する。
そして、この手順を繰り返してソースコード全体を処理する。
この仕組みを、REPL(Read–Eval–Print Loop)という。&lt;/p&gt;

&lt;h2 id=&#34;コンスセル&#34;&gt;コンスセル&lt;/h2&gt;

&lt;p&gt;上記のとおり、Lispのソースコードは殆どASTであるから、データ構造も命令と同様の表現を取る。
即ち、全ての表現を同様に記述できる。
これを実現するために、Lispでは「コンスセル」という概念を導入している。
これは、単純化すれば、2つの値を代入できる&lt;strong&gt;箱&lt;/strong&gt;である。
視覚化するならば、&lt;code&gt;[a|b]&lt;/code&gt;のようになる。このaおよびbに、値が入る。
ここで、値とは、シンボルへの参照と、コンスセルへの参照を意味する。
即ち、Lispでは、ソースコードのアトムとしてシンボルがあり、それらが構造を成す際にコンスセルを用いているといえる。&lt;/p&gt;

&lt;h2 id=&#34;リスト表現の例&#34;&gt;リスト表現の例&lt;/h2&gt;

&lt;p&gt;下記に、Lispに於けるリスト表現を樹形図として表す。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&#39;(A)
*--nil
|
A

&#39;((A B) (C D))
*----------*-----nil
|          |
*--*--nil  *--*--nil
|  |       |  |
A  B       C  D
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;リストの記述方法&#34;&gt;リストの記述方法&lt;/h1&gt;

&lt;p&gt;リストは&lt;code&gt;(list hoge foo bar)&lt;/code&gt;の様に記述する。
またはquote(&lt;code&gt;&#39;&lt;/code&gt;)を使って、&lt;code&gt;&#39;(hoge foo bar)&lt;/code&gt;の様に記述する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; (A B C)&lt;/span&gt;

&lt;span class=&#34;o&#34;&gt;```&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cl&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;describe-path&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;edge&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
 &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;there&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;caddr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;edge&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;going&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cadr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;edge&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;here.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;describe-path&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;garden&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;west&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;door&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; (THERE IS A DOOR GOING WEST FROM HERE.)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;コンスセル-リストの操作方法&#34;&gt;コンスセル・リストの操作方法&lt;/h1&gt;

&lt;p&gt;下記に、コンスセル、および、リストの操作方法を示す。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cons&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;x&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; (x . y)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cons&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;x&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; (X)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cons&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;x&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; (X)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; 先頭のスロットのデータを取り出す&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; A&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; 2番めのスロットのデータを取り出す&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cdr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; (b c d)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; car cdr を同時に行う関数&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cadr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cdr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; &amp;#39;B&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;キーワードシンボル&#34;&gt;キーワードシンボル&lt;/h1&gt;

&lt;p&gt;コロンを先頭に付けたシンボルの使い方の1つ。
シンボルが、そのシンボルそのままの名前を評価値に持つ。
用途は以下がある。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;普通の変数により、値を持たせる&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cigar&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
   &lt;span class=&#34;nv&#34;&gt;cigar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; 5&lt;/span&gt;

&lt;span class=&#34;ss&#34;&gt;:cigar&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; CIGAR&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;定数として使う&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;定数として使うと、Lispが処理をより効率的に最適化してくれる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:cigar&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
   &lt;span class=&#34;ss&#34;&gt;:cigar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; LET :CIGAR is constant ...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;変数&#34;&gt;変数&lt;/h1&gt;

&lt;p&gt;Lispに於ける変数は、他の言語と同様に、グローバル変数とローカル変数が存在する。&lt;/p&gt;

&lt;h3 id=&#34;グローバル変数&#34;&gt;グローバル変数&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;上書き&lt;/th&gt;
&lt;th&gt;定義&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;する&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(defparameter *global-value* num)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;しない&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(defvar *global-value* num)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;ローカル変数&#34;&gt;ローカル変数&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;variable-name1&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;value1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;variable-name2&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;value2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;関数&#34;&gt;関数&lt;/h2&gt;

&lt;p&gt;Lispに於ける関数は、グローバル関数とローカル関数が存在する。&lt;/p&gt;

&lt;h3 id=&#34;グローバル関数&#34;&gt;グローバル関数&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;function-name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;arguments&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;例&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;function-name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;arguments&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;ash&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*small*&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*big*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; (ash x n) := xを2進nビット左にずらす&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;ローカル関数&#34;&gt;ローカル関数&lt;/h3&gt;

&lt;h4 id=&#34;基本的な定義方法&#34;&gt;基本的な定義方法&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;flet&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;function-name1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;arguments&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;function-name2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;arguments&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
      &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;flet&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;function-name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;arguments&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;ash&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*small*&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*big*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; (ash x n) := xを2進nビット左にずらす&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;ローカル関数定義中-同じスコープで定義されるローカル関数を使う場合&#34;&gt;ローカル関数定義中、同じスコープで定義されるローカル関数を使う場合&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;labels&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;function-name1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;arguments&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
       &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;function-name2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;arguments&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;function-name1&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*arguments*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
     &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;labels&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
         &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; 21&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;関数をパラメータとして渡す&#34;&gt;関数をパラメータとして渡す&lt;/h2&gt;

&lt;h3 id=&#34;functionパラメータ&#34;&gt;functionパラメータ&lt;/h3&gt;

&lt;p&gt;下記の表記を使うことで、関数をパラメータとして渡すことができる。
これを使って、&lt;code&gt;mapcar&lt;/code&gt;関数などに使用できる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;; (方法1)&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;関数名&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; (方法2)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;関数名&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;無名関数-lambda&#34;&gt;無名関数(&lt;code&gt;Lambda&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;一連の処理を纏める。
関数名を定義するまでもない場合に有効。&lt;/p&gt;

&lt;p&gt;構文:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;procedure&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; &amp;lt;FUNCTION :LAMBDA...&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;; 下記のように通常どおり処理を纏めると関数名が必要となる。&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;half&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; &amp;lt;FUNCTION :HALF...&amp;gt;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; 下記のように書けば関数名は不要となる。&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;mapcar&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; (1 2 3)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;返り値が複数ある関数&#34;&gt;返り値が複数ある関数&lt;/h2&gt;

&lt;p&gt;Lispでは、返り値を複数持つ関数が存在する。例えば&lt;code&gt;read-line&lt;/code&gt;がそれにあたる。
通常は1つ目の返り値しか使われない。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;read-line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; abc&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; &amp;#34;abc&amp;#34;;&lt;/span&gt;
     &lt;span class=&#34;nv&#34;&gt;NIL&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;複数の返り値を持つ関数の作成方法&#34;&gt;複数の返り値を持つ関数の作成方法&lt;/h3&gt;

&lt;p&gt;下記のように&lt;code&gt;values&lt;/code&gt;を用いる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;values&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; 3;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;    7&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;複数の返り値を受け取る方法&#34;&gt;複数の返り値を受け取る方法&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;multiple-value-bind&lt;/code&gt;を用いる。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;multiple-value-bind&lt;/code&gt;の構文:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;multiple-value-bind&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;binding-vals&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;func-call&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;dl&gt;
&lt;dt&gt;&#39;(binding-vals)&lt;/dt&gt;
&lt;dd&gt;(func-call)の返り値を束縛するための変数のリスト。&lt;/dd&gt;
&lt;dt&gt;(func-call)&lt;/dt&gt;
&lt;dd&gt;複数の返り値を持つ関数の呼び出し。&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;values&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;multiple-value-bind&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; ( 3 7)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; fooの返り値を、aとbに束縛している。&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;制御構文&#34;&gt;制御構文&lt;/h1&gt;

&lt;h2 id=&#34;条件分岐&#34;&gt;条件分岐&lt;/h2&gt;

&lt;h3 id=&#34;if&#34;&gt;&lt;code&gt;if&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;審議を返すリスト&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;真の時に実行するリスト&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;偽の時に実行するリスト&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;ss&#34;&gt;&amp;#39;yup&lt;/span&gt;
  &lt;span class=&#34;ss&#34;&gt;&amp;#39;nop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; YUP&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;when&#34;&gt;&lt;code&gt;when&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;条件式&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;処理1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;処理2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;処理n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;oddp&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;setf&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*number-is-odd*&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;ss&#34;&gt;&amp;#39;odd-number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; ODD-NUMBER&lt;/span&gt;
&lt;span class=&#34;vg&#34;&gt;*number-is-odd*&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; T&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;unless&#34;&gt;&lt;code&gt;unless&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;unless&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;条件式&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;処理1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;処理2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;処理n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;unless&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;oddp&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;setf&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*number-is-odd*&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;ss&#34;&gt;&amp;#39;even-number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; EVEN-NUMBER&lt;/span&gt;
&lt;span class=&#34;vg&#34;&gt;*number-is-odd*&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; nil&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;progn&#34;&gt;&lt;code&gt;progn&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;上記に示した&lt;code&gt;if&lt;/code&gt;などの制御構文では、実行処理するリストが1つのみ持てる構造となっている。
しかし、一般的には複数の処理を行いたいことが多い。
prognは、中のリストを順繰りに評価して、最後の評価値をprognフォームの値として持つ。&lt;/p&gt;

&lt;p&gt;例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;oddp&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;progn&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;setf&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*number-was-odd*&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;ss&#34;&gt;&amp;#39;odd-number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;ss&#34;&gt;&amp;#39;even-number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; ODD-NUMBER&lt;/span&gt;
&lt;span class=&#34;vg&#34;&gt;*number-was-odd*&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; T&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;case&#34;&gt;&lt;code&gt;case&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;condは、C言語の&lt;code&gt;switch-case&lt;/code&gt;文のようなものである。
つまり、複数のシンボルに対するテストを行う。
caseのシンボルと、それぞれのシンボルをeqlを使って評価する。
もし偽と評価されれば、otherwiseに分岐される。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;シンボル&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;分岐のシンボル&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;処理1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;処理2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                  &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
                  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;処理n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;分岐のシンボル&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;処理1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;処理2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                  &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
                  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;処理n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;otherwise&lt;/span&gt;      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;処理1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;処理2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                  &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
                  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;処理n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;cond&#34;&gt;&lt;code&gt;cond&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;condは、caseと同じく、C言語の&lt;code&gt;switch-case&lt;/code&gt;文のようなものである。
&lt;strong&gt;ただし、C言語の&lt;code&gt;switch-case&lt;/code&gt;文とは異なり、シンボルではなく条件式を列挙する。&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cond&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;条件式1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;処理1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;処理2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;処理n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;条件式2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;処理1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;処理2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;処理n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;処理1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;処理2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;処理n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 条件式nが全て偽だった時、tが実行される。&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;ループ処理&#34;&gt;ループ処理&lt;/h2&gt;

&lt;h3 id=&#34;loop&#34;&gt;&lt;code&gt;loop&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;loopは、第1引数の値によって、異なるループ方法を指定できる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;repeat&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;
   &lt;span class=&#34;nv&#34;&gt;collect&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; (1 1 1 1 1 1 1 1 1 1)&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;
   &lt;span class=&#34;nv&#34;&gt;collect&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; (1 2 3 4 5 6 7 8 9 10)&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;
   &lt;span class=&#34;nv&#34;&gt;collect&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; (101 102 103 104 105 106 107 108 109 110)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;論理演算&#34;&gt;論理演算&lt;/h2&gt;

&lt;p&gt;C言語の&lt;code&gt;||&lt;/code&gt;や&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;のように、制御構文の条件式に使用できる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;oddp&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;setf&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*it-is-even*&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; T&lt;/span&gt;
&lt;span class=&#34;vg&#34;&gt;*it-is-even*&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; T&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;短絡評価:
下記のように、lispは短絡評価する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;oddp&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;setf&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*it-is-even*&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; T&lt;/span&gt;
&lt;span class=&#34;vg&#34;&gt;*it-is-even*&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; NIL&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;シンボル-リストを比較-検査する&#34;&gt;シンボル・リストを比較、検査する&lt;/h1&gt;

&lt;p&gt;ここでは、シンボル、または、リストの値が他のリストの値と等しいか、また、リストの中に目当ての値が入っているかなどを調べるための方法を示す。&lt;/p&gt;

&lt;h2 id=&#34;eq-equal-eql-equalp-string-equal-char-equal-関数&#34;&gt;&lt;code&gt;eq&lt;/code&gt;,&lt;code&gt;equal&lt;/code&gt;,&lt;code&gt;eql&lt;/code&gt;,&lt;code&gt;equalp&lt;/code&gt;,&lt;code&gt;=&lt;/code&gt;,&lt;code&gt;string-equal&lt;/code&gt;,&lt;code&gt;char-equal&lt;/code&gt;関数&lt;/h2&gt;

&lt;p&gt;シンボルやリストが等しいか否かを調べる関数。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;関数名&lt;/th&gt;
&lt;th&gt;比較方法&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;eq&lt;/td&gt;
&lt;td&gt;シンボル同士はeqで比較する&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;equal&lt;/td&gt;
&lt;td&gt;シンボル同士では無い場合はequalで比較する&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;eql&lt;/td&gt;
&lt;td&gt;eqと似ているが、更に数値と文字を比較できる&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;equalp&lt;/td&gt;
&lt;td&gt;equalと似ているが、少し緩い評価をする&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;=&lt;/td&gt;
&lt;td&gt;数値用のequal&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;string-equal&lt;/td&gt;
&lt;td&gt;文字列用のequal&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;char-equal&lt;/td&gt;
&lt;td&gt;文字用のequal&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defparameter&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*fruit*&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;apple&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*FRUIT*&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cond&lt;/span&gt;	&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;eq&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*fruit*&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;apple&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;its-an-apple&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;eq&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*fruit*&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;orange&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;its-an-orange&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;equal&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;apple&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;apple&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;T&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;equal&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;apple&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;apple&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;T&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;equal&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;T&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;equal&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cons&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cons&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cons&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cons&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;T&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;; 中身が同じなら同一とみなす&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;equal&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;T&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;; 整数同士&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;equal&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;2.5&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;2.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;T&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;; 浮動小数点同士&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;equal&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;T&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;; 文字列同士&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;equal&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;#\a&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;#\a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;T&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;; 文字同士&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;eql&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;foo&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;T&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;; シンボル同士&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;eql&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;3.4&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;3.4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;T&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;; 数値同士&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;eql&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;#\a&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;#\a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;T&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;; 文字列同士&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;; equalpの使い方&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;equalp&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Bob Smith&amp;#34;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;bob smith&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;T&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;; 大文字、小文字を無視した文字列同士&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;equalp&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;T&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;; 整数と浮動小数点数&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;coerce-関数&#34;&gt;&lt;code&gt;coerce&lt;/code&gt;関数&lt;/h2&gt;

&lt;p&gt;オブジェクトを指定した形式へ強制変換する。
(coerce : 〜を無理にdoさせる。)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coerce&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;vector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; =&amp;gt; #(A B C)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coerce&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;a&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;character&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; =&amp;gt; #\A&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coerce&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;4.56&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;complex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; =&amp;gt; #C(4.56 0.0)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coerce&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;4.5s0&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;complex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; =&amp;gt; #C(4.5s0 0.0s0)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coerce&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;7/2&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;complex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; =&amp;gt; 7/2&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coerce&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;short-float&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; =&amp;gt; 3.5L0&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coerce&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;3.5L0&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;float&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; =&amp;gt; 3.5L0&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coerce&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cons&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; =&amp;gt; (1 . 2)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; NOTE: タイプtは、全てのオブジェクトのタイプの集合。&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;       従って、この場合は、引数をそのまま返す。&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;complement-関数&#34;&gt;&lt;code&gt;complement&lt;/code&gt;関数&lt;/h2&gt;

&lt;p&gt;補集合。(高階関数)&lt;/p&gt;

&lt;p&gt;例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;complement&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;alphanumericp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; アルファベットでも数字でもない&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>Common Lisp 文字列操作方法を学ぶ</title>
      <link>https://otaon.github.io/web/ja-jp/2019/03/07/common-lisp-%E6%96%87%E5%AD%97%E5%88%97%E6%93%8D%E4%BD%9C%E6%96%B9%E6%B3%95%E3%82%92%E5%AD%A6%E3%81%B6/</link>
      <pubDate>Thu, 07 Mar 2019 00:00:00 +0900</pubDate>
      
      <guid>https://otaon.github.io/web/ja-jp/2019/03/07/common-lisp-%E6%96%87%E5%AD%97%E5%88%97%E6%93%8D%E4%BD%9C%E6%96%B9%E6%B3%95%E3%82%92%E5%AD%A6%E3%81%B6/</guid>
      
        <description>

&lt;h1 id=&#34;本記事の目的&#34;&gt;本記事の目的&lt;/h1&gt;

&lt;p&gt;この記事では、文字列表示、および、文字列操作において基本的な関数の使い方について説明する。&lt;/p&gt;

&lt;h1 id=&#34;文字列出力用の関数&#34;&gt;文字列出力用の関数&lt;/h1&gt;

&lt;h2 id=&#34;print-関数&#34;&gt;&lt;code&gt;print&lt;/code&gt;関数&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;print&lt;/code&gt;関数は下記の順で文字を表示する。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;現在の表示位置が行頭でない場合、改行する&lt;/li&gt;
&lt;li&gt;引数を表示する&lt;/li&gt;
&lt;li&gt;空白を表示する&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;progn&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;this&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;is&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; &amp;#34;this&amp;#34;_&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;    &amp;#34;is&amp;#34;_&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;    &amp;#34;a&amp;#34;_&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;    &amp;#34;test&amp;#34;_&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; (_ = 空白)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;prin1-関数&#34;&gt;&lt;code&gt;prin1&lt;/code&gt;関数&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;prin1&lt;/code&gt;関数は下記の順で文字を表示する。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;引数を表示する&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;progn&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;prin1&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;this&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;prin1&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;is&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;prin1&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;prin1&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; &amp;#34;this&amp;#34;&amp;#34;is&amp;#34;&amp;#34;a&amp;#34;&amp;#34;test&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;princ-関数&#34;&gt;&lt;code&gt;princ&lt;/code&gt;関数&lt;/h2&gt;

&lt;p&gt;人間が見やすい形式で文字を表示する。&lt;/p&gt;

&lt;p&gt;例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;princ&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; =&amp;gt; 3&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; =&amp;gt; 3&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;princ&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;3.4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; =&amp;gt; 3.4&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;3.4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; =&amp;gt; 3.4&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;princ&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; =&amp;gt; FOO&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; =&amp;gt; FOO&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;princ&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; =&amp;gt; foo&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; =&amp;gt; &amp;#34;foo&amp;#34;&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;princ&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;#\a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; =&amp;gt; a&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;#\a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; =&amp;gt; #\a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;newline&#34;&gt;&lt;code&gt;#\newline&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;#\newline&lt;/code&gt;を用いることで、文字列中に改行を入れられる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;progn&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;princ&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;This sentence will be interrupted&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;princ&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;#\newline&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;princ&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;by an annoying newline character.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; This sentence will be interrupted&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;    by an annoying newline character.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;prin1-to-string-関数&#34;&gt;&lt;code&gt;prin1-to-string&lt;/code&gt;関数&lt;/h2&gt;

&lt;p&gt;シンボルを含むリストを文字列に変換する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;print1-to-string&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; &amp;#34;(A B C D)&amp;#34;&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cons&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;foo&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;prin1-to-string&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; (FOO &amp;#34;(A B C D)&amp;#34;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;princ-to-string-関数&#34;&gt;&lt;code&gt;princ-to-string&lt;/code&gt;関数&lt;/h2&gt;

&lt;p&gt;上記の&lt;code&gt;prin1-to-string&lt;/code&gt;関数の出力を、人間が読みやすい形式にしたもの。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;princ-to-string&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; &amp;#34;(A B C D)&amp;#34;&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;princ-to-string&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; &amp;#34;(A B c D)&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;write-to-string-関数&#34;&gt;&lt;code&gt;write-to-string&lt;/code&gt;関数&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;prin1-to-string&lt;/code&gt;関数や&lt;code&gt;printc-to-string&lt;/code&gt;関数の一般形。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;write-to-string&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;object&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:escape&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;print1-to-string&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; escape文字が出力される&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; 例&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;write-to-string&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;abc&amp;#34;&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:escape&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; &amp;#34;\&amp;#34;abc\&amp;#34;&amp;#34;&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;write-to-string&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;object&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:escape&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:readably&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; escape文字が出力されない&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;princ-to-string&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; 例&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;write-to-string&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;abc&amp;#34;&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:escape&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:readably&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; &amp;#34;abc&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;文字入力用の関数&#34;&gt;文字入力用の関数&lt;/h1&gt;

&lt;h2 id=&#34;read-関数&#34;&gt;&lt;code&gt;read&lt;/code&gt;関数&lt;/h2&gt;

&lt;p&gt;標準入力から得たものを返す。文字列からS式になる。&lt;/p&gt;

&lt;p&gt;構文:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;read&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;&amp;amp;optional&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;input-stream&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;eof-error-p&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;eof-value&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;recursive-p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; =&amp;gt; Object&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;dl&gt;
&lt;dt&gt;&amp;optional&lt;/dt&gt;
&lt;dd&gt;ここから右の引数は任意。&lt;/dd&gt;

&lt;dt&gt;input-stream&lt;/dt&gt;
&lt;dd&gt;ストリーム指定。&lt;br&gt;
    デフォルト : 標準入力&lt;/dd&gt;

&lt;dt&gt;eof-error-p&lt;/dt&gt;
&lt;dd&gt;eof検出時の処理指定。&lt;br&gt;
    t   : デフォルト。エラーを吐く。&lt;br&gt;
    nil : エラーを吐かない。&lt;/dd&gt;

&lt;dt&gt;eof-value&lt;/dt&gt;
&lt;dd&gt;eof検出時の返り値指定。&lt;br&gt;
    デフォルト : nil&lt;/dd&gt;

&lt;dt&gt;recursive-p&lt;/dt&gt;
&lt;dd&gt;これがnil以外の場合、readを再帰呼び出しする。&lt;br&gt;
    デフォルト : nil&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; a&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; A&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; &amp;#39;a&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; &amp;#39;A&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; (a)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; (A)&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; &amp;#34;a&amp;#34;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; &amp;#34;A&amp;#34;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; readの挙動について細かく見るための例を以下に示す。&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;setq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;line 1
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   line2&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 1の後ろに改行文字があることに注意&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; &amp;#34;line 1&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;    line2&amp;#34;&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;read&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;setq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;input-stream&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;make-string-input-stream&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; LINE&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;read&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;input-stream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; 1&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;read&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;input-stream&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; LINE2&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;read&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;input-stream&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; NIL&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;read-line-関数&#34;&gt;&lt;code&gt;read-line&lt;/code&gt;関数&lt;/h2&gt;

&lt;p&gt;入力から1行ずつ得たものを文字列として返す。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; newlineからeofまで見る。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt;
&lt;code&gt;read-line&lt;/code&gt;関数は、実行するたびに新規に文字列を生成する。
したがって、大量の行を読み込むとガベージコレクションの実行時間が長くなりすぎる。
&lt;code&gt;read-sequence&lt;/code&gt;を使用する方が実用的である。
しかし、&lt;code&gt;read-sequence&lt;/code&gt;は使用が面倒である。&lt;/p&gt;

&lt;p&gt;構文:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;read-line&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;&amp;amp;optional&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;input-steam&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;eof-error-p&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;eof-value&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;recursive-p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; =&amp;gt; line, missing-newline-p&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;dl&gt;
&lt;dt&gt;&amp;optional&lt;/dt&gt;
&lt;dd&gt;ここから右の引数は任意。&lt;/dd&gt;

&lt;dt&gt;input-stream&lt;/dt&gt;
&lt;dd&gt;ストリーム指定。&lt;br&gt;
    デフォルト : 標準入力&lt;/dd&gt;

&lt;dt&gt;eof-error-p&lt;/dt&gt;
&lt;dd&gt;eof検出時の処理指定。&lt;br&gt;
    t   : デフォルト。エラーを吐く。&lt;br&gt;
    nil : エラーを吐かない。&lt;/dd&gt;

&lt;dt&gt;eof-value&lt;/dt&gt;
&lt;dd&gt;eof検出時の返り値指定。&lt;br&gt;
    デフォルト : nil&lt;/dd&gt;

&lt;dt&gt;recursive-p&lt;/dt&gt;
&lt;dd&gt;これがnil以外の場合、readを再帰呼び出しする。&lt;br&gt;
    デフォルト : nil&lt;/dd&gt;

&lt;dt&gt;返り値2: missing-newline-p&lt;/dt&gt;
&lt;dd&gt;次の行があるか否かを表す。&lt;br&gt;
    read-line実行時にnewlineで終わっていたらnilを返す。&lt;br&gt;
    eofで終わっているか、第1引数がeof検出時の返り値ならtを返す。&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;&lt;strong&gt;例:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;read-line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; abc&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; &amp;#34;abc&amp;#34;;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;    NIL&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;read-line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; &amp;#34;abc&amp;#34;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; &amp;#34;\&amp;#34;abc\&amp;#34;&amp;#34;;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;    NIL&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;setq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;line 1
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   line2&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 1の後ろに改行文字があることに注意&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; &amp;#34;line 1&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;    line2&amp;#34;&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;read-line&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;setq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;input-stream&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;make-string-input-stream&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; &amp;#34;line 1&amp;#34;;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;    NIL&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;read-line&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;input-stream&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; &amp;#34;line2&amp;#34;;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;    T&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;read-line&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;input-stream&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; NIL;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;    T&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;read-from-string-関数&#34;&gt;&lt;code&gt;read-from-string&lt;/code&gt;関数&lt;/h2&gt;

&lt;p&gt;文字列から、それを入力とみなして返す。&lt;/p&gt;

&lt;p&gt;構文:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;read-from-string&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;string&lt;/span&gt; 
                  &lt;span class=&#34;nv&#34;&gt;&amp;amp;optional&lt;/span&gt; 
                  &lt;span class=&#34;nv&#34;&gt;eof-error-p&lt;/span&gt; 
                  &lt;span class=&#34;nv&#34;&gt;eof-value&lt;/span&gt; 
                  &lt;span class=&#34;nv&#34;&gt;&amp;amp;key&lt;/span&gt; 
                  &lt;span class=&#34;nv&#34;&gt;start&lt;/span&gt; 
                  &lt;span class=&#34;nv&#34;&gt;end&lt;/span&gt; 
                  &lt;span class=&#34;nv&#34;&gt;preserve-whitespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; Objects, position&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;dl&gt;
&lt;dt&gt;eof-error-p&lt;/dt&gt;
&lt;dd&gt;eof検出時の処理指定。&lt;br&gt;
    t   : デフォルト。エラーを吐く。&lt;br&gt;
    nil : エラーを吐かない。&lt;/dd&gt;
&lt;dt&gt;eof-value&lt;/dt&gt;
&lt;dd&gt;eof検出時の返り値指定。&lt;br&gt;
    デフォルト : nil&lt;/dd&gt;
&lt;dt&gt;start end&lt;/dt&gt;
&lt;dd&gt;文字列の左端と右端を指定する。&lt;br&gt;
    デフォルト : start = 0, end = nil&lt;/dd&gt;
&lt;dt&gt;preserve-whitespace&lt;/dt&gt;
&lt;dd&gt;whitespaceを保持するか否かを指定する。&lt;br&gt;
    t   : 保持する。&lt;br&gt;
    nil : デフォルト。保持しない。&lt;/dd&gt;
&lt;dt&gt;返り値 position&lt;/dt&gt;
&lt;dd&gt;読まれなかった文字列の最初の箇所を指す。&lt;br&gt;
もし全体が読み込まれた場合、positionは文字数か、文字数 + 1を示す。&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;setq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;(a b c d)&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; FOO&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;read-from-string&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; (A B C D);&lt;/span&gt;
     &lt;span class=&#34;nv&#34;&gt;9&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;文字列編集用の関数&#34;&gt;文字列編集用の関数&lt;/h1&gt;

&lt;h2 id=&#34;string-trim-関数&#34;&gt;&lt;code&gt;string-trim&lt;/code&gt;関数&lt;/h2&gt;

&lt;p&gt;第1引数の文字を、第2引数の文字列の両端から除く。
第1引数の文字は1つずつ独立して評価される。
つまり、第1引数に&amp;rdquo;abc&amp;rdquo;が指定されている場合、
両端から「a」「b」「c」の文字のいずれにもマッチしない文字が現れるまで文字を取り除き続ける。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;string-trim&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;abc&amp;#34;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;abcaakaaaabckabcbaaa&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; &amp;#34;abcaakaaaabckabcbaaa&amp;#34;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;  ~~~~~kaaaabck~~~~~~~ (~の部分が除かれる)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; kaaaabck&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;string-trim&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;#\Space&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;#\e&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;#\t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34; trim me &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; &amp;#34;rim m&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; スペース、タブ、改行を削除対象に指定したい場合は下記のようにする。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;; 下記のリストを指定する。&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;string-trim&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;#\Space&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;#\newline&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;#\tab&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;#\IDEOGRAPHIC_SPACE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;string-left-trim-関数&#34;&gt;&lt;code&gt;string-left-trim&lt;/code&gt;関数&lt;/h2&gt;

&lt;p&gt;第1引数の文字を、第2引数の文字列の左端から除く。&lt;/p&gt;

&lt;h2 id=&#34;string-right-trim-関数&#34;&gt;&lt;code&gt;string-right-trim&lt;/code&gt;関数&lt;/h2&gt;

&lt;p&gt;第1引数の文字を、第2引数の文字列の右端から除く。&lt;/p&gt;

&lt;h2 id=&#34;concatenate-関数&#34;&gt;&lt;code&gt;concatenate&lt;/code&gt;関数&lt;/h2&gt;

&lt;p&gt;文字列やリストを結合する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;concatenate&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;string&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Hello &amp;#34;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;world.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; &amp;#34;Hello World.&amp;#34;&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;concatenate&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;list&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; (A B C D E F)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; ただし、リストの場合は&lt;code&gt;append&lt;/code&gt;を用いれば良い。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;append&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; (A B C D)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;substitute-if-関数&#34;&gt;&lt;code&gt;substitute-if&lt;/code&gt;関数&lt;/h2&gt;

&lt;p&gt;与えられたテスト関数の結果によって値を置き換える。
(substitute : 〜を代用する。代理をする。)&lt;/p&gt;

&lt;p&gt;構文:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;substitute-if&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;new-item&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;predicate&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;sequence&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;&amp;amp;key&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;from-end&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;start&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;count&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; result-sequence&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;dl&gt;
&lt;dt&gt;new-item&lt;/dt&gt;
&lt;dd&gt;置換後の要素。&lt;/dd&gt;
&lt;dt&gt;predicate&lt;/dt&gt;
&lt;dd&gt;述語。#&#39;関数を描く要素に照らし合わせて真偽を判断する。&lt;/dd&gt;
&lt;dt&gt;sequence&lt;/dt&gt;
&lt;dd&gt;proper sequence(適切なシーケンス)&lt;br&gt;
    1次元配列や、popしていくと()になるリスト。&lt;br&gt;
    つまり、巡回リスト以外のリスト、および、最後のセルの参照先が非nil以外のリスト。&lt;/dd&gt;
&lt;dt&gt;count&lt;/dt&gt;
&lt;dd&gt;置換する要素数の上限。&lt;br&gt;
    デフォルト : nil&lt;/dd&gt;
&lt;dt&gt;from-end&lt;/dt&gt;
&lt;dd&gt;countがセットされていれば働く。右端から上限判定を行う。&lt;br&gt;
    デフォルト : false&lt;/dd&gt;
&lt;dt&gt;start end&lt;/dt&gt;
&lt;dd&gt;置換範囲は、startより大きく、end以下までの中に制限される。&lt;br&gt;
    デフォルト : start = 0, end = nil&lt;br&gt;
    例: :start 2 :end 5 なら (x x o o o x x)&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;substitute-if&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;#\e&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;digit-char-p&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;I&amp;#39;m a l33t hack3r!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; I&amp;#39;m a leet hacker!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;subseq-関数&#34;&gt;&lt;code&gt;subseq&lt;/code&gt;関数&lt;/h2&gt;

&lt;p&gt;引数の文字列から、両端の各々任意の文字数を取り除いた文字列を返す。
&lt;strong&gt;NOTE:&lt;/strong&gt; endの一つ前までしか表示されないことに注意。&lt;/p&gt;

&lt;p&gt;構文:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;subseq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;sequence&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;start-position&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;end-position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; end-position は optional で、デフォルトではnil&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;; &amp;#34;h e l l o   w o r l d&amp;#34;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;  0 1 2 3 4 5 6 7 8 9 10&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;subseq&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; &amp;#34;lo world&amp;#34;&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;subseq&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; &amp;#34;lo&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;length-関数&#34;&gt;&lt;code&gt;length&lt;/code&gt;関数&lt;/h2&gt;

&lt;p&gt;文字列の長さを返す。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;abcdefg&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; 7&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;fresh-line-関数&#34;&gt;&lt;code&gt;fresh-line&lt;/code&gt;関数&lt;/h2&gt;

&lt;p&gt;行頭に出力ストリームがない場合、newlineを出力する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;; 下記のようなプロンプトの状態になっているときを考える。&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 前の出力 CLISP&amp;gt;&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;fresh-line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; プロンプトが下記のように改行される。&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 前の出力&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; CLISP&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;terpri-関数&#34;&gt;&lt;code&gt;terpri&lt;/code&gt;関数&lt;/h2&gt;

&lt;p&gt;出力ストリームにnewlineを出力する。&lt;/p&gt;

&lt;h1 id=&#34;ファイル操作用の関数&#34;&gt;ファイル操作用の関数&lt;/h1&gt;

&lt;h2 id=&#34;with-open-file-関数&#34;&gt;&lt;code&gt;with-open-file&lt;/code&gt;関数&lt;/h2&gt;

&lt;p&gt;関数内でfileをopenし、streamで制御する。
処理終了時には、fileをcloseする。&lt;/p&gt;

&lt;p&gt;構文:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;with-open-file&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;my-stream&lt;/span&gt;
                 &lt;span class=&#34;s&#34;&gt;&amp;#34;file-name.txt&amp;#34;&lt;/span&gt;
                 &lt;span class=&#34;ss&#34;&gt;:direction&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:output&lt;/span&gt;
                 &lt;span class=&#34;ss&#34;&gt;:if-exsts&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:supersede&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;procedure&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;dl&gt;
&lt;dt&gt;my-stream&lt;/dt&gt;
&lt;dd&gt;ストリーム名の指定&lt;/dd&gt;
&lt;dt&gt;&#34;file-name.txt&#34;&lt;/dt&gt;
&lt;dd&gt;open対象のファイル名&lt;/dd&gt;
&lt;dt&gt;:direction&lt;/dt&gt;
&lt;dd&gt;方向(入出力)の指定&lt;br&gt;
    output : 出力&lt;br&gt;
    input  : 入力&lt;/dd&gt;
&lt;dt&gt;:if-exsts&lt;/dt&gt;
&lt;dd&gt;ファイルが既存のとき、&lt;br&gt;
    :supersede : 置き換える&lt;/dd&gt;
&lt;dt&gt;procedure&lt;/dt&gt;
&lt;dd&gt;ファイルオープン後の処理&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;with-open-file&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;my-stream&lt;/span&gt;
                 &lt;span class=&#34;s&#34;&gt;&amp;#34;file-name.txt&amp;#34;&lt;/span&gt;
                 &lt;span class=&#34;ss&#34;&gt;:direction&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:output&lt;/span&gt;
                 &lt;span class=&#34;ss&#34;&gt;:if-exsts&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:supersede&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;princ&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Hello File!&amp;#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;my-stream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; =&amp;gt; princでmy-streamに投げた文字列を、そのmy-streamに関連付けたファイルに書き出す。&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>書籍 Land of Lisp 10章 loopマクロ</title>
      <link>https://otaon.github.io/web/ja-jp/2019/03/07/%E6%9B%B8%E7%B1%8D-land-of-lisp-10%E7%AB%A0-loop%E3%83%9E%E3%82%AF%E3%83%AD/</link>
      <pubDate>Thu, 07 Mar 2019 00:00:00 +0900</pubDate>
      
      <guid>https://otaon.github.io/web/ja-jp/2019/03/07/%E6%9B%B8%E7%B1%8D-land-of-lisp-10%E7%AB%A0-loop%E3%83%9E%E3%82%AF%E3%83%AD/</guid>
      
        <description>

&lt;h1 id=&#34;loopマクロ周期表&#34;&gt;Loopマクロ周期表&lt;/h1&gt;

&lt;p&gt;書籍では、&lt;code&gt;loop&lt;/code&gt;マクロで使えるトークンを周期表のようにまとめていた。&lt;br /&gt;
それだと少々見辛いため、素直な表形式で下記にまとめなおす。&lt;/p&gt;

&lt;h2 id=&#34;参考文献&#34;&gt;参考文献&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://lisp.satoshiweb.net/2018/01/iteration.html&#34;&gt;独学 Common Lisp - 第6章「繰り返し」&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;t-o-c&#34;&gt;T.O.C.&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#基本的なトークン&#34;&gt;基本的なトークン&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ループに対する名前付けとループの脱出&#34;&gt;ループに対する名前付けとループの脱出&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ハッシュテーブル関連&#34;&gt;ハッシュテーブル関連&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#forループ関連&#34;&gt;&lt;code&gt;for&lt;/code&gt;ループ関連&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#要素が満たすべき条件を調べる&#34;&gt;要素が満たすべき条件を調べる&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#条件分岐&#34;&gt;条件分岐&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#結果の集積&#34;&gt;結果の集積&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;基本的なトークン&#34;&gt;基本的なトークン&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;トークン&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;loop&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;単純なループ&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;do&lt;/code&gt; &lt;code&gt;doing&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;繰り返しの中で任意の式を実行する&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;repeat&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定した回数ループする&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;return&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;任意の式の実行結果を返してループを抜ける&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;initially&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ループし始める前に任意の式を実行する&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;finally&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ループが終わった後に任意の式を実行する&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;ループの途中脱出時には実行されない&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;with&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ローカル変数を作成する&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;into&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;結果を格納するローカル変数を作成する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;loop&#34;&gt;&lt;code&gt;loop&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;princ&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;type something&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;force-output&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; type somethingr&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; type somethingf&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; type somethingf&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; ...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;do&#34;&gt;&lt;code&gt;do&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;below&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt; 
      &lt;span class=&#34;nv&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; 0 &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 1 &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 2 &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 3 &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 4 &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; NIL&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; CL-USER&amp;gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;repeat&#34;&gt;&lt;code&gt;repeat&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;repeat&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;
      &lt;span class=&#34;nv&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Print five times&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; &amp;#34;Print five times&amp;#34; &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; &amp;#34;Print five times&amp;#34; &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; &amp;#34;Print five times&amp;#34; &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; &amp;#34;Print five times&amp;#34; &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; &amp;#34;Print five times&amp;#34; &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; NIL&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;return&#34;&gt;&lt;code&gt;return&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;below&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;
      &lt;span class=&#34;nv&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;nv&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;leave-early&lt;/span&gt;
      &lt;span class=&#34;nv&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; 0 &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 1 &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 2 &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 3 &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 4 &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; LEAVE-EARLY&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;initially&#34;&gt;&lt;code&gt;initially&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;initially&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;loop-begin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;below&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;
	  &lt;span class=&#34;nv&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; LOOP-BEGIN &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 0 &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 1 &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 2 &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; NIL&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;finally&#34;&gt;&lt;code&gt;finally&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;below&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;
      &lt;span class=&#34;nv&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;printx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;nv&#34;&gt;finally&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;loop-end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; 0 &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 1 &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 2 &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; LOOP-END &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; NIL&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;with&#34;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;nv&#34;&gt;repeat&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; 3 &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 3 &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 3 &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 3 &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 3 &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; NIL&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;into&#34;&gt;&lt;code&gt;into&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;nv&#34;&gt;minimize&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;into&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lowest&lt;/span&gt;
	  &lt;span class=&#34;nv&#34;&gt;maximize&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;into&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;biggest&lt;/span&gt;
	  &lt;span class=&#34;nv&#34;&gt;finally&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cons&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lowest&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;biggest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; (1 . 5)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;ループに対する名前付けとループの脱出&#34;&gt;ループに対する名前付けとループの脱出&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;トークン&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;named&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ループに任意の名前をつける&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;return-from&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ループ名を指定してループを抜ける&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;while&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;式が真ならループを続け、nilならループを抜ける&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;until&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;式がnilならループを続け、真ならループを抜ける&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;named&#34;&gt;&lt;code&gt;named&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;named&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;outer&lt;/span&gt;
      &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;below&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;
	  &lt;span class=&#34;nv&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;progn&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;outer&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	            &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;named&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;inner&lt;/span&gt;
				      &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;below&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt;
					  &lt;span class=&#34;nv&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;**inner&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
					  &lt;span class=&#34;nv&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
					  &lt;span class=&#34;nv&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;return-from&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;outer&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;kicked-out-all-the-way&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; &amp;#34;outer&amp;#34; &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; &amp;#34;outer&amp;#34; &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; &amp;#34;**inner&amp;#34; &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; &amp;#34;outer&amp;#34; &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; &amp;#34;**inner&amp;#34; &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; &amp;#34;**inner&amp;#34; &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; &amp;#34;outer&amp;#34; &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; &amp;#34;**inner&amp;#34; &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; &amp;#34;**inner&amp;#34; &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; &amp;#34;**inner&amp;#34; &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; KICKED-OUT-ALL-THE-WAY&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;return-from&#34;&gt;&lt;code&gt;return-from&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;省略。&lt;br /&gt;
&lt;code&gt;named&lt;/code&gt;の例を参照のこと。&lt;/p&gt;

&lt;h3 id=&#34;while&#34;&gt;&lt;code&gt;while&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;555&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;nv&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;evenp&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	  &lt;span class=&#34;nv&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 0 &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 2 &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 4 &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; NIL&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;until&#34;&gt;&lt;code&gt;until&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
	  &lt;span class=&#34;nv&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	  &lt;span class=&#34;nv&#34;&gt;until&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; 0 &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 1 &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 2 &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 3 &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 4 &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; NIL&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
	  &lt;span class=&#34;nv&#34;&gt;until&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	  &lt;span class=&#34;nv&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; 0 &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 1 &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 2 &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 3 &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; NIL&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;ハッシュテーブル関連&#34;&gt;ハッシュテーブル関連&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;トークン&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;using&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;hash-key&lt;/code&gt;によりキーを、&lt;code&gt;hash-value&lt;/code&gt;によりバリューを保持する&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;being&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ハッシュテーブルから、&lt;code&gt;being the hash-key of&lt;/code&gt;でキーを、&lt;code&gt;being the hash-value of&lt;/code&gt;でバリューを取得する&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;the&lt;/code&gt; &lt;code&gt;each&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ハッシュテーブルに対して&lt;code&gt;being the&lt;/code&gt;か&lt;code&gt;being each&lt;/code&gt;としてアクセスする&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;hash-keys&lt;/code&gt; &lt;code&gt;hash-key&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ハッシュキーを取得する際に指定するトークン&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;hash-values&lt;/code&gt; &lt;code&gt;hash-value&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ハッシュ値を取得する際に指定するトークン&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;下記の例では全て&lt;code&gt;salary&lt;/code&gt;ハッシュテーブルを使用する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defparameter&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;salary&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;make-hash-table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;setf&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;gethash&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;bob&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;salary&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;setf&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;gethash&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;john&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;salary&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;90&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;using&#34;&gt;&lt;code&gt;using&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;person&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;being&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;each&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;hash-key&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;salary&lt;/span&gt;
      &lt;span class=&#34;nv&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;hash-value&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;amt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	  &lt;span class=&#34;nv&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cons&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;person&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;amt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; (JOHN . 90) &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; (BOB . 80) &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; NIL&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;being&#34;&gt;&lt;code&gt;being&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;person&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;being&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;each&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;hash-key&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;salary&lt;/span&gt;
	  &lt;span class=&#34;nv&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;person&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; JOHN &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; BOB &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; NIL&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;the-each&#34;&gt;&lt;code&gt;the&lt;/code&gt; &lt;code&gt;each&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;person&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;being&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;each&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;hash-key&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;salary&lt;/span&gt;
	  &lt;span class=&#34;nv&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;person&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; JOHN &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; BOB &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; NIL&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;person&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;being&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;the&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;hash-keys&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;salary&lt;/span&gt;
	  &lt;span class=&#34;nv&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;person&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; JOHN &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; BOB &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; NIL&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;hash-key-hash-keys&#34;&gt;&lt;code&gt;hash-key&lt;/code&gt; &lt;code&gt;hash-keys&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;省略。&lt;br /&gt;
&lt;code&gt;the&lt;/code&gt; &lt;code&gt;each&lt;/code&gt;の例を参照のこと。&lt;/p&gt;

&lt;h3 id=&#34;hash-value-hash-values&#34;&gt;&lt;code&gt;hash-value&lt;/code&gt; &lt;code&gt;hash-values&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;amt&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;being&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;each&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;hash-value&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;salary&lt;/span&gt;
	  &lt;span class=&#34;nv&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;amt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; 90 &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 80 &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; NIL&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;amt&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;being&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;the&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;hash-values&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;salary&lt;/span&gt;
	  &lt;span class=&#34;nv&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;amt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; 90 &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 80 &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; NIL&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;for-ループ関連&#34;&gt;&lt;code&gt;for&lt;/code&gt;ループ関連&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;トークン&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;for&lt;/code&gt; &lt;code&gt;as&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ループ変数を初期化する&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;in&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;リストを&lt;code&gt;car&lt;/code&gt;したものをループ変数に与える&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;on&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;リストをループ変数に与えた後に&lt;code&gt;cdr&lt;/code&gt;する&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;by&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;数:指定した数値だけループ変数を増減させる（デフォルト:&lt;code&gt;1&lt;/code&gt;or&lt;code&gt;-1&lt;/code&gt;）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;リスト:指定した関数でリストから値を取り出す（デフォルト:&lt;code&gt;#&#39;cdr&lt;/code&gt;）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;then&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;for x = y then z&lt;/code&gt;とすると、&lt;code&gt;x&lt;/code&gt;に初期値&lt;code&gt;y&lt;/code&gt;を設定し、式&lt;code&gt;z&lt;/code&gt;を繰り返し実行する&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;from&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;for x from y to z&lt;/code&gt;として、ループ変数&lt;code&gt;x&lt;/code&gt;を数値&lt;code&gt;y&lt;/code&gt;から増減させる&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;upfrom&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;for x upfrom y to z&lt;/code&gt;として、ループ変数&lt;code&gt;x&lt;/code&gt;を数値&lt;code&gt;y&lt;/code&gt;から増加させる&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;downfrom&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;for x downfrom y to z&lt;/code&gt;として、ループ変数&lt;code&gt;x&lt;/code&gt;を数値&lt;code&gt;y&lt;/code&gt;から減少させる&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;to&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;for x from y to z&lt;/code&gt;として、ループ変数&lt;code&gt;x&lt;/code&gt;を数値&lt;code&gt;z&lt;/code&gt;まで増減させる&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;upto&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;for x from y to z&lt;/code&gt;として、ループ変数&lt;code&gt;x&lt;/code&gt;を数値&lt;code&gt;z&lt;/code&gt;まで増加させる&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;downto&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;for x from y to z&lt;/code&gt;として、ループ変数&lt;code&gt;x&lt;/code&gt;を数値&lt;code&gt;z&lt;/code&gt;まで減少させる&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;across&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;for x across y&lt;/code&gt;として、シーケンス（文字列を含む）&lt;code&gt;y&lt;/code&gt;を先頭から&lt;code&gt;x&lt;/code&gt;に与える&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;for-as&#34;&gt;&lt;code&gt;for&lt;/code&gt; &lt;code&gt;as&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
	  &lt;span class=&#34;nv&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	  &lt;span class=&#34;nv&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	  &lt;span class=&#34;nv&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;zuchini&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; 0 &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 1 &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 2 &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 3 &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 4 &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 5 &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; ZUCHINI&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;
	  &lt;span class=&#34;nv&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;
	  &lt;span class=&#34;nv&#34;&gt;collect&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; (0 1 2 3 4 5 6 7 8 9 10)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;in-on&#34;&gt;&lt;code&gt;in&lt;/code&gt; &lt;code&gt;on&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	  &lt;span class=&#34;nv&#34;&gt;sum&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; 123&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	  &lt;span class=&#34;nv&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; 1 &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 3 &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 5 &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; NIL&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;on&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	  &lt;span class=&#34;nv&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; (1 3 5) &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; (3 5) &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; (5) &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; NIL&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;by&#34;&gt;&lt;code&gt;by&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;by&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
	  &lt;span class=&#34;nv&#34;&gt;sum&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; 14&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;then&#34;&gt;&lt;code&gt;then&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;repeat&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;
      &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;10.0&lt;/span&gt;
	  &lt;span class=&#34;nv&#34;&gt;then&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	  &lt;span class=&#34;nv&#34;&gt;collect&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; (10.0 5.0 2.5 1.25 0.625)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;from&#34;&gt;&lt;code&gt;from&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;
	  &lt;span class=&#34;nv&#34;&gt;sum&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 21&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;upfrom&#34;&gt;&lt;code&gt;upfrom&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;upfrom&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;
	  &lt;span class=&#34;nv&#34;&gt;sum&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 21&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;downfrom&#34;&gt;&lt;code&gt;downfrom&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;downfrom&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;
	  &lt;span class=&#34;nv&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; 10 &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 9 &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 8 &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 7 &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; NIL&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;to&#34;&gt;&lt;code&gt;to&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;省略。&lt;br /&gt;
&lt;code&gt;from&lt;/code&gt;の例を参照のこと。&lt;/p&gt;

&lt;h3 id=&#34;upto&#34;&gt;&lt;code&gt;upto&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;upto&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;
	  &lt;span class=&#34;nv&#34;&gt;sum&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; 21&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;downto&#34;&gt;&lt;code&gt;downto&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;downto&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;
	  &lt;span class=&#34;nv&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; 10 &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 9 &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 8 &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 7 &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; NIL&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;across&#34;&gt;&lt;code&gt;across&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;across&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;#(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;; 配列&lt;/span&gt;
	  &lt;span class=&#34;nv&#34;&gt;sum&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; 123&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;要素が満たすべき条件を調べる&#34;&gt;要素が満たすべき条件を調べる&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;トークン&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;always&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;式が真ならばループを続け、&lt;code&gt;nil&lt;/code&gt;ならばループを抜ける&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;never&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;式が&lt;code&gt;nil&lt;/code&gt;ならばループを続け、真ならばループを抜ける&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;thereis&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;式が真ならばループを抜ける&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;返り値は真偽値ではなく、判定に用いた値自体&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;always&#34;&gt;&lt;code&gt;always&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	  &lt;span class=&#34;nv&#34;&gt;always&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;evenp&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; T&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;never&#34;&gt;&lt;code&gt;never&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	  &lt;span class=&#34;nv&#34;&gt;never&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;oddp&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; T&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;thereis&#34;&gt;&lt;code&gt;thereis&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;555&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	  &lt;span class=&#34;nv&#34;&gt;thereis&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;oddp&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; T&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;条件分岐&#34;&gt;条件分岐&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;トークン&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;if&lt;/code&gt; &lt;code&gt;when&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;式が真ならば、その次の節を実行する&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;unless&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;式が&lt;code&gt;nil&lt;/code&gt;ならば、その次の節を実行する&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;and&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;条件を満たした時に実行する節を複数記述する場合に、節を連結する&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;else&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;cond&lt;/code&gt;マクロのように条件節を連結する&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;end&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;複数記述した節の終わりを示す&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;if&#34;&gt;&lt;code&gt;if&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;below&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;
	  &lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;oddp&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	  &lt;span class=&#34;nv&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; 1 &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 3 &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; NIL&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;when&#34;&gt;&lt;code&gt;when&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;below&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
	  &lt;span class=&#34;nv&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;oddp&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	  &lt;span class=&#34;nv&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	  &lt;span class=&#34;nv&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;yup&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; &amp;#34;yup&amp;#34; &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 1 &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; &amp;#34;yup&amp;#34; &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; &amp;#34;yup&amp;#34; &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 3 &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; &amp;#34;yup&amp;#34; &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; NIL&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;unless&#34;&gt;&lt;code&gt;unless&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;below&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
	  &lt;span class=&#34;nv&#34;&gt;unless&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;oddp&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	  &lt;span class=&#34;nv&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; 0 &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 2 &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; NIL&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;and&#34;&gt;&lt;code&gt;and&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;below&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;
	  &lt;span class=&#34;nv&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	  &lt;span class=&#34;nv&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;do this&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	  &lt;span class=&#34;nv&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;also do this&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	  &lt;span class=&#34;nv&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;always do this&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; &amp;#34;always do this&amp;#34; &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; &amp;#34;always do this&amp;#34; &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; &amp;#34;always do this&amp;#34; &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; &amp;#34;do this&amp;#34; &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; &amp;#34;also do this&amp;#34; &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; &amp;#34;always do this&amp;#34; &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; &amp;#34;always do this&amp;#34; &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; NIL&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;else&#34;&gt;&lt;code&gt;else&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;below&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;
	  &lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;oddp&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	  &lt;span class=&#34;nv&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	  &lt;span class=&#34;nv&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;w00t&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; &amp;#34;w00t&amp;#34; &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 1 &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; &amp;#34;w00t&amp;#34; &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 3 &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; &amp;#34;w00t&amp;#34; &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; NIL&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;end&#34;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;below&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
      &lt;span class=&#34;nv&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;oddp&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	  &lt;span class=&#34;nv&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	  &lt;span class=&#34;nv&#34;&gt;end&lt;/span&gt;
	  &lt;span class=&#34;nv&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;yup&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; &amp;#34;yup&amp;#34; &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 1 &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; &amp;#34;yup&amp;#34; &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; &amp;#34;yup&amp;#34; &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; 3 &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; &amp;#34;yup&amp;#34; &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; NIL&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;結果の集積&#34;&gt;結果の集積&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;トークン&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;count&lt;/code&gt; &lt;code&gt;counting&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;式がnil以外の場合に累積的に数を数える&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;sum&lt;/code&gt; &lt;code&gt;summing&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;数値を加算していく&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;minimize&lt;/code&gt; &lt;code&gt;minimizing&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;後ろに続く数が前の数値よりも小さい場合、その数を残す&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;maximize&lt;/code&gt; &lt;code&gt;maximizing&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;後ろに続く数が前の数値よりも大きい場合、その数を残す&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;append&lt;/code&gt; &lt;code&gt;appending&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;次に続くリストを結果となるリストに連結する（&lt;strong&gt;非破壊的&lt;/strong&gt;）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;nconc&lt;/code&gt; &lt;code&gt;nconcing&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;次に続くリストを結果となるリストに連結する（&lt;strong&gt;破壊的&lt;/strong&gt;）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;count-counting&#34;&gt;&lt;code&gt;count&lt;/code&gt; &lt;code&gt;counting&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;nv&#34;&gt;count&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; 4&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;sum-summing&#34;&gt;&lt;code&gt;sum&lt;/code&gt; &lt;code&gt;summing&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;below&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;
      &lt;span class=&#34;nv&#34;&gt;sum&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; 10&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;minimize-minimizing&#34;&gt;&lt;code&gt;minimize&lt;/code&gt; &lt;code&gt;minimizing&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;nv&#34;&gt;minimize&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; 1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;maximize-maximizing&#34;&gt;&lt;code&gt;maximize&lt;/code&gt; &lt;code&gt;maximizing&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;nv&#34;&gt;maximize&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; 3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;append-appending&#34;&gt;&lt;code&gt;append&lt;/code&gt; &lt;code&gt;appending&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;below&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;
      &lt;span class=&#34;nv&#34;&gt;append&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;Z&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; (Z 0 Z 1 Z 2 Z 3 Z 4)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;nconc-nconcing&#34;&gt;&lt;code&gt;nconc&lt;/code&gt; &lt;code&gt;nconcing&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;below&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;
      &lt;span class=&#34;nv&#34;&gt;nconc&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;Z&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; (Z 0 Z 1 Z 2 Z 3 Z 4)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>書籍 Land of Lisp 11章 format関数でテキストを表示する</title>
      <link>https://otaon.github.io/web/ja-jp/2019/03/07/%E6%9B%B8%E7%B1%8D-land-of-lisp-11%E7%AB%A0-format%E9%96%A2%E6%95%B0%E3%81%A7%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88%E3%82%92%E8%A1%A8%E7%A4%BA%E3%81%99%E3%82%8B/</link>
      <pubDate>Thu, 07 Mar 2019 00:00:00 +0900</pubDate>
      
      <guid>https://otaon.github.io/web/ja-jp/2019/03/07/%E6%9B%B8%E7%B1%8D-land-of-lisp-11%E7%AB%A0-format%E9%96%A2%E6%95%B0%E3%81%A7%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88%E3%82%92%E8%A1%A8%E7%A4%BA%E3%81%99%E3%82%8B/</guid>
      
        <description>

&lt;h2 id=&#34;t-o-c&#34;&gt;T.O.C.&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#111-format関数の呼び出し方&#34;&gt;11.1 &lt;code&gt;format&lt;/code&gt;関数の呼び出し方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#112-制御シーケンス-lispの値-を表示する&#34;&gt;11.2 制御シーケンス: &lt;em&gt;Lispの値&lt;/em&gt; を表示する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#113-制御シーケンス-数値を整形する&#34;&gt;11.3 制御シーケンス: 数値を整形する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#114-複数行出力&#34;&gt;11.4 複数行出力&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#115-テキストを揃える&#34;&gt;11.5 テキストを揃える&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#116-制御シーケンス-繰り返し&#34;&gt;11.6 制御シーケンス: 繰り返し&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#117-綺麗な表を作るクレージーな整形トリック&#34;&gt;11.7 綺麗な表を作るクレージーな整形トリック&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;code&gt;format&lt;/code&gt;関数の構文と制御シーケンスを説明する。&lt;/p&gt;

&lt;h2 id=&#34;11-1-format-関数の呼び出し方&#34;&gt;11.1 &lt;code&gt;format&lt;/code&gt;関数の呼び出し方&lt;/h2&gt;

&lt;p&gt;下記に&lt;code&gt;format&lt;/code&gt;関数の構文を示す。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;format&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Add onion rings for only ~$ dollars more!&amp;#34;&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;第1引数-出力先&#34;&gt;第1引数:出力先&lt;/h3&gt;

&lt;dl&gt;
  &lt;dt&gt;nil&lt;/dt&gt;
  &lt;dd&gt;生成されたテキストを文字列として返す。&lt;/dd&gt;
  &lt;dt&gt;t&lt;/dt&gt;
  &lt;dd&gt;結果をコンソールに出力する。返り値はnilとなる。&lt;/dd&gt;
  &lt;dt&gt;stream&lt;/dt&gt;
  &lt;dd&gt;データを出力ストリームに書き出す。&lt;/dd&gt;
&lt;/dl&gt;

&lt;h3 id=&#34;第2引数-制御文字列&#34;&gt;第2引数:制御文字列&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&amp;quot;......&amp;quot;&lt;/code&gt;の部分は制御文字列といい、原則としてテキストはそのまま出力される。&lt;br /&gt;
ただし、制御文字列の中に &lt;strong&gt;制御シーケンス&lt;/strong&gt; を使用することで、出力形式に影響を与える。&lt;br /&gt;
制御シーケンスは常に&lt;code&gt;~&lt;/code&gt;で始まる。&lt;/p&gt;

&lt;h3 id=&#34;第3-引数-値引数&#34;&gt;第3?引数:値引数&lt;/h3&gt;

&lt;p&gt;制御文字列の後ろの引数は、実際の値、つまり整形され表示されるデータである。&lt;br /&gt;
制御文字列に従ってこれらの値は解釈、整形される。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;ここからは、制御シーケンスについて解説する。&lt;/p&gt;

&lt;h2 id=&#34;11-2-制御シーケンス-lispの値-を表示する&#34;&gt;11.2 制御シーケンス: &lt;em&gt;Lispの値&lt;/em&gt; を表示する&lt;/h2&gt;

&lt;dl&gt;
  &lt;dt&gt;~s&lt;/dt&gt;
  &lt;dd&gt;(print1)と同じく、Lispが後から読み込めるような区切り文字も入っている。&lt;/dd&gt;
  &lt;dt&gt;~a&lt;/dt&gt;
  &lt;dd&gt;(princ)と同じく、人間が読みやすい形式で表示する。&lt;/dd&gt;
&lt;/dl&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;format&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;I am printing ~s in the middle of this sentence.&amp;#34;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;I&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;am&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;printing&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;the&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;middle&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;this&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;sentence.&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;format&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;I am prining ~a in the middle of this sentence.&amp;#34;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;I&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;am&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;printing&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;the&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;middle&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;this&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;sentence.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;s-および-a-制御シーケンスのパラメータ&#34;&gt;&lt;code&gt;~s&lt;/code&gt;および&lt;code&gt;~a&lt;/code&gt;制御シーケンスのパラメータ&lt;/h3&gt;

&lt;dl&gt;
  &lt;dt&gt;~aや~sの前の整数n (例:~10a)&lt;/dt&gt;
  &lt;dd&gt;出力の最小値の指定。値をフォーマットした文字列が整数nに満たなければ、スペースが右側に追加される。&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;~a&lt;/code&gt;の例&lt;/strong&gt; 制御シーケンスの部分が10文字になるように、&lt;code&gt;foo&lt;/code&gt;の右に空白が7個追加される。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;format&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;I am prining ~10a within ten spaces of room.&amp;#34;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;I&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;am&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;printing&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;foo&lt;/span&gt;        &lt;span class=&#34;nv&#34;&gt;within&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ten&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;spaces&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;room.&lt;/span&gt;
                 &lt;span class=&#34;nv&#34;&gt;^^^^^^^&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;パラメータ一覧&#34;&gt;パラメータ一覧&lt;/h4&gt;

&lt;dl&gt;
  &lt;dt&gt;第1パラメータ&lt;/dt&gt;
  &lt;dd&gt;整数n&lt;/br&gt;出力の最小幅を指定する。パディングにはスペースが使われる。&lt;/dd&gt;
  &lt;dt&gt;第2パラメータ&lt;/dt&gt;
  &lt;dd&gt;整数n&lt;/br&gt;パディングのステップ数を指定する。&lt;/br&gt;パディングは全体の表示幅が第1パラメータ以上になるまで続く。&lt;/dd&gt;
  &lt;dt&gt;第3パラメータ&lt;/dt&gt;
  &lt;dd&gt;整数n&lt;/br&gt;パディング文字数の下限を指定する。&lt;/br&gt;全体の表示幅ではなく、パディング文字数自体の下限であることに注意。&lt;/dd&gt;
  &lt;dt&gt;第4パラメータ&lt;/dt&gt;
  &lt;dd&gt;&#39;文字&lt;/br&gt;パディングに使用する文字を指定する。最初に&#39;をつけることに注意。&lt;/dd&gt;
  &lt;dt&gt;, (カンマ)&lt;/dt&gt;
  &lt;dd&gt;各パラメータのセパレータ&lt;/dd&gt;
  &lt;dt&gt;@ (アットマーク)&lt;/dt&gt;
  &lt;dd&gt;パディング文字を左側に挿入することを指定する。&lt;/dd&gt;
&lt;/dl&gt;

&lt;h2 id=&#34;11-3-制御シーケンス-数値を整形する&#34;&gt;11.3 制御シーケンス: 数値を整形する&lt;/h2&gt;

&lt;h3 id=&#34;整数の整形&#34;&gt;整数の整形&lt;/h3&gt;

&lt;p&gt;下記の制御シーケンスを用いることで、様々な基数で数値を表示できる。&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;~x&lt;/dt&gt;
  &lt;dd&gt;16進数で数値を表示する。&lt;/dd&gt;
  &lt;dt&gt;~b&lt;/dt&gt;
  &lt;dd&gt;2進数で数値を表示する。&lt;/dd&gt;
  &lt;dt&gt;~d&lt;/dt&gt;
  &lt;dd&gt;10進数で数値を表示する。&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;数値用の制御シーケンス特有のパラメータが用意されている。&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;: (コロン)&lt;/dt&gt;
  &lt;dd&gt;制御シーケンス文字の前に:を入れると、3桁ごとにカンマを入れる。&lt;/dd&gt;
&lt;/dl&gt;

&lt;h3 id=&#34;浮動小数点の整形&#34;&gt;浮動小数点の整形&lt;/h3&gt;

&lt;p&gt;下記の制御シーケンスを用いることで、様々な基数で数値を表示できる。&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;~f&lt;/dt&gt;
  &lt;dd&gt;浮動小数点を表示する。&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;浮動小数点用のパラメータを以下に示す。&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;第1パラメータ&lt;/dt&gt;
  &lt;dd&gt;小数(整数部と小数点を含む)の表示幅。例えばPIに4を指定したら3.14と表示される。&lt;/dd&gt;
  &lt;dt&gt;第2パラメータ&lt;/dt&gt;
  &lt;dd&gt;小数点以下の表示幅。例えばPIに4を指定したら3.1416と表示される。(四捨五入される!)&lt;/dd&gt;
  &lt;dt&gt;第3パラメータ&lt;/dt&gt;
  &lt;dd&gt;数値を10^指定値倍する。例えばPIに2を指定したら100倍され314.16と表示される。&lt;/dd&gt;
&lt;/dl&gt;

&lt;h3 id=&#34;通貨の整形&#34;&gt;通貨の整形&lt;/h3&gt;

&lt;p&gt;下記の制御シーケンスを用いることで、小数を含む通貨表示を指定できる。&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;~$&lt;/dt&gt;
  &lt;dd&gt;&#34;ドル.セント&#34;の形式で表示する。1.5は1.50と表示される。&lt;/dd&gt;
&lt;/dl&gt;

&lt;h2 id=&#34;11-4-複数行出力&#34;&gt;11.4 複数行出力&lt;/h2&gt;

&lt;p&gt;Lispのコマンドとして、改行には2つ(&lt;code&gt;terpri&lt;/code&gt;と&lt;code&gt;fresh-line&lt;/code&gt;)がある。&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;terpri&lt;/dt&gt;
  &lt;dd&gt;現在の行を終了して、続く出力が新たな行に現れるようにする。&lt;/dd&gt;
  &lt;dt&gt;fresh-line&lt;/dt&gt;
  &lt;dd&gt;現在のカーソルが行頭いないときに限って改行する。&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;formatコマンドでは、&lt;code&gt;terpri&lt;/code&gt;と&lt;code&gt;fresh-line&lt;/code&gt;それぞれに対応する制御シーケンスがある。&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;~%&lt;/dt&gt;
  &lt;dd&gt;(terpriに相当)&lt;/br&gt;現在の行を終了して、続く出力が新たな行に現れるようにする。&lt;/dd&gt;
  &lt;dt&gt;~&amp;&lt;/dt&gt;
  &lt;dd&gt;(fresh-lineに相当)&lt;/br&gt;現在のカーソルが行頭いないときに限って改行する。&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;さらに、これら二つの制御シーケンスには改行数を指定するパラメータがある。&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;第1パラメータ&lt;/dt&gt;
  &lt;dd&gt;改行数を指定する。~5%として、5つの空行を出力する。&lt;/dd&gt;
&lt;/dl&gt;

&lt;h2 id=&#34;11-5-テキストを揃える&#34;&gt;11.5 テキストを揃える&lt;/h2&gt;

&lt;p&gt;formatコマンドでは、テキストを揃える制御シーケンスがある。&lt;br /&gt;
例えばテーブルを作ったり、センタリングしたりする制御シーケンスがある。&lt;br /&gt;
ここでは下記のリストを使用して説明する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;random-animal&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;nth&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;random&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;dog&amp;#34;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;tick&amp;#34;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;tiger&amp;#34;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;walrus&amp;#34;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;kangaroo&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;dl&gt;
  &lt;dt&gt;~t&lt;/dt&gt;
  &lt;dd&gt;テキストが現れる位置を指定する。&lt;/dd&gt;
  &lt;dt&gt;第1パラメータ&lt;/dt&gt;
  &lt;dd&gt;整形後のテキストが現れるカラム位置。カラム位置は行頭から数える。&lt;/dd&gt;
&lt;/dl&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;repeat&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;format&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;5t~a ~15t~a ~25t~a~%&amp;#34;&lt;/span&gt;
                   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;random-animal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;random-animal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;random-animal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;;     walrus    tick      dog&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;     dog       dog       tick&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;     tiger     tiger     kangaroo&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;     kangaroo  tick      tiger&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;     tiger     walrus    tiger&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;     dog       tick      kangaroo&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;     tiger     walrus    dog&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;     walrus    tiger     dog&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;     walrus    dog       dog&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;     walrus    tick      dog&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;NIL&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;文字がなるべく等しい距離をとって表示するようにするには、&lt;code&gt;~&amp;lt;&lt;/code&gt;と&lt;code&gt;~&amp;gt;&lt;/code&gt;制御シーケンスを使用する。&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;~&lt;, ~&gt;&lt;/dt&gt;
  &lt;dd&gt;~&lt;と~&gt;で囲まれた文字列を文字寄せする。&lt;/dd&gt;
  &lt;dt&gt;~&lt;の第1パラメータその1&lt;/dt&gt;
  &lt;dd&gt;整数n&lt;/br&gt;~&lt;と~&gt;で囲まれたブロックの幅を指定する。&lt;/br&gt;例えば30と指定すると、ブロック全部で30文字分の幅を使用する。&lt;/dd&gt;
  &lt;dt&gt;~&lt;の第1パラメータその2&lt;/dt&gt;
  &lt;dd&gt;:@&lt;/br&gt;行全体に対して値をセンタリングする。文字列ごとではないことに注意。&lt;/dd&gt;
  &lt;dt&gt;~;&lt;/dt&gt;
  &lt;dd&gt;~&lt;による文字寄せ対象となる新たな値が次に来ることを示す。(~;は文字寄せ用の空白を挿入する、と考えても良い。)&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;&lt;strong&gt;3つの文字列を30文字分の幅に配置する&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;repeat&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;
      &lt;span class=&#34;nv&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;format&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;~30&amp;lt;~a~;~a~;~a~&amp;gt;~%&amp;#34;&lt;/span&gt;
                 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;random-animal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;random-animal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;random-animal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;;kangaroo        dog        dog&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;tiger      tiger      kangaroo&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;tiger      kangaroo     walrus&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;tiger     kangaroo    kangaroo&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;tick       kangaroo      tiger&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;kangaroo      walrus      tick&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;walrus      walrus      walrus&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;tick        walrus       tiger&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;tick         tick        tiger&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;walrus       kangaroo      dog&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;NIL&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;3つの文字列を30文字分の幅に中央揃えで配置する&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;repeat&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;
      &lt;span class=&#34;nv&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;format&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;~30:@&amp;lt;~a~;~a~;~a~&amp;gt;~%&amp;#34;&lt;/span&gt;
                 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;random-animal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;random-animal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;random-animal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;;     tiger     tick    dog    &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;     tiger    dog    tiger    &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;    tiger    dog    walrus    &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;    dog    kangaroo    tick   &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;   kangaroo   tiger   tiger   &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;    walrus    tick   walrus   &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;    tick    walrus    tick    &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;     tiger    tick    tick    &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;    dog    tick    kangaroo   &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;   walrus   walrus  kangaroo  &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;NIL&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;11-6-制御シーケンス-繰り返し&#34;&gt;11.6 制御シーケンス: 繰り返し&lt;/h2&gt;

&lt;p&gt;formatではループを実現する制御シーケンスがある。&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;~{, ~}&lt;/dt&gt;
  &lt;dd&gt;~{と~}で囲まれた制御文字列とリストを与えると、formatはリスト中のデータをループで処理する。&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;以下にループの例を示す。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defparameter&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*animals*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;repeat&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;collect&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;random-animal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;span class=&#34;vg&#34;&gt;*animals*&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;(&amp;#34;tiger&amp;#34; &amp;#34;dog&amp;#34; &amp;#34;tiger&amp;#34; &amp;#34;tick&amp;#34; &amp;#34;walrus&amp;#34; &amp;#34;walrus&amp;#34; &amp;#34;tiger&amp;#34; &amp;#34;tiger&amp;#34; &amp;#34;dog&amp;#34; &amp;#34;tiger&amp;#34;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;;; リスト中の文字列を1ループにつき1つずつ取り出して整形する&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;format&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;~{I see a ~a!~%~}&amp;#34;&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*animals*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;I see a tiger!&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;I see a dog!&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;I see a tiger!&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;I see a tick!&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;I see a walrus!&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;I see a walrus!&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;I see a tiger!&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;I see a tiger!&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;I see a dog!&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;I see a tiger!&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;NIL&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;;; リスト中の文字列を1ループにつき2つずつ取り出して整形する&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;format&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;~{I see a ~a... or was it a ~a?~%~}&amp;#34;&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*animals*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;I see a tiger... or was it a dog?&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;I see a tiger... or was it a tick?&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;I see a walrus... or was it a walrus?&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;I see a tiger... or was it a tiger?&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;I see a dog... or was it a tiger?&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;NIL&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;11-7-綺麗な表を作るクレージーな整形トリック&#34;&gt;11.7 綺麗な表を作るクレージーな整形トリック&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;format&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;|~{~&amp;lt;|~%|~,33:;~2d ~&amp;gt;~}|&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;below&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;collect&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;| 0  1  2  3  4  5  6  7  8  9 |&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;|10 11 12 13 14 15 16 17 18 19 |&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;|20 21 22 23 24 25 26 27 28 29 |&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;|30 31 32 33 34 35 36 37 38 39 |&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;|40 41 42 43 44 45 46 47 48 49 |&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;|50 51 52 53 54 55 56 57 58 59 |&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;|60 61 62 63 64 65 66 67 68 69 |&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;|70 71 72 73 74 75 76 77 78 79 |&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;|80 81 82 83 84 85 86 87 88 89 |&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;|90 91 92 93 94 95 96 97 98 99 |&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;NIL&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上表は、以下の制御シーケンスによって表示される。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;制御シーケンス&lt;/th&gt;
&lt;th&gt;制御内容&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;\|&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;最初に&lt;code&gt;\|&lt;/code&gt;を表示する&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;~{&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ループ制御を始める&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;~&amp;lt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1行ごとの文字揃えを始める&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;\|~%\|&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;\|&lt;/code&gt;改行&lt;code&gt;\|&lt;/code&gt;を表示する&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;~,33:;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;33文字分出力したらこの制御シーケンスに先立つ文字列を表示する&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;~2d&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2桁の数値とを表示する&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;~&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1行ごとの文字揃えを終わる&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;~}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ループ制御を終わる&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;\|&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;最後に&lt;code&gt;\|&lt;/code&gt;を表示する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
      
    </item>
    
    <item>
      <title>書籍 Land of Lisp 12章 ストリーム</title>
      <link>https://otaon.github.io/web/ja-jp/2019/03/07/%E6%9B%B8%E7%B1%8D-land-of-lisp-12%E7%AB%A0-%E3%82%B9%E3%83%88%E3%83%AA%E3%83%BC%E3%83%A0/</link>
      <pubDate>Thu, 07 Mar 2019 00:00:00 +0900</pubDate>
      
      <guid>https://otaon.github.io/web/ja-jp/2019/03/07/%E6%9B%B8%E7%B1%8D-land-of-lisp-12%E7%AB%A0-%E3%82%B9%E3%83%88%E3%83%AA%E3%83%BC%E3%83%A0/</guid>
      
        <description>

&lt;h2 id=&#34;t-o-c&#34;&gt;T.O.C.&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#121-ストリームの種類&#34;&gt;12.1 ストリームの種類&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#122-ファイルの読み書き&#34;&gt;12.2 ファイルの読み書き&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#123-ソケットを使う&#34;&gt;12.3 ソケットを使う&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#124-異端児の文字列ストリーム&#34;&gt;12.4 異端児の文字列ストリーム&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;REPLによる入出力、ディスク上のファイルの読み書き、LANやインターネットの通信において、&lt;br /&gt;
Common Lispでは &lt;strong&gt;ストリーム&lt;/strong&gt; を使用する。&lt;/p&gt;

&lt;p&gt;本ドキュメントでは、ストリームの種類、使い方を説明する。&lt;/p&gt;

&lt;h2 id=&#34;12-1-ストリームの種類&#34;&gt;12.1 ストリームの種類&lt;/h2&gt;

&lt;p&gt;Common Lispでは、リソースの種類に合わせて、いくつかのストリーム型が用意されている。&lt;br /&gt;
また、ストリームの向きにも種類がある。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;リソースにデータを書き出す(write)&lt;/li&gt;
&lt;li&gt;リソースからデータを読み込む(read)&lt;/li&gt;
&lt;li&gt;リソースとデータを読み書きする(read/write)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;リソースの種類による分類&#34;&gt;リソースの種類による分類&lt;/h3&gt;

&lt;p&gt;リソースの種類に応じて、ストリームの型を分類する。&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;コンソールストリーム&lt;/dt&gt;
  &lt;dd&gt;標準入出力。&lt;/br&gt;REPLとやりよりするのに使っていたストリーム。&lt;/dd&gt;
  &lt;dt&gt;ファイルストリーム&lt;/dt&gt;
  &lt;dd&gt;ディスク上のファイルの読み書きに使うストリーム。&lt;/dd&gt;
  &lt;dt&gt;ソケットストリーム&lt;/dt&gt;
  &lt;dd&gt;ネットワークを通じて他のコンピュータと通信するのに使うストリーム。&lt;/dd&gt;
  &lt;dt&gt;文字列ストリーム&lt;/dt&gt;
  &lt;dd&gt;Lispの文字列からテキストを読み出したり、文字列へと書き込んだりするストリーム。&lt;/dd&gt;
&lt;/dl&gt;

&lt;h3 id=&#34;ストリームの向きによる分類&#34;&gt;ストリームの向きによる分類&lt;/h3&gt;

&lt;p&gt;リソースに対するストリームの向きによってストリームを分類する。&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;出力ストリーム&lt;/dt&gt;
  &lt;dd&gt;リソースにデータを書き出すストリーム。&lt;/dd&gt;
  &lt;dt&gt;入力ストリーム&lt;/dt&gt;
  &lt;dd&gt;リソースからデータを読み込むストリーム。&lt;/dd&gt;
&lt;/dl&gt;

&lt;h4 id=&#34;出力ストリーム&#34;&gt;出力ストリーム&lt;/h4&gt;

&lt;p&gt;出力ストリームは、REPLに文字を表示したり、ファイルに書き出したり、ソケットを通じてデータを送ったりするのに使われる。&lt;br /&gt;
出力ストリームの最も基本的な操作は下記の2つのみである。&lt;br /&gt;
他のLispのデータ型に比べると、できる操作が限られているが、むしろこれによりストリームが色々と応用できる。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;基本操作&lt;/th&gt;
&lt;th&gt;コマンド&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;出力ストリームか否かを調べる&lt;/td&gt;
&lt;td&gt;&lt;code&gt;output-stream-p&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;データをストリームへと送る&lt;/td&gt;
&lt;td&gt;&lt;code&gt;write-char&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&#34;出力ストリームか否かを調べる&#34;&gt;出力ストリームか否かを調べる&lt;/h5&gt;

&lt;p&gt;REPLには&lt;code&gt;*standard-output*&lt;/code&gt;と呼ばれる出力ストリームが結び付けられている。&lt;br /&gt;
次のコードにより、これが有効な出力ストリームか否かを調べることができる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;output-stream&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*standard-output*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;T&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;データをストリームへと送る&#34;&gt;データをストリームへと送る&lt;/h5&gt;

&lt;p&gt;Lispの文字は&lt;code&gt;write-char&lt;/code&gt;を使って出力ストリームに送ることができる。&lt;br /&gt;
文字&lt;code&gt;#\x&lt;/code&gt;を&lt;code&gt;*standard-output*&lt;/code&gt;ストリームに送り出すには、次のコードを実行する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;write-char&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;#\x&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*standard-output*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;xNIL&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このコードは、&lt;code&gt;x&lt;/code&gt;を標準出力に書き出す。&lt;br /&gt;
この関数の戻り値&lt;code&gt;nil&lt;/code&gt;が&lt;code&gt;x&lt;/code&gt;のすぐ次に表示されているが、これは単なる&lt;code&gt;write-char&lt;/code&gt;の戻り値。&lt;/p&gt;

&lt;p&gt;他にも、バイナリデータなどを操作することもできる。&lt;/p&gt;

&lt;h4 id=&#34;入力ストリーム&#34;&gt;入力ストリーム&lt;/h4&gt;

&lt;p&gt;入力ストリームは、データを読み出すために使う。&lt;br /&gt;
出力ストリームと同様、入力ストリームに対して行える操作も限られている。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;基本操作&lt;/th&gt;
&lt;th&gt;コマンド&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;入力ストリームか否かを調べる&lt;/td&gt;
&lt;td&gt;&lt;code&gt;input-stream-p&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ストリームからデータを1つ取り出す&lt;/td&gt;
&lt;td&gt;&lt;code&gt;read-char&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&#34;入力ストリームか否かを調べる&#34;&gt;入力ストリームか否かを調べる&lt;/h5&gt;

&lt;p&gt;REPLには&lt;code&gt;*standard-input*&lt;/code&gt;と呼ばれる入力ストリームが結び付けられている。&lt;br /&gt;
次のコードにより、これが有効な入力ストリームか否かを調べることができる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;input-stream-p&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*standard-input*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;T&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;入力ストリームから1文字取り出す&#34;&gt;入力ストリームから1文字取り出す&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;read-char&lt;/code&gt;を使って入力ストリームから1文字取り出すことができる。&lt;br /&gt;
次のコードでは、REPLから読み込んでいるため、&lt;code&gt;[enter]&lt;/code&gt;キーを押すまでデータが標準入力ストリームに届かないことに注意。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;read-char&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*standard-input*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;123[enter]&lt;/span&gt;
&lt;span class=&#34;sc&#34;&gt;#\1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;[enter]&lt;/code&gt;を押すと、入力ストリームの先頭にある&lt;code&gt;#\1&lt;/code&gt;が&lt;code&gt;read-char&lt;/code&gt;により返される。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;ストリームに使える他のコマンド&lt;/em&gt;&lt;br /&gt;
&lt;code&gt;write-char&lt;/code&gt;や&lt;code&gt;read-char&lt;/code&gt;以外にも、Common Lispにはストリームを扱うコマンドが多く備わっている。&lt;br /&gt;
例えば、&lt;code&gt;print&lt;/code&gt;コマンドに&lt;code&gt;*standart-output*&lt;/code&gt;を渡して出力先を指定することができる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;foo&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*standard-output*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;FOO&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;12-2-ファイルの読み書き&#34;&gt;12.2 ファイルの読み書き&lt;/h2&gt;

&lt;p&gt;ストリームを使うことで、ファイルの読み書きもできる。&lt;br /&gt;
Common Lispでファイルストリームを作成するのに良い方法としては、&lt;code&gt;with-open-file&lt;/code&gt;コマンドを使うことである。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;with-open-file&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;my-stream&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;data.txt&amp;#34;&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:direction&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:output&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;my data&amp;#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;my-stream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この例では、出力ストリームを作って&lt;code&gt;my-stream&lt;/code&gt;という変数に格納している。&lt;br /&gt;
このストリームは&lt;code&gt;with-open-file&lt;/code&gt;の閉じ括弧まで有効である。&lt;br /&gt;
そして、このストリームに送られたデータは、ディスク上の&amp;rdquo;data.txt&amp;rdquo;というファイルに書き出される。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;with-open-file&lt;/code&gt;の&lt;code&gt;:direction&lt;/code&gt;に&lt;code&gt;:output&lt;/code&gt;を渡すと出力ストリームが作られる。&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;&lt;code&gt;with-open-file&lt;/code&gt;の&lt;code&gt;:direction&lt;/code&gt;に&lt;code&gt;:input&lt;/code&gt;を渡すと入力ストリームが作られる。&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;with-open-file&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;my-stream&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;data.txt&amp;#34;&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:direction&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;read&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;my-stream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;もう少し複雑な例を次に示す。&lt;/p&gt;

&lt;h3 id=&#34;リストをファイルに読み書きする&#34;&gt;リストをファイルに読み書きする&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;animal-noises&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;dog&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;woof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                         &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cat&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;meow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;with-open-file&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;my-stream&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;animal-noises.txt&amp;#34;&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:direction&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:output&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;animal-noises&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;my-stream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;DOG&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;WOOF&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;CAT&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;MEOW&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;with-open-file&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;my-stream&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;animal-noises.txt&amp;#34;&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:direction&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
     &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;read&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;my-stream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;DOG&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;WOOF&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;CAT&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;MEOW&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;ファイルが既に存在するか否かをチェックする&#34;&gt;ファイルが既に存在するか否かをチェックする&lt;/h3&gt;

&lt;p&gt;作ろうとしたファイルが既に存在した場合にどうするかを指定するには&lt;code&gt;:if-exists&lt;/code&gt;キーワードを指定する。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ファイルが既に存在した場合はエラーとする&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;with-open-file&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;my-stream&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;data.txt&amp;#34;&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:direction&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:output&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:if-exists&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;my data&amp;#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;my-stream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;vg&#34;&gt;***&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;OPEN:&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;l&#34;&gt;#P&amp;#34;/home/user/data.txt&amp;#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;already&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;exists&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;ファイルが既に存在した場合でも強制的に上書きする&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;with-open-file&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;my-stream&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;data.txt&amp;#34;&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:direction&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:output&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:if-exists&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:supersede&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;my data&amp;#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;my-stream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;&amp;#34;my data&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実はCommon Lispにもファイルをオープンしたりクローズする低レベルコマンドはある。&lt;br /&gt;
&lt;code&gt;with-open-file&lt;/code&gt;はそれらを隠蔽している。&lt;br /&gt;
もしも&lt;code&gt;with-open-file&lt;/code&gt;中でエラーが発生してもファイルを確実にクローズして、リソースを開放してくれる。&lt;/p&gt;

&lt;h2 id=&#34;12-3-ソケットを使う&#34;&gt;12.3 ソケットを使う&lt;/h2&gt;

&lt;p&gt;標準的なネットワークにあるコンピュータと通信するためには、ソケットを用意する必要がある。&lt;br /&gt;
ANSI Common Lispの仕様化にソケットの標準化は間に合わなかったため、標準の方法は存在しない。&lt;br /&gt;
ここでは、CLISPののソケットコマンドについて説明する。&lt;/p&gt;

&lt;h3 id=&#34;ソケットアドレス&#34;&gt;ソケットアドレス&lt;/h3&gt;

&lt;p&gt;ネットワーク上のソケットには &lt;strong&gt;ソケットアドレス&lt;/strong&gt; が割り当てられている。&lt;br /&gt;
ソケットアドレスは、次の2つの要素からなる。&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;IPアドレス&lt;/dt&gt;
  &lt;dd&gt;ネットワーク上でコンピュータ（厳密にはNIC）を一意に指定する番号&lt;/dd&gt;
  &lt;dt&gt;ポート番号&lt;/dt&gt;
  &lt;dd&gt;プログラムが、同じコンピュータ上の他のプログラムと区別するために使用する番号&lt;/dd&gt;
&lt;/dl&gt;

&lt;h3 id=&#34;コネクション&#34;&gt;コネクション&lt;/h3&gt;

&lt;p&gt;2つのプログラム間でソケットを使ってメッセージをやりとりするには、&lt;strong&gt;コネクション&lt;/strong&gt; を初期化する必要がある。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;一方のプログラムがソケットを作ってそれをListenすることで、もう一方のプログラムが通信を始めるのを待つ&lt;br /&gt;
(ソケットをListenするプログラムはサーバと呼ばれている)&lt;/li&gt;
&lt;li&gt;もう一方のプログラムはクライアントと呼ばれ、自分自身が使うソケットを作った後、サーバとコネクションを確立する&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;ソケット上でメッセージを送る&#34;&gt;ソケット上でメッセージを送る&lt;/h3&gt;

&lt;p&gt;まず、2つのCLISPを立ち上げる。&lt;br /&gt;
一方をクライアント、もう一方をサーバとする。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; 必ずCLISPを使用すること。&lt;/p&gt;

&lt;p&gt;サーバ側では、&lt;code&gt;socket-server&lt;/code&gt;を呼ぶことで、指定したポートの使用権を得る。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defparameter&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;my-socket&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;socket-server&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4321&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;; ON THE SERVER&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;MY-SOCKET&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このコマンドでは、オペレーティングシステムからポート4321を得て、ソケットをそのポートに束縛する。&lt;br /&gt;
作られたソケットは変数&lt;code&gt;my-socket&lt;/code&gt;に格納され、この後の例で使えるようになる。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; このコマンドは危険である。&lt;br /&gt;
なぜなら、ソケットを使用し終えた後、自分でOSに返却する必要がある。&lt;br /&gt;
さもなくば、他の誰もソケットに結び付けられたポートを使えなくなる。&lt;br /&gt;
もしも何か手違いがありポートに束縛したソケットをおかしくしてしまったら、新しくソケットを作るときは別のポート番号を選ぶか、コンピュータを再起動しなければならないかもしれない。&lt;br /&gt;
（Common Lispの例外システムにより、この問題を回避することはできる。）&lt;br /&gt;
（CLISPプロセスを一度終了すれば、いずれOSはこのポートを再利用するが、ポートの状態によっては再利用できるようになるまでしばらく時間がかかるかもしれない。）&lt;/p&gt;

&lt;p&gt;次に、サーバ側で、このソケットに接続したクライアントとの通信を扱うストリームを作る。&lt;br /&gt;
&lt;code&gt;socket-accept&lt;/code&gt;を実行すると、サーバ側はREPLプロンプトに戻ってこず、クライアントが接続してくるまでlisten中となる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defparameter&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;my-stream&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;socket-accept&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;my-socket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; ON THE SERVER&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;MY-STREAM&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次は、クライアント側で&lt;code&gt;socket-connect&lt;/code&gt;コマンドを使ってサーバのソケットに接続する。&lt;br /&gt;
このコマンドを実行したら、すぐにサーバ側の&lt;code&gt;socket-accept&lt;/code&gt;関数が戻ってきて、&lt;code&gt;my-stream&lt;/code&gt;変数がセットされる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defparameter&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;my-stream&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;socket-connect&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4321&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;127.0.0.1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; ON THE CLIENT&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;MY-STREAM&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; IPアドレス&lt;code&gt;127.0.0.1&lt;/code&gt;は常に現在のコンピュータ自身を指している特殊なIPアドレスである。&lt;/p&gt;

&lt;p&gt;ここでCLISPによって作成されたこれらのストリームは、 &lt;strong&gt;双方向ストリーム&lt;/strong&gt; である。&lt;br /&gt;
つまり、入力ストリームとしても出力ストリームとしても振る舞い、通信するためにどちらのストリーム用のコマンドも使用できる。&lt;/p&gt;

&lt;p&gt;クライアントからサーバに気軽な挨拶を送ってみる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Yo Server!&amp;#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;my-stream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;&amp;#34;Yo Server!&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;そしてサーバ側では次のコマンドを実行する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;read&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;my-stream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;&amp;#34;Yo Server!&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次は、サーバ側で次のようにタイプする。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;What up, Client!&amp;#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;my-stream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;&amp;#34;What up, Client!&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;クライアント側に戻って、これを実行する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;read&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;my-stream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;&amp;#34;What up, Client!&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一連の手順を終えると、サーバ側、クライアント側のプロンプトには次のようになっている。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;サーバ側&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defparameter&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;my-socket&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;socket-server&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4321&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;MY-SOCKET&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defparameter&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;my-stream&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;socket-accept&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;my-socket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;MY-STREAM&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;read&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;my-stream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;&amp;#34;Yo Server!&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;What up, Client!&amp;#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;my-stream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;&amp;#34;What up, Client!&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;クライアント側&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defparameter&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;my-stream&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;socket-connect&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4321&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;127.0.0.1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; ON THE CLIENT&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;MY-STREAM&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Yo Server!&amp;#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;my-stream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;&amp;#34;Yo Server!&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;read&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;my-stream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;&amp;#34;What up, Client!&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;今ソケットで送信したのは文字列だったが、他にも標準のLispデータ構造なら何でも全く同じようにやりとりできる。&lt;/p&gt;

&lt;h3 id=&#34;遊んだ後はお片付け-ストリームを閉じる&#34;&gt;遊んだ後はお片付け（ストリームを閉じる）&lt;/h3&gt;

&lt;p&gt;以上の例で作成したリソースをきちんと開放しておくことは重要である。&lt;br /&gt;
次のコマンドをクライアントとサーバ双方で実行して、両端のストリームを閉じる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;close&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;my-stream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;T&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次に、サーバ側で&lt;code&gt;socket-server-close&lt;/code&gt;を実行し、ポートを返却してソケットを開放する。&lt;br /&gt;
さもなくば、リブートするまでポート4321が使えなくなる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;socket-server-close&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;my-socket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;NIL&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;12-4-異端児の文字列ストリーム&#34;&gt;12.4 異端児の文字列ストリーム&lt;/h2&gt;

&lt;p&gt;大抵のストリームは、Lispプログラムが &lt;em&gt;外の世界&lt;/em&gt; とやりとりするために使うものである。&lt;br /&gt;
しかし、文字列ストリームは例外で、これは単に文字列をストリームのように見せるだけのものである。&lt;br /&gt;
他のストリームが外部のリソースを読み書きするのと同じ方法で、文字列ストリームは文字列を読み書きできる。&lt;/p&gt;

&lt;p&gt;文字列ストリームは&lt;code&gt;make-string-output-stream&lt;/code&gt;と、&lt;code&gt;make-string-input-stream&lt;/code&gt;で作ることができる。&lt;br /&gt;
次の例では、&lt;code&gt;make-string-output-stream&lt;/code&gt;を使っている。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defparameter&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;make-string-output-stream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;princ&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;This will go into foo. &amp;#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;princ&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;This will also go into foo. &amp;#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;get-output-stream-string&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;&amp;#34;This will go into foo. This will also go into foo.&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Lispは文字列を直接操作できるのに、なぜこのような機能が必要なのか？&lt;br /&gt;
しかし、文字列ストリームには利点がある。これらの利点を次に示す。&lt;/p&gt;

&lt;h3 id=&#34;関数にストリームを渡す&#34;&gt;関数にストリームを渡す&lt;/h3&gt;

&lt;p&gt;ストリームを引数に期待している関数に対して、文字列ストリームを渡すことができる。&lt;br /&gt;
これは、ファイルやソケットを読み書きする関数をデバッグする際にとても役立つ。&lt;br /&gt;
なぜなら、本物のファイルやソケットの代わりに文字列を入出力データとして与えたり受け取ったりできるからである。&lt;/p&gt;

&lt;p&gt;例えば、&lt;code&gt;write-to-log&lt;/code&gt;という関数があったとする。&lt;br /&gt;
普通はログ情報はファイルストリームへと送って、ファイルにセーブされるようにするだろう。&lt;br /&gt;
しかし、この関数をデバッグする際には、代わりに文字列ストリームを渡してやれば出力された文字列を読むことで動作確認できる。&lt;br /&gt;
&lt;code&gt;write-to-log&lt;/code&gt;が常にファイルに出力されるようにハードコードしてしまうと、こういった柔軟性がなくなってしまう。&lt;br /&gt;
&lt;strong&gt;関数を書くときは、外部リソースを直接リソースを直接アクセスするのではなく、可能な限りストリームを使うように書いておく方が良い。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;長い文字列を作る&#34;&gt;長い文字列を作る&lt;/h3&gt;

&lt;p&gt;非常に長い文字列を作る場合、文字列ストリームを使う方が効率の良いコードになる。&lt;br /&gt;
たくさんの文字列を1つずつ繋いでいくのは非常に効率が悪くなる。これは、文字列を繋ぐ度に文字列用のメモリをアロケートするからだ。&lt;br /&gt;
&lt;strong&gt;NOTE&lt;/strong&gt; このため、多くのプログラミング言語では &lt;strong&gt;文字列ビルダ&lt;/strong&gt; と呼ばれる機能を用意して、このオーバヘッドを避けている(Javaの&lt;code&gt;StringBuilder&lt;/code&gt;など)。&lt;/p&gt;

&lt;h3 id=&#34;コードの読みやすさとデバッグ&#34;&gt;コードの読みやすさとデバッグ&lt;/h3&gt;

&lt;p&gt;文字列ストリームを、特に&lt;code&gt;with-output-to-string&lt;/code&gt;と一緒に使うと、読みやすくデバッグしやすいコードが書ける。&lt;br /&gt;
ここで、&lt;code&gt;with-output-to-string&lt;/code&gt;を使ったコードを次に示す。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;with-output-to-string&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;*standard-output*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;princ&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;the sum of &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;princ&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;princ&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34; and &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;princ&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;princ&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34; is &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;princ&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;&amp;#34;the sum of 5 and 2 is 7&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;with-output-to-string&lt;/code&gt;マクロは、コンソール、REPL、他のストリームに向かうはずだった出力を横取りして、それを文字列として格納して返す。&lt;br /&gt;
上の例では&lt;code&gt;with-output-to-string&lt;/code&gt;の本体内で&lt;code&gt;princ&lt;/code&gt;により出力されるデータが自動的に文字列ストリームへと向けられる。&lt;br /&gt;
&lt;code&gt;with-output-to-string&lt;/code&gt;の本体の実行が終わると、文字列ストリームに蓄積された出力が文字列として返される。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;with-output-to-string&lt;/code&gt;は、また、長く複雑な文字列を組み立てるときにも使える。&lt;br /&gt;
本体中で文字列の部分部分を&lt;code&gt;print&lt;/code&gt;していって、最後に集められた出力を文字列として得られる。&lt;br /&gt;
文字列の断片を&lt;code&gt;concatenate&lt;/code&gt;していくよりも読みやすく効率の良いコードになる。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; &lt;code&gt;with-output-to-string&lt;/code&gt;は関数プログラミングの精神とは逆行している。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>書籍 Land of Lisp 13章 Webサーバを作ろう！</title>
      <link>https://otaon.github.io/web/ja-jp/2019/03/07/%E6%9B%B8%E7%B1%8D-land-of-lisp-13%E7%AB%A0-web%E3%82%B5%E3%83%BC%E3%83%90%E3%82%92%E4%BD%9C%E3%82%8D%E3%81%86/</link>
      <pubDate>Thu, 07 Mar 2019 00:00:00 +0900</pubDate>
      
      <guid>https://otaon.github.io/web/ja-jp/2019/03/07/%E6%9B%B8%E7%B1%8D-land-of-lisp-13%E7%AB%A0-web%E3%82%B5%E3%83%BC%E3%83%90%E3%82%92%E4%BD%9C%E3%82%8D%E3%81%86/</guid>
      
        <description>

&lt;h2 id=&#34;t-o-c&#34;&gt;T.O.C.&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#131-common-lispでのエラー処理&#34;&gt;13.1 Common Lispでのエラー処理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#132-ゼロからwebサーバを書く&#34;&gt;13.2 ゼロからWebサーバを書く&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#133-動的なwebサイトを作る&#34;&gt;13.3 動的なWebサイトを作る&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;13-1-common-lispでのエラー処理&#34;&gt;13.1 Common Lispでのエラー処理&lt;/h2&gt;

&lt;p&gt;Webサーバのように外部とやりとりする場合、予想外の自体が起きる可能性がある。&lt;br /&gt;
Common Lispにはコード内で例外を扱う機能が豊富に備わっている。&lt;br /&gt;
Common Lispの例外システムは柔軟である。&lt;/p&gt;

&lt;h3 id=&#34;コンディションを通知する-error&#34;&gt;コンディションを通知する&lt;code&gt;(error)&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;関数内で何か問題が起きた時、Lisp関数はLispの実行環境に問題が発生したことを伝える。
この手段が &lt;strong&gt;コンディションを通知する&lt;/strong&gt; ことである。
(コンディションは、他の言語では例外(exception)と呼ばれるオブジェクトと同じようなもの)&lt;/p&gt;

&lt;p&gt;自分で書いたコードで、どうしても処理を続けられない場合が、コンディションを通知するときである。&lt;br /&gt;
自分の書くコードから直接コンディションを通知するには、&lt;code&gt;error&lt;/code&gt;コマンドを使う。
&lt;code&gt;error&lt;/code&gt;コマンドは、他の場所でエラーを横取りしていなければ、Lispプログラムの実行を中断する。&lt;/p&gt;

&lt;p&gt;コンディションを通知して、エラーの説明メッセージとして&amp;rdquo;foo&amp;rdquo;を表示してみる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;vg&#34;&gt;***&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;foo&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;The&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;following&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;restarts&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;are&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;available:&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;ABORT&lt;/span&gt;       &lt;span class=&#34;nv&#34;&gt;R1:&lt;/span&gt;      &lt;span class=&#34;nv&#34;&gt;Abort&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;main&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;loop&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上の例の通り、コンディションの通知によってLispシステムはプログラムを中断し、メッセージ&amp;rdquo;foo&amp;rdquo;を出力した後、REPLにエラープロンプトを表示する。
(CLISPでは、この時点で&lt;code&gt;:a&lt;/code&gt;をタイプすればプログラムの実行を放棄して通常のREPLに戻る。)&lt;/p&gt;

&lt;h3 id=&#34;自前のコンディションを作る-define-condition&#34;&gt;自前のコンディションを作る&lt;code&gt;(define-condition)&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;最初の例では、コンディションを説明する文字列を&lt;code&gt;error&lt;/code&gt;関数に渡した。
しかし、単にテキストでエラーメッセージを表示するだけでは、どういったコンディションかを判断するのは難しい。
そこで、Common Lispでは、コンディションの型を定義して、その型に応じて異なる処理をすることができる。&lt;/p&gt;

&lt;p&gt;最初に次の例のように&lt;code&gt;define-condition&lt;/code&gt;でコンディションの型を定義する。
ここではコンディションを&lt;code&gt;foo&lt;/code&gt;と名付けた。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;define-condition&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:report&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;condition&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;stream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
               &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;princ&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Stop FOOing around, numbskull!&amp;#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;stream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;FOO&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;定義したコンディションが通知されたときにどう表示されるかを制御する、専用の関数を定義できる。&lt;br /&gt;
上の例では、&lt;code&gt;lambda&lt;/code&gt;を使ってその関数を定義した。
&lt;code&gt;lambda&lt;/code&gt;関数の中では、専用のエラーメッセージを表示するようにした。&lt;/p&gt;

&lt;p&gt;このコンディションを通知してみる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;[5]&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;vg&#34;&gt;***&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;Stop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;FOOing&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;around,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;numbskull!&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;The&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;following&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;restarts&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;are&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;available:&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;ABORT&lt;/span&gt;          &lt;span class=&#34;ss&#34;&gt;:R1&lt;/span&gt;      &lt;span class=&#34;nv&#34;&gt;Abort&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;main&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;loop&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;Break&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;[6]&amp;gt;&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:a&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;[7]&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この通り、専用のメッセージが表示された。この方法を使えば、コンディションの型に応じてより分かりやすいメッセージを表示できる。&lt;/p&gt;

&lt;h3 id=&#34;コンディションを横取りする-handler-case&#34;&gt;コンディションを横取りする&lt;code&gt;(handler-case)&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;define-condition&lt;/code&gt;でコンディション型を定義したときに名前（上の例では&lt;code&gt;foo&lt;/code&gt;）を与えた。
この名前を使えば、この型のコンディションが通知されたときに、プログラムを中断する代わりに実行する処理を、プログラムの上位層で書いておくことができる。
そのためのコマンドが&lt;code&gt;handler-case&lt;/code&gt;である。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;handler-case&lt;/code&gt;コマンドの第1引数には、横取りしたいコンディションを通知するかもしれないコードを与える。（下の例では&lt;code&gt;bad-function&lt;/code&gt;）&lt;br /&gt;
&lt;code&gt;handler-case&lt;/code&gt;の残りの部分には、特定のコンディションが通知されたときに何をすべきかを列記する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;bad-function&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
     &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;BAD-FUNCTION&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;handler-case&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;bad-function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
     &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;somebody signaled foo!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
     &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;bar&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;somebody signaled bar!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;&amp;#34;somebody signaled foo!&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この&lt;code&gt;handler-case&lt;/code&gt;が呼び出されると&lt;code&gt;bad-function&lt;/code&gt;が呼び出され、その中の&lt;code&gt;(error &#39;foo)&lt;/code&gt;によって&lt;code&gt;foo&lt;/code&gt;コンディションが通知される。&lt;br /&gt;
もし&lt;code&gt;handler-case&lt;/code&gt;がなかったら、この時点でプログラムが中断されてREPLにエラープロンプトが表示されることになっていたが、
この例では、&lt;code&gt;handler-case&lt;/code&gt;が&lt;code&gt;foo&lt;/code&gt;コンディションを横取りして、プログラムは中断されることなく、&lt;code&gt;&amp;quot;somebody signaled foo!&amp;quot;&lt;/code&gt;という結果が返る。&lt;/p&gt;

&lt;h3 id=&#34;予想外のコンディションからリソースを保護する-unwind-protect&#34;&gt;予想外のコンディションからリソースを保護する&lt;code&gt;(unwind-protect)&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;予想外の例外が発生した場合、プログラムがクラッシュしたり、下手すると外部のリソースを壊してしまう。&lt;br /&gt;
例えば、ファイルやソケットストリームに何かを書いている最中に例外が発生したと想定する。
この時、ストリームを正しくクローズしてファイルハンドルやソケットを解放してやる必要がある。
リソースが正しい手順でクリーンアップされないと、そのリソースをユーザが再び使いたい場合はコンピュータをリブートする必要がある、という場合もある。&lt;/p&gt;

&lt;p&gt;このような「想定外のコンディションからリソースを保護する」ために使うのが、&lt;code&gt;unwind-protect&lt;/code&gt;コマンドである。
このコマンドは、Common Lispコンパイラに「このコードだけは絶対に実行しろ」と伝えるものである。&lt;br /&gt;
下記の通り、&lt;code&gt;unwind-protect&lt;/code&gt;の中でゼロ除算を行った場合、コンディションを通知する。&lt;br /&gt;
しかし、エラープロンプトからCLISPに実行の放棄を指示した後、重要なメッセージが表示されていることがわかる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;unwind-protect&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;; division by zero&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;princ&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;I need to say &amp;#39;flubyduby&amp;#39; matter what&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;vg&#34;&gt;***&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;/:&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;division&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;by&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;zero&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;The&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;following&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;restarts&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;are&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;available:&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;ABORT&lt;/span&gt;          &lt;span class=&#34;ss&#34;&gt;:R1&lt;/span&gt;      &lt;span class=&#34;nv&#34;&gt;Abort&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;main&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;loop&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;Break&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;[8]&amp;gt;&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:r1&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;I&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;need&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;say&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;flubyduby&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;matter&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;what&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;[9]&amp;gt;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Common Lispの&lt;code&gt;with-&lt;/code&gt;マクロを使っている場合、そのマクロが内部で&lt;code&gt;unwind-protect&lt;/code&gt;を呼んでくれることが多いため、直接&lt;code&gt;unwind-protect&lt;/code&gt;を使用する場面はあまりない。
（16章では&lt;code&gt;unwind-protect&lt;/code&gt;のようなマクロを実際に作成する）&lt;/p&gt;

&lt;h2 id=&#34;13-2-ゼロからwebサーバを書く&#34;&gt;13.2 ゼロからWebサーバを書く&lt;/h2&gt;

&lt;h3 id=&#34;webサーバの仕組み&#34;&gt;Webサーバの仕組み&lt;/h3&gt;

&lt;p&gt;HTTP(Hypertext Transfer Protocol)は、Webページをやりとりするために使われるインターネットのプロトコルである。
確立されたソケットコネクションを通じて、TCP/IPの上でページをやりとりするを定義している。
クライアント上で走っているプログラム(Webブラウザなど)が定められた形式に沿ったリクエストを送ると、サーバは要求されたページを作り出して、ソケットストリームを通じてレスポンスを返す。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; このWebサーバはRon Garretのhttp.lispを元にしている。&lt;/p&gt;

&lt;p&gt;例えば、ブラウザがクライアントとして、&lt;code&gt;lolcats.html&lt;/code&gt;というページを要求したとする。
リクエストメッセージは次のような内容になっているはずである。
これらのサーバに送られるメッセージ全体は &lt;strong&gt;リクエストヘッダ&lt;/strong&gt; と呼ばれる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span class=&#34;nf&#34;&gt;GET&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;/lolcats.html&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;HTTP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1.1&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Host&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l&#34;&gt;localhost:8080&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;User-Agent&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l&#34;&gt;Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.5)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Accept&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l&#34;&gt;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Accept-Language&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l&#34;&gt;en-us,en;q=0.5&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Accept-Encoding&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l&#34;&gt;gzip,deflate&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Accept-Charset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l&#34;&gt;ISO-8859-1,utf-8;q=0.7,*;q=0.7&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Keep-Alive&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l&#34;&gt;300&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Connection&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l&#34;&gt;keep-alive&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最初の行は &lt;strong&gt;リクエストライン&lt;/strong&gt; と呼ばれる。
ここには、リクエストの種類(GET)と、要求するページの名前(lolcats.html)が含まれている。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span class=&#34;nf&#34;&gt;GET&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;/lolcats.html&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;HTTP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1.1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2行目以降は、 &lt;strong&gt;HTTPヘッダフィールド&lt;/strong&gt; と呼ばれる。
行頭からコロンまでの箇所にヘッダ、コロンの右側に内容がある。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span class=&#34;err&#34;&gt;Host: localhost:8080
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;User-Agent: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.5)
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;Accept-Language: en-us,en;q=0.5
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;Accept-Encoding: gzip,deflate
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;Keep-Alive: 300
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;Connection: keep-alive&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;リクエストヘッダに続いて、 &lt;strong&gt;リクエストボディ&lt;/strong&gt; と呼ばれる部分を使って他の情報を送ることもできる。&lt;/p&gt;

&lt;p&gt;サーバは、クライアントからリクエストを受け取ったら、 &lt;strong&gt;レスポンスヘッダ&lt;/strong&gt; (Webブラウザは受け取ったドキュメントに関する追加情報)と &lt;strong&gt;レスポンスボディ&lt;/strong&gt; (Webページを表現するHTMLドキュメント)を返信する。
ただし、今回作っているWebサーバでは、ヘッダを生成せずにただボディだけを返す。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;レスポンスボディ&lt;/strong&gt; の一例を示す。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    Sorry dudez, I don&amp;#39;t have any LOLZ for you today :(
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;リクエストパラメータ&#34;&gt;リクエストパラメータ&lt;/h3&gt;

&lt;p&gt;ここで、Webサイトに次のログインフォームを作ることを考える。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;--------------------------------
| userid    [                ] |
| password  [                ] |
|                     [submit] |
--------------------------------
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;サイトを訪れた人がSubmitボタンをクリックすると、ブラウザはPOSTリクエストやGETリクエストをWebサーバに送信する。&lt;/p&gt;

&lt;h4 id=&#34;postリクエストパラメータ&#34;&gt;POSTリクエストパラメータ&lt;/h4&gt;

&lt;p&gt;POSTリクエストは前節で説明したGETリクエストによく似ている。
ただ、POSTリクエストはサーバにあるデータに変更を加えたいときに使われる。&lt;/p&gt;

&lt;p&gt;今のログインフォームの例では、訪問者がフォームのテキストフィールドに記入したユーザIDとパスワードをサーバに送る必要がある。
フィールドに記入された値は、POSTリクエストの &lt;strong&gt;リクエストパラメータ&lt;/strong&gt; として送られる。
つまり、POSTリクエストヘッダの後ろにある、リクエストボディに当たる部分が使われる。&lt;/p&gt;

&lt;p&gt;次に、このログインフォームによって送られるPOSTリクエストの例を示す。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span class=&#34;nf&#34;&gt;POST&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;/lolcats.html&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;HTTP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1.1&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Host&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l&#34;&gt;www.mywebsite.com&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;User-Agent&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l&#34;&gt;Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.5)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Accept&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l&#34;&gt;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Accept-Language&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l&#34;&gt;en-us,en;q=0.5&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Accept-Encoding&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l&#34;&gt;gzip,deflate&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Accept-Charset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l&#34;&gt;ISO-8859-1,utf-8;q=0.7,*;q=0.7&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Keep-Alive&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l&#34;&gt;300&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Connection&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l&#34;&gt;keep-alive&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Content-Length&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l&#34;&gt;39&lt;/span&gt;

&lt;span class=&#34;g&#34;&gt;userid=foo&amp;amp;password=supersecretpassword&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最後の行は、リクエストパラメータである。&lt;br /&gt;
POSTリクエストのヘッダに追加の情報が付加されている。
Content-Lengthは、リクエストのボディに含まれるデータの長さを表す。
ここではContent-Length: 39となっているので、リクエストパラメータの大きさが39バイトであることをサーバに知らせている。&lt;/p&gt;

&lt;h4 id=&#34;getリクエストパラメータ&#34;&gt;GETリクエストパラメータ&lt;/h4&gt;

&lt;p&gt;リクエストパラメータは主としてPOSTリクエストでサーバにデータを送るために使われている。
しかし、GETリクエストにもリクエストパラメータを入れることもできる。
POSTリクエストでは、パラメータはリクエストボディの中に隠されているが、GETリクエストでは、パラメータはリクエストのURLに含まれる。&lt;/p&gt;

&lt;p&gt;例えば、Googleで&amp;rdquo;dogs&amp;rdquo;と検索したい場合、リクエストされるページのURLに&lt;code&gt;?q=dogs&lt;/code&gt;といった値が入っている。
これがリクエストパラメータである。&lt;/p&gt;

&lt;p&gt;ここで作るWebサーバは、POSTリクエストパラメータと、GETリクエストパラメータの両方とも扱えるようにする。&lt;/p&gt;

&lt;h3 id=&#34;リクエストパラメータから値を取り出す&#34;&gt;リクエストパラメータから値を取り出す&lt;/h3&gt;

&lt;p&gt;HTTPでフォームのデータを送る場合、通常のアルファベット以外の文字はHTTPエスケープコードと呼ばれる特殊形式に変換される(RFC3986)。
エスケープコードを使うことで、HTTPフォーマットでは特別な文字を持つような文字もデータとして送ることができる。&lt;/p&gt;

&lt;p&gt;例えば、ユーザが&lt;code&gt;foo?&lt;/code&gt;とテキストフィールドにタイプした場合、リクエストには&lt;code&gt;foo%3F&lt;/code&gt;という文字列が送られる。
ここではクエスチョンマークがエスケープされている。
Webサーバは、このようなエスケープされた文字をデコードできなければならない。&lt;/p&gt;

&lt;p&gt;では、デコードする関数を次に示す。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;英語版リクエストパラメータデコーダ&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;http-char&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;c1&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;c2&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;&amp;amp;optional&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;#\Space&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;16進数で表されたASCIIコードをデコードする
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   c1: 2桁目の数値となる文字
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   c2: 1桁目の数値となる文字&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;;; 16進数の文字列を整数へと変換する&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;code&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;parse-integer&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coerce&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;c1&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;c2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                &lt;span class=&#34;ss&#34;&gt;:radix&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; 数の基数を指定&lt;/span&gt;
                &lt;span class=&#34;ss&#34;&gt;:junk-allowed&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;	 &lt;span class=&#34;c1&#34;&gt;; 数値の解釈を失敗した時、エラー通知ではなくnilを返す&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;;; 整数への変換が成功したら、そのコードに対応した文字を返す&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;;; 整数への変換が失敗したら、default値を返す&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;code&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;code-char&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;code&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;


&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;decode-param-en&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;httpエスケープされているリクエストパラメータをデコードする(ASCIIコードのみ対応)&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;;; f: 文字のリストを再帰的に処理するローカル関数&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;labels&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
              &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;
                &lt;span class=&#34;c1&#34;&gt;;; 文字が%なら、次に2桁の16進数で表されるASCIIコードをデコードする&lt;/span&gt;
                &lt;span class=&#34;c1&#34;&gt;;; 文字が+なら、空白文字として解釈する&lt;/span&gt;
                &lt;span class=&#34;c1&#34;&gt;;; 他の文字なら、そのまま出力する&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                    &lt;span class=&#34;c1&#34;&gt;;; リストの先頭の文字を処理し、残りの文字列（処理済み）と組み合わせる&lt;/span&gt;
                    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;#\%&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cons&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;http-char&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cadr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;caddr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                               &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cdddr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;
                    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;#\+&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cons&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;#\space&lt;/span&gt;
                               &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cdr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;
                    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;otherwise&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cons&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                               &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cdr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))))))&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;;; リストの要素を文字列として結合する&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coerce&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coerce&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;日本語版リクエストパラメータデコーダ&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;; 文字ごとではなく、バイトごとにデコードする(URLの正式なエンコーディング準拠)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;http-byte&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;c1&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;c2&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;&amp;amp;optional&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;#\Space&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;16進数で表された文字をバイト数値にデコードする
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   c1: 2桁目の数値となる文字
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   c2: 1桁目の数値となる文字&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;;; 16進数の文字列を整数へと変換する&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;code&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;parse-integer&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coerce&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;code-char&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;c1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;code-char&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;c2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                &lt;span class=&#34;ss&#34;&gt;:radix&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; 数の基数を指定&lt;/span&gt;
                &lt;span class=&#34;ss&#34;&gt;:junk-allowed&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;	 &lt;span class=&#34;c1&#34;&gt;; 数値の解釈を失敗した時、エラー通知ではなくnilを返す&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;;; 整数への変換が成功したら、そのコードに対応したバイト数値を返す&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;;; 整数への変換が失敗したら、default値を返す&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;code&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;


&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;decode-param-ja&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;httpエスケープされているリクエストパラメータをデコードする(マルチバイト文字対応)&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;;; f: 文字のリストを再帰的に処理するローカル関数&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;labels&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
              &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;
                &lt;span class=&#34;c1&#34;&gt;;; 文字が%なら、次に2桁の16進数で表されるASCIIコードをデコードする&lt;/span&gt;
                &lt;span class=&#34;c1&#34;&gt;;; 文字が+なら、空白文字として解釈する&lt;/span&gt;
                &lt;span class=&#34;c1&#34;&gt;;; 他の文字なら、そのまま出力する&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                    &lt;span class=&#34;c1&#34;&gt;;; リストの先頭の文字を処理し、残りの文字列（処理済み）と組み合わせる&lt;/span&gt;
                    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;#.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;char-code&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;#\%&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cons&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;http-byte&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cadr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;caddr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                                             &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cdddr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;
                    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;#.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;char-code&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;#\+&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cons&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;#.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;char-code&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;#\space&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                                             &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cdr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;
                    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;otherwise&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cons&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                               &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cdr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))))))&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;;; リストの要素を文字列として結合する&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;ext:convert-string-from-bytes&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coerce&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coerce&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;ext:convert-string-to-bytes&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;charset:utf-8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;vector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;nv&#34;&gt;charset:utf-8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; CLISPで端末のエンコーディングを設定するには、下記コマンドを使う。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;; charsetには下記などが使える。&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;; charset:utf-8&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;; charset:euc-jp&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;; charset:shift-jis&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;setf&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*terminal-encoding*&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;charset:utf-8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Webサーバで日本語を表示するためには、ソケットの文字エンコーディングも指定する必要がある。
&lt;code&gt;serve&lt;/code&gt;コマンド（後述）を起動する前に、REPL上で次のコマンドを実行すること。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;setf&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*default-file-encoding*&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;charset:utf-8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;&amp;lt;ENCODING&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;CHARSET:UTF-8&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:UNIX&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; ここで扱っているHTTPエスケープコードは、Lisp文字列のエスケープ文字とは無関係。&lt;/p&gt;

&lt;h3 id=&#34;リクエストパラメータのリストをデコードする&#34;&gt;リクエストパラメータのリストをデコードする&lt;/h3&gt;

&lt;p&gt;リクエストパラメータには、&amp;rdquo;name=bob&amp;amp;age=25&amp;amp;gender=male&amp;rdquo;といった具合に、名前/値の組が複数含まれている。&lt;br /&gt;
このようなパラメータは、Webページの末尾にもよく含まれている。&lt;br /&gt;
ここでは、これらの組をリストとして取り出す。&lt;br /&gt;
データ構造としては連想リスト(alist)と同じである。
そこで、リクエストパラメータの文字列を解釈してalistを返す関数を作る。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;parse-params&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;リクエストパラメータのalistを返す
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   s: リクエストパラメータの文字列
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   ret: リクエストパラメータのalist&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;i1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;position&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;#\=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;; リクエストパラメータ中の=の位置&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;i2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;position&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;#\&amp;amp;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;; リクエストパラメータ中の&amp;amp;の位置&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cond&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;i1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cons&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;; 名前と値の各コンスセルをコンスする&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cons&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;intern&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;string-upcase&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;subseq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;; car部：名前をシンボルに変換したもの&lt;/span&gt;
                      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;decode-param&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;subseq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;1+&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;		&lt;span class=&#34;c1&#34;&gt;; cdr部：値のhttpエスケープをデコードしたもの&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;parse-params&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;subseq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;1+&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))))&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;; 残りのリクエストパラメータに対して処理&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;equal&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;; リクエストパラメータが空になったらリストを閉じるためにnilを返す&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;; リクエストパラメータの書式ではない文字列の場合、文字列をそのまま返す&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;decode-param&lt;/code&gt;では、文字列を文字のリストとして変換してから処理した。
&lt;code&gt;parse-params&lt;/code&gt;では、文字列をそのまま扱う。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;position&lt;/code&gt;関数は、文字列から指定した文字を探してその位置を返す関数である。
これを使って、渡された文字列から&lt;code&gt;&amp;amp;&lt;/code&gt;と&lt;code&gt;=&lt;/code&gt;の位置を求めている。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;i1&lt;/code&gt;が&lt;code&gt;nil&lt;/code&gt;でない、つまり、&lt;code&gt;=&lt;/code&gt;が見つかったら、それは文字列中に名前/値のペアが見つかったということになる。
この場合、&lt;code&gt;subseq&lt;/code&gt;を使って名前と値それぞれを切り出す。
名前部分については&lt;code&gt;intern&lt;/code&gt;関数を使って文字列をLispのシンボルに変換する。
値部分についてはhttpエスケープをデコードする。&lt;/p&gt;

&lt;p&gt;これらを実行すると、次のような結果になる。
このようにリクエストのパラメータををalistに治すことで、後から特定のパラメータの値を取り出しやすくなる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;parse-params&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;name=bob&amp;amp;age=25&amp;amp;gender=male&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;NAME&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;bob&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;AGE&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;25&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;GENDER&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;male&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; 上の&lt;code&gt;parse-param&lt;/code&gt;関数では、簡略化のために、名前部分がエスケープされている可能性を無視していることに注意。&lt;/p&gt;

&lt;h3 id=&#34;リクエストヘッダを解析する&#34;&gt;リクエストヘッダを解析する&lt;/h3&gt;

&lt;h4 id=&#34;リクエストラインを解析する&#34;&gt;リクエストラインを解析する&lt;/h4&gt;

&lt;p&gt;次は、リクエストヘッダの最初の行(リクエストライン)である、&lt;code&gt;GET /lolcats.html HTTP/1.1&lt;/code&gt;といった文字列を解析する。
次に示す&lt;code&gt;parse-request-line&lt;/code&gt;関数によって行う。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;parse-request-line&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;リクエストヘッダのリクエストラインからURLを取り出す
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   s: リクエストライン
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   ret: url本体部とリクエストパラメータ部とのコンスセル&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;let*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;url&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;subseq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;s&lt;/span&gt;
                      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;position&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;#\space&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;; スペース位置から2つ進んだ箇所(`/`の次)&lt;/span&gt;
                      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;position&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;#\space&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:from-end&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;; 文字列の後ろから見てスペースのある箇所&lt;/span&gt;
         &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;position&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;#\?&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;; URL中のリクエストパラメータの開始位置&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;; リクエストパラメータがある&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cons&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;subseq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;url&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;parse-params&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;subseq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;url&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;1+&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;; url本体部とリクエストパラメータ部とのコンスセル&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cons&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;url&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()))))&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;; url本体部と空リストとのコンスセル&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この関数では、まず、リクエストヘッダのリクエストラインを受け取り、最初にスペースを探し出して、URL部分を抜き出す。&lt;br /&gt;
次に &lt;code&gt;?&lt;/code&gt;を探し、もし存在すればそれ以降はリクエストパラメータなので、切り出して&lt;code&gt;parse-params&lt;/code&gt;に渡す。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;GET&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;/lolcats.html&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;HTTP/1.1&lt;/span&gt;
     &lt;span class=&#34;nv&#34;&gt;^^^^^^^^^^^^&lt;/span&gt;
     &lt;span class=&#34;nv&#34;&gt;car部&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;parse-request-line&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;GET /lolcats.html HTTP/1.1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;lolcats.html&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;parse-request-line&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;GET /lolcats.html?extra-funny=yes HTTP/1.1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;lolcats.html&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;EXTRA-FUNNY&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;yes&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;httpヘッダフィールドを解析する&#34;&gt;HTTPヘッダフィールドを解析する&lt;/h4&gt;

&lt;p&gt;次に、リクエストヘッダのHTTPヘッダフィールドを処理する。
次に示す&lt;code&gt;get-header&lt;/code&gt;は、リクエストヘッダの残りの行を読み込んでalistにして返す関数である。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;get-header&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;stream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;リクエストヘッダのHTTPヘッダフィールドからリクエストパラメータを返す
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   stream: HTTPヘッダフィールド
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   ret: リクエストパラメータと値とのコンスセル&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;let*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;read-line&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;stream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;; 入力ストリームから得た文字列1行分&lt;/span&gt;
         &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;h&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;position&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;#\:&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;; コロンの位置&lt;/span&gt;
              &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;; コロンがある場合、コロンを区切りとしたリクエスト名/値のコンスセルを作る&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cons&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;intern&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;string-upcase&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;subseq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
                      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;subseq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))))&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;;; コンスセルができたら、残りのリクエストも処理する&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;;; コンスセルができなかったら、それ以降はリクエストは無いなずなので、処理を終わる&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;h&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cons&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;h&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;get-header&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;stream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;文字列ストリームを使って-get-header-をテストする&#34;&gt;文字列ストリームを使って&lt;code&gt;get-header&lt;/code&gt;をテストする&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;get-header&lt;/code&gt;関数はソケットストリームから直接データを読み込む想定である。
したがって、そのままではREPLでテストできない……と思うかもしれない。&lt;br /&gt;
ここで、前章でやったことを利用する。&lt;/p&gt;

&lt;p&gt;Common Lispでは、ソケット以外にも異なる種類のリソースを扱う何種類化のストリームが有る。
ストリームはどれも同じインターフェースでアクセスできるため、ソケットストリームの代わりに文字列ストリームを渡して、&lt;code&gt;get-header&lt;/code&gt;をテストできる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;get-header&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;make-string-input-stream&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;foo: 1
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;bar: abc,123
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;FOO&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;BAR&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;abc,123&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;make-string-input-stream&lt;/code&gt;関数で、リテラル文字列から入力ストリームを作り出している。
この例では、文字列は2つのキー(fooとbar)を含み、HTTPヘッダの形式通り、空行で終わっている。
(Common Lispではリテラル文字列を複数行に渡って書くことができる。)&lt;/p&gt;

&lt;h3 id=&#34;postリクエストの場合-リクエストボディの解析&#34;&gt;(POSTリクエストの場合)リクエストボディの解析&lt;/h3&gt;

&lt;p&gt;POSTリクエストでは、パラメータはリクエストヘッダの後、リクエストボディやリクエストコンテントと呼ばれる領域を使って送られる。&lt;br /&gt;
次の&lt;code&gt;get-content-params&lt;/code&gt;関数によって、そこからパラメータを取り出す。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;get-content-params&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;stream&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;header&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;リクエストヘッダの後にあるリクエストボディから、パラメータを取り出す
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   stream: ストリーム
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   header: HTTPヘッダフィールドの連想リスト&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cdr&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;assoc&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;content-length&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;header&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;; HTTPヘッダフィールドからコンテンツの長さを取得する&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;;; もしcontent-lengthがHTTPヘッダフィールドにあれば、リクエストパラメータの連想リストを作る&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;length&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;content&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;make-string&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;parse-integer&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;; 与えられた長さの文字列を`make-string`で作成する&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;read-sequence&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;content&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;stream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;; ストリームからデータを読み込んで、contentを満たす&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;parse-params&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;; リクエストパラメータの連想リストを作る&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この関数は、リクエストボディに含まれるパラメータの長さを示す&lt;code&gt;content-hength&lt;/code&gt;ヘッダを探す。
もし&lt;code&gt;content-length&lt;/code&gt;ヘッダがリクエストヘッダに見つかれば、処理すべきリクエストパラメータが存在するということになる。
その場合、与えられた長さの文字列を&lt;code&gt;make-string&lt;/code&gt;で作成し、&lt;code&gt;read-sequence&lt;/code&gt;を使ってストリームからデータを読み込む。
最後に、読み込まれた文字列に対して&lt;code&gt;parse-params&lt;/code&gt;を使って、リクエストパラメータの連想リストを作る。&lt;/p&gt;

&lt;h3 id=&#34;最後の仕上げのサーバ関数&#34;&gt;最後の仕上げのサーバ関数&lt;/h3&gt;

&lt;p&gt;ここまでで必要な機能は実装した。
ここでは、Webサーバの核となる&lt;code&gt;serve&lt;/code&gt;関数を実装する。
この関数は、引数にとったリクエストハンドラに、パス、HTTPヘッダフィールド、パラメータを使った処理を委譲する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;serve&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;request-handler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;request-handler: リクエストハンドラ。解析したリクエストを使う。&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;socket&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;socket-server&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8080&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;; サーバのポート番号&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;unwind-protect&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;; 例外時にソケットが確実に閉じられるようにする&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;with-open-stream&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;stream&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;socket-accept&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;; 接続が確立したらソケットオブジェクトをstreamにセットする&lt;/span&gt;
              &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;let*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;url&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;parse-request-line&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;read-line&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;stream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;; streamからURLとリクエストパラメータを得る&lt;/span&gt;
                     &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;path&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;; URLのパス部&lt;/span&gt;
                     &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;header&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;get-header&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;stream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;; HTTPヘッダフィールド&lt;/span&gt;
                     &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;params&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;append&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cdr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;     &lt;span class=&#34;c1&#34;&gt;; URL末尾(GET用)とリクエストボディ(POST用)のリクエストパラメータ&lt;/span&gt;
                                     &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;get-content-params&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;stream&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;header&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
                     &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;*standard-output*&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;stream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;; ストリームを標準出力に設定&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;funcall&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;request-handler&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;path&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;header&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;params&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;; &lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;socket-server-close&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;13-3-動的なwebサイトを作る&#34;&gt;13.3 動的なWebサイトを作る&lt;/h2&gt;

&lt;p&gt;ここまでで作ったWebサーバを動かしてみる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;hello-request-handler&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;path&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;header&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;params&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;名前を問いかけて、得られたその名前を使って挨拶する
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   CAUTION! リクエストパラメータをサニタイズしていないため、WANでの使用不可
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   path: URLのパス部分
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   header: HTTPヘッダフィールド
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   params: URL末尾(GET用)とリクエストボディ(POST用)のリクエストパラメータ
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   ret: レスポンスするHTMLドキュメント&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;declare&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;ignore&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;header&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;; 本関数ではHTTPヘッダフィールドは無視する&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;;; &amp;#34;/greeting&amp;#34;ページのみ提供する&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;equal&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;path&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;greeting&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;c1&#34;&gt;;; ページが&amp;#34;greeting&amp;#34;ならパラメータに合わせて表示処理を行う&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;assoc&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;name&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;params&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;c1&#34;&gt;;; パラメータにnameが無ければ、もう一度名前を問いかける&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;princ&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;lt;html&amp;gt;&amp;lt;form&amp;gt;What is your name?&amp;lt;input name=&amp;#39;name&amp;#39; /&amp;gt;&amp;lt;/form&amp;gt;&amp;lt;/html&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;c1&#34;&gt;;; パラメータにnameがあれば、挨拶を表示する&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;format&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;lt;html&amp;gt;Nice to meet you, ~a!&amp;lt;/html&amp;gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cdr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;
      &lt;span class=&#34;c1&#34;&gt;;; ページが&amp;#34;greeting&amp;#34;でなければ、要求されたページが無い旨を表示する&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;princ&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Sorry... I don&amp;#39;t know that page.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>書籍 Land of Lisp 15章 ダイスオブドゥーム：関数型スタイルでゲームを書こう</title>
      <link>https://otaon.github.io/web/ja-jp/2019/03/07/%E6%9B%B8%E7%B1%8D-land-of-lisp-15%E7%AB%A0-%E3%83%80%E3%82%A4%E3%82%B9%E3%82%AA%E3%83%96%E3%83%89%E3%82%A5%E3%83%BC%E3%83%A0%E9%96%A2%E6%95%B0%E5%9E%8B%E3%82%B9%E3%82%BF%E3%82%A4%E3%83%AB%E3%81%A7%E3%82%B2%E3%83%BC%E3%83%A0%E3%82%92%E6%9B%B8%E3%81%93%E3%81%86/</link>
      <pubDate>Thu, 07 Mar 2019 00:00:00 +0900</pubDate>
      
      <guid>https://otaon.github.io/web/ja-jp/2019/03/07/%E6%9B%B8%E7%B1%8D-land-of-lisp-15%E7%AB%A0-%E3%83%80%E3%82%A4%E3%82%B9%E3%82%AA%E3%83%96%E3%83%89%E3%82%A5%E3%83%BC%E3%83%A0%E9%96%A2%E6%95%B0%E5%9E%8B%E3%82%B9%E3%82%BF%E3%82%A4%E3%83%AB%E3%81%A7%E3%82%B2%E3%83%BC%E3%83%A0%E3%82%92%E6%9B%B8%E3%81%93%E3%81%86/</guid>
      
        <description>

&lt;h2 id=&#34;t-o-c&#34;&gt;T.O.C.&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#155-ダイスオブドゥームを高速化する&#34;&gt;15.5 ダイス・オブ・ドゥームを高速化する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;15-5-ダイス-オブ-ドゥームを高速化する&#34;&gt;15.5 ダイス・オブ・ドゥームを高速化する&lt;/h2&gt;

&lt;h3 id=&#34;クロージャ&#34;&gt;クロージャ&lt;/h3&gt;

&lt;p&gt;クロージャは、&lt;code&gt;lambda&lt;/code&gt;で関数が作られるとき、外側の情報を捕獲したものである。&lt;/p&gt;

&lt;p&gt;まずは、普通の関数を定義する。これは、&lt;code&gt;5&lt;/code&gt;を返す関数である。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defparameter&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*foo*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
                        &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;vg&#34;&gt;*FOO*&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;funcall&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*foo*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;5&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次に、示す関数は、クロージャの実装例である。&lt;br /&gt;
最初にローカル変数&lt;code&gt;x&lt;/code&gt;を作り、それに&lt;code&gt;5&lt;/code&gt;を代入している。
そして、&lt;code&gt;lambda&lt;/code&gt;の本体から、&lt;code&gt;x&lt;/code&gt;の値を参照して返している。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defparameter&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*foo*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
                        &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;span class=&#34;vg&#34;&gt;*foo*&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;funcall&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*foo*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;5&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上の通り、クロージャでは関数が定義された時に参照した変数を捕捉している。&lt;/p&gt;

&lt;p&gt;この動作は、Lispがガベージコレクタを持っていることを考えると理解しやすい。&lt;br /&gt;
ガベージコレクタは、アロケートされた変数がどこからも参照されなくなると、メモリを解放する。
上の例では、&lt;code&gt;let&lt;/code&gt;の中で&lt;code&gt;lambda&lt;/code&gt;を使っている。
この場合、&lt;code&gt;let&lt;/code&gt;を抜けても、変数は&lt;code&gt;lambda&lt;/code&gt;の中から参照されている。
したがって、ガベージコレクタは変数を回収しない。&lt;br /&gt;
そして、&lt;code&gt;lambda&lt;/code&gt;自身がガベージコレクタに回収されるまでは変数も生き続けることになる。&lt;/p&gt;

&lt;p&gt;クロージャを使うことで、関数に紐づけたスタティック変数があるかのような処理を実装できる。&lt;br /&gt;
下の例では、関数が呼ばれる度に、捕捉した行番号を表示しつつインクリメントする。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;line-number&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;my-print&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;line-number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;incf&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;line-number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;MY-PRINT&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;my-print&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;this&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;&amp;#34;this&amp;#34;&lt;/span&gt;
&lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;my-print&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;is&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;&amp;#34;is&amp;#34;&lt;/span&gt;
&lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;my-print&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;
&lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;my-print&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;nil&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;メモ化&#34;&gt;メモ化&lt;/h3&gt;

&lt;p&gt;メモ化とは、関数が受け取った引数と、その結果を記録しておくテクニックである。
このテクニックは、副作用がない関数(=関数型プログラミングによる関数)に対して使える。
また、このテクニックは、クロージャを使って実現できる。&lt;/p&gt;

&lt;h4 id=&#34;neighbors-関数をメモ化する&#34;&gt;&lt;code&gt;neighbors&lt;/code&gt;関数をメモ化する&lt;/h4&gt;

&lt;p&gt;まずは、与えられたマスから攻撃可能な隣り合うマスを計算する&lt;code&gt;neighbors&lt;/code&gt;関数をメモ化してみる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;neighbors&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上のとおり、&lt;code&gt;neighbors&lt;/code&gt;に引数&lt;code&gt;0&lt;/code&gt;を渡した時の返り値は&lt;code&gt;(3 1 4)&lt;/code&gt;となる(ゲーム盤が3x3の場合)。&lt;br /&gt;
また、この関数は不変のゲーム盤に対する不変的な位置計算をするものであるため、メモ化の対象とできる。
&lt;code&gt;neighbors&lt;/code&gt;関数をメモ化したものを下に示す。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;old-neighbors&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;symbol-function&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;neighbors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;previous&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;make-hash-table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;neighbors&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;gethash&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;pos&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;previous&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;setf&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;gethash&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;pos&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;previous&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;funcall&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;old-neighbors&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最初に定義したレキシカル変数の&lt;code&gt;symbol-function&lt;/code&gt;は、引数のシンボルに束縛されている関数を取り出すコマンドである。
したがって、&lt;code&gt;old-neighbors&lt;/code&gt;変数には、この行が評価されるよりも前に定義した&lt;code&gt;neighbors&lt;/code&gt;が束縛される。
つまり、この後に同名の&lt;code&gt;neighbors&lt;/code&gt;関数を再定義しても、以前のバージョンの定義にアクセスできるという寸法である。&lt;/p&gt;

&lt;p&gt;次に定義したレキシカル変数の&lt;code&gt;previous&lt;/code&gt;は、渡された引数とその結果とを全て保存していくためのハッシュテーブルである。
このハッシュテーブルは、引数をキー、結果を値とする。&lt;/p&gt;

&lt;p&gt;そして、新たに&lt;code&gt;neighbors&lt;/code&gt;関数を定義して以前のバージョンの&lt;code&gt;neighbors&lt;/code&gt;を上書きする。
この新しい定義の&lt;code&gt;neighbors&lt;/code&gt;関数は、以前の定義の&lt;code&gt;neighbors&lt;/code&gt;関数にメモ化処理を加えたものである。&lt;br /&gt;
この新しい定義の&lt;code&gt;neighbors&lt;/code&gt;関数は、はじめに、引数&lt;code&gt;pos&lt;/code&gt;を使ってハッシュテーブルを調べる。&lt;br /&gt;
既に値が登録されていれば、その引数をキーとした値を取り出して返す。
未だ値が登録されていなければ、その引数を使って&lt;code&gt;old-neighbors&lt;/code&gt;(つまり以前のバージョンの&lt;code&gt;neighbors&lt;/code&gt;)を呼び出した結果を、引数をキーとしてハッシュテーブルに登録する。&lt;br /&gt;
&lt;code&gt;setf&lt;/code&gt;はセットされた値を返すから、最後の式では、ハッシュテーブルへ登録すると同時に&lt;code&gt;old-neighbors&lt;/code&gt;の返り値を返している。&lt;/p&gt;

&lt;h4 id=&#34;ゲーム木をメモ化する&#34;&gt;ゲーム木をメモ化する&lt;/h4&gt;

&lt;p&gt;ゲーム木を計算する関数において、同じゲーム木を何度も計算するのは全くの無駄な処理である。&lt;br /&gt;
そこで、&lt;code&gt;game-tree&lt;/code&gt;関数をメモ化して、同じゲーム木を見つけたらそのゲーム木の枝を共有することとする。&lt;br /&gt;
下に、&lt;code&gt;game-tree&lt;/code&gt;関数をメモ化するコードを示す。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;old-game-tree&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;symbol-function&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;game-tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;previous&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;make-hash-table&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:test&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;equalp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;; キーの比較関数にequalpを使う&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;game-tree&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;&amp;amp;rest&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;rest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;gethash&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;rest&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;previous&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;setf&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;gethash&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;rest&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;previous&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;apply&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;old-game-tree&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;rest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ハッシュテーブルのキーの比較関数に&lt;code&gt;equalp&lt;/code&gt;関数を使用したのは、キーがゲーム盤を含む配列であるからである。
テスト関数に&lt;code&gt;equalp&lt;/code&gt;を使えば、ゲーム盤の全てのマスの同値性を比較して、完全一致した時に以前の計算結果が使われるようにできる。&lt;/p&gt;

&lt;p&gt;また、&lt;code&gt;old-game-tree&lt;/code&gt;関数には引数が複数あるため、&lt;code&gt;&amp;amp;rest rest&lt;/code&gt;と表記することでリスト&lt;code&gt;rest&lt;/code&gt;として扱っている。&lt;br /&gt;
そして、&lt;code&gt;apply&lt;/code&gt;によりリスト&lt;code&gt;rest&lt;/code&gt;を個々の引数として&lt;code&gt;old-game-tree&lt;/code&gt;に適用している。&lt;/p&gt;

&lt;h4 id=&#34;rate-position-関数をリスト化する&#34;&gt;&lt;code&gt;rate-position&lt;/code&gt;関数をリスト化する&lt;/h4&gt;

&lt;p&gt;最後に、メモ化する効果が高い&lt;code&gt;rate-position&lt;/code&gt;をメモ化することを考える。&lt;br /&gt;
メモ化のコードは下のとおりである。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;; クロージャとして補足する値: 特定のプレイヤーに対する特定のゲーム木に対応する点数のハッシュテーブル&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;old-rate-position&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;symbol-function&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;rate-position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;previous&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;make-hash-table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;rate-position&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;player&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;tab&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;gethash&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;player&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;previous&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;; 引数のプレイヤーについての返り値の記憶を辿る&lt;/span&gt;
	  &lt;span class=&#34;c1&#34;&gt;;; 引数のプレイヤーについての返り値が記憶されていなければ、&lt;/span&gt;
      &lt;span class=&#34;c1&#34;&gt;;; 引数のプレイヤー用のハッシュテーブルを新規作成する&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;unless&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tab&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;setf&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tab&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;setf&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;gethash&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;player&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;previous&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;make-hash-table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;
      &lt;span class=&#34;c1&#34;&gt;;; 引数のプレイヤーについて、引数のゲーム木が記憶されていれば、それに対応する値を返す&lt;/span&gt;
      &lt;span class=&#34;c1&#34;&gt;;; 記憶されていなければ、引数のプレイヤーと引数のゲーム木に対応する戻り値を新たに計算して記憶し、&lt;/span&gt;
      &lt;span class=&#34;c1&#34;&gt;;; それを返り値とする&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;gethash&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tab&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;setf&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;gethash&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tab&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;funcall&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;old-rate-position&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;player&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;rate-position&lt;/code&gt;には問題がある。&lt;br /&gt;
&lt;code&gt;rate-position&lt;/code&gt;の引数である&lt;code&gt;tree&lt;/code&gt;はゲーム木であるため、非常に大きなデータである可能性がある。
また、&lt;code&gt;game-tree&lt;/code&gt;で使用した&lt;code&gt;equalp&lt;/code&gt;は同値性の比較をするため、大きなデータに対しては比較コストが非常に高い。&lt;br /&gt;
したがって、これを&lt;code&gt;game-tree&lt;/code&gt;と同様に&lt;code&gt;equalp&lt;/code&gt;(同値性比較)で比較すると、キーの比較だけで処理が増大してしまい、メモ化の効果が薄れる可能性がある。&lt;/p&gt;

&lt;p&gt;ところで、先程の&lt;code&gt;game-tree&lt;/code&gt;関数のメモ化によって、同値のゲーム木は必ず同一のインスタンスとなることが保証されている。
そこで、&lt;code&gt;rate-position&lt;/code&gt;の引数のうち、&lt;code&gt;tree&lt;/code&gt;は、デフォルトの&lt;code&gt;eql&lt;/code&gt;(低コストな同一性比較)で済むようにしたい。
なお、残りの引数&lt;code&gt;player&lt;/code&gt;はシンボルであるため、&lt;code&gt;player&lt;/code&gt;単体ならば既にデフォルトの&lt;code&gt;eql&lt;/code&gt;で比較可能である。&lt;br /&gt;
(&lt;code&gt;tree&lt;/code&gt;と&lt;code&gt;player&lt;/code&gt;をコンスしたりしてしまうと同一性が保てない点に注意。)&lt;/p&gt;

&lt;p&gt;そこで、&lt;code&gt;rate-position&lt;/code&gt;関数の2つの引数(&lt;code&gt;tree&lt;/code&gt;と&lt;code&gt;palyer&lt;/code&gt;)を別々に記憶しておくようにしたい。&lt;br /&gt;
上のコードでは、ネストしたハッシュテーブルを使用してそれを実現している。
下に、このハッシュテーブルの構造を示す。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;c1&#34;&gt;; ネストしたハッシュテーブルの構造&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; previous = #S((player1 . tab1)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;               (player2 . tab2))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; tab = #S((tree1 . ret1)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;          (tree2 . ret2))&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;previous&lt;/span&gt;
&lt;span class=&#34;l&#34;&gt;#S&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;プレイヤーID-1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;l&#34;&gt;#S&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;ゲーム木a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;返り値1-a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;ゲーム木b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;返り値1-b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;プレイヤーID-2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;l&#34;&gt;#S&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;ゲーム木c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;返り値2-c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;ゲーム木d&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;返り値2-d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; メモ化は、関数型スタイルで書かれたコードの最適化に使えるテクニックであるが、メモ化するコード自体は &lt;em&gt;以前の計算結果&lt;/em&gt; という状態を持つため、関数型では書けない。&lt;/p&gt;

&lt;h3 id=&#34;末尾再帰最適化&#34;&gt;末尾再帰最適化&lt;/h3&gt;

&lt;p&gt;ここでは、 &lt;strong&gt;末尾再帰最適化&lt;/strong&gt; と呼ばれる、関数型プログラミングの最適化テクニックを説明する。&lt;br /&gt;
このテクニックを理解するために、リストの長さを求める簡単な関数を考えてみる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;my-length&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;1+&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;my-length&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cdr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
        &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;MY-LENGTH&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;my-length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;fie&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;foh&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;fum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;じつは、この関数はかなり非効率である。&lt;br /&gt;
試しに、とても大きなリストにこの関数を適用すると、CLISPではプログラムがクラッシュする。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;; 注意:このプログラムはクラッシュするので実行しないこと!!&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defparameter&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*biglist*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;below&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100000&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;collect&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;vg&#34;&gt;*BIGLIST*&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;my-length&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*biglist*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;vg&#34;&gt;***&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;Program&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;stack&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;overflow.&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;RESET&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;なぜクラッシュするのか。
それは、再帰された関数を呼び出す際に現在の関数の情報をスタックに積むからである。&lt;br /&gt;
スタックに積み上げたデータが取り出されるのは、関数が終了した時であるから、関数が再帰的に呼び出され続けていればスタックオーバーフローを起こす。&lt;br /&gt;
ただし、処理系によってはスタックオーバーフローが起こらないように設計されている。&lt;/p&gt;

&lt;p&gt;この問題を回避したバージョンの&lt;code&gt;my-length&lt;/code&gt;を以下に示す。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;my-length&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;labels&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;acc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;; アキュムレータ&lt;/span&gt;
               &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;; このlstはfのローカル変数&lt;/span&gt;
                   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cdr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;1+&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;acc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                   &lt;span class=&#34;nv&#34;&gt;acc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;MY-LENGTH&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;my-length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;fie&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;foh&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;fum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このバージョンでは、リストを走査するローカル変数&lt;code&gt;f&lt;/code&gt;を定義して、それを再帰的に呼び出している。&lt;br /&gt;
この関数&lt;code&gt;f&lt;/code&gt;は、入力リストに加え、余分な引数&lt;code&gt;acc&lt;/code&gt;を取る。&lt;br /&gt;
この&lt;code&gt;acc&lt;/code&gt;はアキュムレータ(accumlator)と呼ばれる。
引数&lt;code&gt;acc&lt;/code&gt;は、それまでにいくつのリストの要素に出会ったかを数えている。
一番最初に&lt;code&gt;f&lt;/code&gt;を呼び出すとき、&lt;code&gt;acc&lt;/code&gt;は&lt;code&gt;0&lt;/code&gt;である。&lt;br /&gt;
アキュムレータを使うと、関数&lt;code&gt;f&lt;/code&gt;が自分自身を再帰的に呼び出す際にその結果を受け取って&lt;code&gt;1&lt;/code&gt;を加算しなくても良い。
代わりに、引数&lt;code&gt;acc&lt;/code&gt;に&lt;code&gt;1&lt;/code&gt;を加算した値を再帰呼び出しの引数へと渡していく。
リストの最後に到達したら(&lt;code&gt;list&lt;/code&gt;が&lt;code&gt;nil&lt;/code&gt;)、引数の&lt;code&gt;acc&lt;/code&gt;はリストの要素数と同じになっているから、この&lt;code&gt;acc&lt;/code&gt;をそのまま返せば良い。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(accumlator(アキュムレータ)とは、CPUの演算回路を構成するレジスタの一種で、論理演算や四則演算などによるデータの入出力と結果の保持に用いられるレジスタのことである。)&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;(accumlate: 蓄積する。)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;このバージョンで大事なのは、「リストが空ではない場合、&lt;code&gt;f&lt;/code&gt;の最後の処理が &lt;strong&gt;自分自身を呼び出すこと&lt;/strong&gt; である」ということである。
Lispの関数が、その最後の処理として自分自身や他の関数を呼び出すとき、それを末尾呼び出しと呼ぶ。&lt;br /&gt;
末尾呼び出しの場合、Lispでは現在の状態をスタックに積み上げず、すぐに&lt;code&gt;f&lt;/code&gt;の処理に取り掛かる。
これは、C言語の&lt;code&gt;longjump&lt;/code&gt;やBASICの&lt;code&gt;GOTO&lt;/code&gt;に相当する動きである。&lt;br /&gt;
現在の状態をスタックに積み上げない場合、スタック操作が無い分非常に速く、そもそもスタックを消費せずに済む。
また、Lispの末尾呼び出しは&lt;code&gt;longjump&lt;/code&gt;や&lt;code&gt;GOTO&lt;/code&gt;とは違い、構造化プログラミングの範疇となり、安全な処理のままである。&lt;/p&gt;

&lt;p&gt;また、上の例の&lt;code&gt;lst&lt;/code&gt;は、下の通り2種類の意味で使われている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;my-length&lt;/code&gt;の引数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;f&lt;/code&gt;の引数&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;したがって、&lt;code&gt;f&lt;/code&gt;の内部では、&lt;code&gt;lst&lt;/code&gt;は&lt;code&gt;f&lt;/code&gt;の引数として扱われる。&lt;br /&gt;
このように、同じ名前の変数があるときに近い方の引数が優先されることを、「変数の &lt;strong&gt;シャドウイング&lt;/strong&gt; 」という。&lt;/p&gt;

&lt;h5 id=&#34;common-lispにおける末尾呼び出しのサポート&#34;&gt;Common Lispにおける末尾呼び出しのサポート&lt;/h5&gt;

&lt;p&gt;Common Lispにおいては、コンパイラ/インタプリタが末尾呼び出しを最適化することを常に期待できない。
何故なら、ANSI Common Lispでは、末尾再帰最適化を要求していないからである。&lt;br /&gt;
(&lt;code&gt;Scheme&lt;/code&gt;では、その規格において末尾呼び出し最適化を厳密に要求している)&lt;br /&gt;
ただし、ほとんどのCommon Lispの処理系では、末尾呼び出し最適化をサポートしている。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CLISPでは、末尾呼び出し最適化を有効にするために、以下のコードを実行する必要がある。&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;compile&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;my-length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;わざわざ末尾呼び出し最適化を有効にするためにコード実行が必要である理由としては、末尾呼び出し最適化が性能上の問題を引き起こすケースが存在するからである。&lt;br /&gt;
また、プログラムをデバッグする際には、スタックにはなるべく多くの情報が保存されていた方が良いに決まっているが、末尾呼び出し最適化を施してしまうと、その情報は失われてしまう。&lt;/p&gt;

&lt;h5 id=&#34;ダイス-オブ-ドゥームでの末尾呼び出し最適化&#34;&gt;ダイス・オブ・ドゥームでの末尾呼び出し最適化&lt;/h5&gt;

&lt;p&gt;ダイス・オブ・ドゥームで末尾呼び出し最適化の効果が大きく現れるのは、&lt;code&gt;add-new-dice&lt;/code&gt;関数である。&lt;/p&gt;

&lt;p&gt;まずは、末尾呼び出し最適化していないバージョンの&lt;code&gt;add-new-dice&lt;/code&gt;関数を示す。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;add-new-dice&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;board&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;player&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;spare-dice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;ゲーム盤にサイコロを足していく
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   board: 現在のゲーム盤情報
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   player: 現在のプレイヤーID
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   spare-dice: 補給できるサイコロの個数
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   ret: サイコロ追加後のゲーム盤情報&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;labels&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
             &lt;span class=&#34;c1&#34;&gt;;; lst: ゲーム盤情報(リスト)&lt;/span&gt;
             &lt;span class=&#34;c1&#34;&gt;;; n: 補給できるサイコロの個数&lt;/span&gt;

             &lt;span class=&#34;c1&#34;&gt;;; ゲーム盤情報が無ければ、そのまま無し(nil)を返す&lt;/span&gt;
             &lt;span class=&#34;c1&#34;&gt;;; 補給できるサイコロが無ければ、ゲーム盤情報を返す&lt;/span&gt;
             &lt;span class=&#34;c1&#34;&gt;;; その他の場合、サイコロを補給する&lt;/span&gt;
             &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cond&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;null&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                   &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;zerop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cur-player&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;caar&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;; 現在のプレイヤーID&lt;/span&gt;
                            &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cur-dice&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cadar&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;; 着目中のマスのサイコロの個数&lt;/span&gt;
                        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;eq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cur-player&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;player&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cur-dice&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*max-dice*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                            &lt;span class=&#34;c1&#34;&gt;;; 着目中のマスが現在のプレイヤーのマス、かつ、&lt;/span&gt;
                            &lt;span class=&#34;c1&#34;&gt;;; マスにおけるサイコロの個数が上限でなければ、&lt;/span&gt;
                            &lt;span class=&#34;c1&#34;&gt;;; サイコロを追加して次のマスへ移動&lt;/span&gt;
                            &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cons&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cur-player&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;1+&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cur-dice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                                  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cdr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;1-&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
                            &lt;span class=&#34;c1&#34;&gt;;; そうでなければ、サイコロを追加せずに次のマスへ移動&lt;/span&gt;
                            &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cons&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cdr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))))))&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;;; ゲーム盤情報をリストに変換して、&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;;; サイコロを追加して、&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;;; ゲーム盤情報を再び配列に戻す&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;board-array&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coerce&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;board&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;spare-dice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次に、末尾呼び出し最適化を施した&lt;code&gt;add-new-dice&lt;/code&gt;関数を以下に示す。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;add-new-dice&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;board&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;player&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;spare-dice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;ゲーム盤にサイコロを足していく
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   board: 現在のゲーム盤情報
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   player: 現在のプレイヤーID
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   spare-dice: 補給できるサイコロの個数
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   ret: サイコロ追加後のゲーム盤情報&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;labels&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;acc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
             &lt;span class=&#34;c1&#34;&gt;;; lst: ゲーム盤情報(リスト)&lt;/span&gt;
             &lt;span class=&#34;c1&#34;&gt;;; n: 補給できるサイコロの個数&lt;/span&gt;
             &lt;span class=&#34;c1&#34;&gt;;; acc: 新たなサイコロの追加を考慮された、更新済みのマスのリスト(右下-&amp;gt;左上の順)&lt;/span&gt;

             &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cond&lt;/span&gt;
               &lt;span class=&#34;c1&#34;&gt;;; 補給できるサイコロが無ければ、ゲーム盤情報を返す&lt;/span&gt;
               &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;zerop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;append&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;reverse&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;acc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
               &lt;span class=&#34;c1&#34;&gt;;; ゲーム盤を最後まで走査したら、サイコロ追加後のゲーム盤情報を返す&lt;/span&gt;
               &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;null&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;reverse&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;acc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
               &lt;span class=&#34;c1&#34;&gt;;; その他の場合、サイコロを補給する&lt;/span&gt;
               &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cur-player&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;caar&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;; 現在のプレイヤーID&lt;/span&gt;
                        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cur-dice&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cadar&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;; 着目中のマスのサイコロの個数&lt;/span&gt;
                    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;eq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cur-player&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;player&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cur-dice&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*max-dice*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                        &lt;span class=&#34;c1&#34;&gt;;; 着目中のマスが現在のプレイヤーのマス、かつ、&lt;/span&gt;
                        &lt;span class=&#34;c1&#34;&gt;;; マスにおけるサイコロの個数が上限でなければ、&lt;/span&gt;
                        &lt;span class=&#34;c1&#34;&gt;;; サイコロを追加して次のマスへ移動&lt;/span&gt;
                        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cdr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;; サイコロを足していく対象のゲーム盤のうち未走査部分&lt;/span&gt;
                           &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;1-&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;; 補給できるサイコロを1減らす&lt;/span&gt;
                           &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cons&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cur-player&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;1+&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cur-dice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;acc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;; 更新済みのマスのリスト&lt;/span&gt;
                        &lt;span class=&#34;c1&#34;&gt;;; そうでなければ、サイコロを追加せずに次のマスへ移動&lt;/span&gt;
                        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cdr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;; サイコロを足していく対象のゲーム盤のうち未走査部分&lt;/span&gt;
                           &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;; 補給できるサイコロ&lt;/span&gt;
                           &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cons&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;acc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))))))&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;; 更新済みのマスのリスト&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;;; ゲーム盤情報をリストに変換して、&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;;; サイコロを追加して、&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;;; ゲーム盤情報を再び配列に戻す&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;board-array&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coerce&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;board&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;spare-dice&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;関数&lt;code&gt;f&lt;/code&gt;の引数のアキュムレータ&lt;code&gt;acc&lt;/code&gt;に渡されるのは、新たなサイコロの追加を考慮された、更新済みのマスのリストである。&lt;br /&gt;
&lt;code&gt;f&lt;/code&gt;の中では、2箇所で&lt;code&gt;f&lt;/code&gt;自身を末尾呼び出ししており、それぞれ、新たなマスの情報を&lt;code&gt;acc&lt;/code&gt;に&lt;code&gt;cons&lt;/code&gt;している。&lt;/p&gt;

&lt;p&gt;注意点としては、&lt;code&gt;acc&lt;/code&gt;には左上から右下に向けて走査しつつ&lt;code&gt;cons&lt;/code&gt;していっているため、左上の情報はリストの末尾に、右下の情報はリストの先頭にある。
したがって、正しいゲーム盤情報を返すには&lt;code&gt;acc&lt;/code&gt;を&lt;code&gt;reverse&lt;/code&gt;する必要がある。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>書籍 Land of Lisp 16章 マクロの魔法</title>
      <link>https://otaon.github.io/web/ja-jp/2019/03/07/%E6%9B%B8%E7%B1%8D-land-of-lisp-16%E7%AB%A0-%E3%83%9E%E3%82%AF%E3%83%AD%E3%81%AE%E9%AD%94%E6%B3%95/</link>
      <pubDate>Thu, 07 Mar 2019 00:00:00 +0900</pubDate>
      
      <guid>https://otaon.github.io/web/ja-jp/2019/03/07/%E6%9B%B8%E7%B1%8D-land-of-lisp-16%E7%AB%A0-%E3%83%9E%E3%82%AF%E3%83%AD%E3%81%AE%E9%AD%94%E6%B3%95/</guid>
      
        <description>

&lt;h2 id=&#34;t-o-c&#34;&gt;T.O.C.&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#161-簡単なlispマクロ&#34;&gt;16.1 簡単なLispマクロ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#162-もっと複雑なマクロ&#34;&gt;16.2 もっと複雑なマクロ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#163-マクロの危険と代替案&#34;&gt;16.3 マクロの危険と代替案&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;マクロプログラミング&lt;/strong&gt; によって、プログラマはLispのコンパイラ/インタプリタの動作に変更を加え、Lispを独自の言語へと変化させられる。&lt;/p&gt;

&lt;h2 id=&#34;16-1-簡単なlispマクロ&#34;&gt;16.1 簡単なLispマクロ&lt;/h2&gt;

&lt;p&gt;例えば、とても簡単な関数を考える。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;add&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;2値を加算して、副作用として和をREPLに表示する&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;format&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;The sum is ~a&amp;#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この関数のように、たかだか1つの変数&lt;code&gt;x&lt;/code&gt;を宣言するためだけに、多くの括弧が必要となっている場面は多い。&lt;br /&gt;
&lt;code&gt;let&lt;/code&gt;関数の括弧は、いわゆる &lt;strong&gt;視覚ノイズ&lt;/strong&gt; の一例である。
この括弧を隠蔽しようと思った時、何か関数を書くことで解決することはできない。
何故なら、&lt;code&gt;let&lt;/code&gt;は &lt;strong&gt;特殊形式&lt;/strong&gt; と呼ばれるコマンドの1つであるからである。&lt;br /&gt;
特殊形式は、言語の根幹に組み込まれており、通常のLisp関数ではできない特別なことができる。&lt;/p&gt;

&lt;p&gt;マクロを使えばおの余分な括弧を消すことができる。&lt;br /&gt;
ここで、余計な括弧を削除した&lt;code&gt;let1&lt;/code&gt;関数を作ってみる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defmacro&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;let1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;&amp;amp;body&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;val&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
     &lt;span class=&#34;o&#34;&gt;,@&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;見て分かる通り、マクロの定義は関数の定義とよく似ている。
ただし、&lt;code&gt;defun&lt;/code&gt;の代わりに&lt;code&gt;defmacro&lt;/code&gt;を使う。&lt;br /&gt;
関数と同様に、マクロは名前(ここでは&lt;code&gt;let1&lt;/code&gt;)と仮引数を持つ。&lt;br /&gt;
&lt;code&gt;let1&lt;/code&gt;を上の通り定義したら、括弧の少ない&lt;code&gt;let&lt;/code&gt;として次の通り使うことができる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;25&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;let1&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;25&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;マクロの展開&#34;&gt;マクロの展開&lt;/h3&gt;

&lt;p&gt;Lispのコンパイラ/インタプリタは、「標準のLispコード」しか解釈できない。
したがって、マクロ&lt;code&gt;let1&lt;/code&gt;は解釈できない。&lt;/p&gt;

&lt;p&gt;ここで、Lispのコンパイラ/インタプリタがマクロを解釈する前に、 &lt;strong&gt;マクロ展開&lt;/strong&gt; と呼ばれるステップが実施される。
マクロ展開器は、コード中のマクロを探して、それらを標準的なLispコードへど変換する。&lt;br /&gt;
したがって、マクロは関数が実行されるのと異なるタイミングで実行されることが分かる。
すなわち、下のとおりである。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;通常のLisp関数は、その関数を含むプログラムを実行するタイミング(実行時)で解釈される。&lt;/li&gt;
&lt;li&gt;マクロは、プログラムが実行される前、つまり、Lisp環境でプログラムが読み込まれてコンパイルされるタイミング(マクロ展開時)で解釈される。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;マクロはどんなふうに変換されるか&#34;&gt;マクロはどんなふうに変換されるか&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;defmacro&lt;/code&gt;によって新たなマクロを定義するということは、つまり、Lispのマクロ展開器に対して、新たな変換ルールを教えるということである。
マクロはもとのソースコードをLispの式の形で、引数として受け取る。
マクロの仕事は、尾野本のコードを標準のLispコードに変換することである。&lt;/p&gt;

&lt;p&gt;上で定義した&lt;code&gt;let1&lt;/code&gt;を例に、マクロがどのように変換されるのかを説明する。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;code&gt;let1&lt;/code&gt;再掲&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defmacro&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;let1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;&amp;amp;body&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;val&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
     &lt;span class=&#34;o&#34;&gt;,@&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最初の行は、「&lt;code&gt;let1&lt;/code&gt;で始まる行があったらそれを標準的なLispコードに変換するためのルールを定義する」と、マクロ変換器に伝えている。
&lt;code&gt;defmacro&lt;/code&gt;は、また、マクロに渡される引数についても定義している。&lt;br /&gt;
マクロの引数には、マクロが使われている場所に現れるもとのソースコードが渡される。
&lt;code&gt;let1&lt;/code&gt;マクロの場合は、次の3つの引数を受け取ることになる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;let1&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;25&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;dl&gt;
&lt;dt&gt;var&lt;/dt&gt;
&lt;dd&gt;
最初の引数は、ローカル変数として定義される名前である。
マクロの中では、引数`var`の値がその名前になっている。
上の呼び出しの例では、名前は`foo`である。
&lt;/dd&gt;
&lt;dt&gt;val&lt;/dt&gt;
&lt;dd&gt;
2番目の式は、ローカル変数の値を決めるコードである。
上の呼び出しの例では、`(+ 2 3)`となっている。
&lt;/dd&gt;
&lt;dt&gt;body&lt;/dt&gt;
&lt;dd&gt;
3番目の式は、`let1`の中で実行されるコードの本体である。
このコードの中では、`let1`が作る新しい変数(この例では`foo`)を使用できる。
マクロでは、このコードが引数`body`の値として使える。
&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;&lt;code&gt;let&lt;/code&gt;コマンドは本体の中に複数の式を書いておけるから、&lt;code&gt;let1&lt;/code&gt;も同様に複数の式が書けるようにする。&lt;br /&gt;
&lt;code&gt;&amp;amp;body&lt;/code&gt;はそれを実現するための特別なシンボルである。
&lt;code&gt;&amp;amp;body&lt;/code&gt;が書かれていると、マクロ展開時に「マクロの使われている場所に出てくる残りの式の全てを、リストにして次の引数に渡せ」という意味になる。
したがって、&lt;code&gt;let1&lt;/code&gt;の&lt;code&gt;body&lt;/code&gt;引数に渡ってくる値は、ネストしたリスト&lt;code&gt;((* foo foo))&lt;/code&gt;になっているというわけである。&lt;/p&gt;

&lt;p&gt;さて、&lt;code&gt;let1&lt;/code&gt;マクロの引数については分かった。
次に、マクロがその値を使ってどのように&lt;code&gt;let1&lt;/code&gt;を&lt;code&gt;let&lt;/code&gt;に変換するのかを見ていく。&lt;br /&gt;
Lispでソースコードを変換する最も簡単な方法は、バッククォート構文を使用することである。
バッククォートを頭につけた準クォートでは、基本はデータモードで、カンマを付けた部分だけコードモードに戻る。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;val&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;let1&lt;/code&gt;マクロは、バッククォートで作られる上のリストを返す。
リストの先頭の要素はシンボル&lt;code&gt;let&lt;/code&gt;である。続いて、変数の名前と値が置かれる。&lt;br /&gt;
これにより、本来の&lt;code&gt;let&lt;/code&gt;コマンドの構文どおりに、ネストされたリストに収まっていることが分かる。&lt;br /&gt;
最後に、&lt;code&gt;let1&lt;/code&gt;に渡された&lt;code&gt;body&lt;/code&gt;のコードが、&lt;code&gt;let&lt;/code&gt;コマンドの対応する位置に挿入されている。&lt;br /&gt;
ここで、&lt;code&gt;body&lt;/code&gt;引数の値を挿入するために、 &lt;strong&gt;スプライシングカンマ&lt;/strong&gt; (&lt;code&gt;,@&lt;/code&gt;)を使用している。
スプライシングカンマを使用することで、カンマの対象範囲となるデータの括弧を取り外す(=スプライスする)。&lt;/p&gt;

&lt;p&gt;なぜスプライシングが必要なのかは、&lt;code&gt;let1&lt;/code&gt;が次のように使われた場合を考えてみると分かりやすい。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;let1&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;princ&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Lisp is awesome!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;awesome!&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;25&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この例では、&lt;code&gt;let1&lt;/code&gt;の本体中に複数の式が使われている。&lt;br /&gt;
よくよく考えれば分かるが、&lt;code&gt;let&lt;/code&gt;コマンドは、暗黙の&lt;code&gt;progn&lt;/code&gt;コマンドを含んでいて、本体内に複数のLispコマンドを記載できる。
&lt;code&gt;let1&lt;/code&gt;マクロも、&lt;code&gt;body&lt;/code&gt;引数の前に特別な&lt;code&gt;&amp;amp;body&lt;/code&gt;シンボルを置いておいたおかげで同じように複数の式を扱える。&lt;br /&gt;
上の例では、&lt;code&gt;body&lt;/code&gt;の値は&lt;code&gt;((princ &amp;quot;Lisp is awesome!&amp;quot;) (* foo foo))&lt;/code&gt;となっているため、スプライスすると、&lt;code&gt;let&lt;/code&gt;に複数の式を渡したことと同等の結果となるわけである。&lt;/p&gt;

&lt;h3 id=&#34;簡単なマクロを使ってみる&#34;&gt;簡単なマクロを使ってみる&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;let1&lt;/code&gt;マクロが書けたので、それを使って本章の最初に書いた&lt;code&gt;add&lt;/code&gt;関数を書き直してみる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;add&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;let1&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;format&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;The sum is ~a&amp;#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;また、&lt;code&gt;macroexpand&lt;/code&gt;コマンドを使えば、マクロがどのようなコードを作るのか確かめられる。
マクロの呼び出しコードを、次のように&lt;code&gt;macroexpand&lt;/code&gt;に渡せば良い。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;macroexpand&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;let1&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;LET&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;FOO&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;FOO&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;FOO&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;T&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最後の&lt;code&gt;T&lt;/code&gt;は、&lt;code&gt;macroexpand&lt;/code&gt;が問題なくマクロを展開できたことを表している。&lt;br /&gt;
&lt;strong&gt;NOTE:&lt;/strong&gt; マクロが複雑になるにつれ、&lt;code&gt;macroexpand&lt;/code&gt;はとても有用なコマンドになる。&lt;/p&gt;

&lt;h2 id=&#34;16-2-もっと複雑なマクロ&#34;&gt;16.2 もっと複雑なマクロ&lt;/h2&gt;

&lt;p&gt;ここで、リストの長さを求める&lt;code&gt;my-length&lt;/code&gt;コマンドを考える。
末尾呼び出し最適化が可能な形で実装したものが次の例である。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;my-length&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;labels&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;acc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
             &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;
                 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cdr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;1+&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;acc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                 &lt;span class=&#34;nv&#34;&gt;acc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この関数には、特に悪い意味で気になる特徴が2点ある。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;リストをなめていく関数に共通する処理として、次の2つがある

&lt;ul&gt;
&lt;li&gt;リストが空かどうかを調べることと&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cdr&lt;/code&gt;でリストの残りを調べること&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;わざわざローカル関数を定義していること&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これらの問題を緩和するため、ここからはマクロで対処してみる。&lt;br /&gt;
なお、これからの説明は、素朴なマクロ(バグあり)の作成から始めて、段々とブラッシュアップしていく流れになっている。&lt;/p&gt;

&lt;h3 id=&#34;リストを分割するマクロ&#34;&gt;リストを分割するマクロ&lt;/h3&gt;

&lt;p&gt;ここでは、&lt;code&gt;split&lt;/code&gt;マクロを作成する。
&lt;code&gt;my-length&lt;/code&gt;のような、リストを頭から順に見ていく関数を簡潔に書けるようにする。&lt;/p&gt;

&lt;p&gt;リストをなめていく関数は、常に、まずリストが空かどうかをチェックし、空でなければその頭と残りを&lt;code&gt;car&lt;/code&gt;と&lt;code&gt;cdr&lt;/code&gt;で取り出して処理をする。
&lt;code&gt;split&lt;/code&gt;マクロは、その共通部分をまとめてやってくれるものである。&lt;/p&gt;

&lt;p&gt;まずは、&lt;code&gt;split&lt;/code&gt;マクロの使い方について次に示す。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;split&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;format&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;This can be split into ~a and ~a.&amp;#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;head&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tail&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;format&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;This can not be split&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;This&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;can&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;be&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;split&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;into&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;split&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;format&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;This can be split into ~a and ~a.&amp;#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;head&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tail&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;format&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;This cannot be split.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;This&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;can&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;be&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;split.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;split&lt;/code&gt;マクロの最初の引数は、頭と残りに分解したいリストである。&lt;br /&gt;
もし分解可能なら、2番目の引数に渡された式が実行される。
このとき、&lt;code&gt;split&lt;/code&gt;マクロは自動的に2つのローカル変数、&lt;code&gt;head&lt;/code&gt;と&lt;code&gt;tail&lt;/code&gt;を作り、リストの頭と残りをそれに格納する。
これにより、関数の中で&lt;code&gt;car&lt;/code&gt;と&lt;code&gt;cdr&lt;/code&gt;を呼ぶ手間を省ける。
リストが空だったら、3番目の引数に渡された式が実行される。&lt;/p&gt;

&lt;p&gt;次に、&lt;code&gt;split&lt;/code&gt;マクロのコードを見てみる。
このコードにはバグがある(後述)。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;; バグあり&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defmacro&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;split&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;yes&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;no&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;val&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;head&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;val&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
             &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;tail&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cdr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;val&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
         &lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;yes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
       &lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;no&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;split&lt;/code&gt;マクロは3つの引数を取る。
すなわち、このマクロを使うときには常に3つの引数を渡す必要がある。&lt;br /&gt;
また、リストが空だった場合、&lt;code&gt;no&lt;/code&gt;の位置からは変数&lt;code&gt;head&lt;/code&gt;と&lt;code&gt;tail&lt;/code&gt;は見えないことに注意すること。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;split&lt;/code&gt;マクロを使えば&lt;code&gt;my-length&lt;/code&gt;関数は少し綺麗になる。
&lt;code&gt;tail&lt;/code&gt;変数を使うことで、コードが簡潔になっているのが分かる。
このマクロのように、自動的に変数を作り出すマクロは、 &lt;strong&gt;アナフォリックマクロ&lt;/strong&gt; と呼ばれる。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Anaphoric macro. Anaphoric(前方参照)とは、既に出ている話題に言及する際に代名詞などを使うことである。&lt;br /&gt;
ここの例では、分割したリストの頭と残りを、自動的に作られる変数で言及できる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;my-length&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;labels&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;acc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
             &lt;span class=&#34;c1&#34;&gt;;; lst: リスト&lt;/span&gt;
             &lt;span class=&#34;c1&#34;&gt;;; acc: アキュムレータ&lt;/span&gt;
             &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;split&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;
               &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tail&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;1+&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;acc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
               &lt;span class=&#34;nv&#34;&gt;acc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;マクロ中で式が繰り返し実行されるのを防ぐ&#34;&gt;マクロ中で式が繰り返し実行されるのを防ぐ&lt;/h3&gt;

&lt;p&gt;マクロでよくあるバグとしては、コードを意図せずに複数回実行してしまうことである。
実際に、上の&lt;code&gt;split&lt;/code&gt;マクロにもこのバグが存在してしまっている。
例えば、次のコードはそのバグを引き起こす。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;split&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;progn&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;princ&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Lisp rocks!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;format&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;This can be split into ~a and ~a.&amp;#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;head&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tail&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;format&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;This cannot be split.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;Lisp&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;rocks!Lisp&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;rocks!Lisp&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;rocks!This&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;can&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;be&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;split&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;into&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;split&lt;/code&gt;を使ったら、&amp;rdquo;Lisp rocks!&amp;ldquo;というメッセージが3回も表示されてしまった。&lt;/p&gt;

&lt;p&gt;これは、マクロに渡される引数が生のソースコードであることが原因である。
&lt;code&gt;split&lt;/code&gt;マクロの展開時に&lt;code&gt;val&lt;/code&gt;を3回参照するので、&lt;code&gt;princ&lt;/code&gt;が3回実行されてしまったのである。&lt;/p&gt;

&lt;p&gt;実際にマクロがどのように展開されるかは、&lt;code&gt;macroexpand&lt;/code&gt;を使えば確かめることができる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;macroexpand&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;split&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;progn&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;princ&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Lisp rocks!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                             &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;format&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;This can be split into ~a and ~a.&amp;#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;head&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tail&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;format&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;This cannot be split.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;IF&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;PROGN&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;PRINC&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Lisp rocks!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;LET&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;HEAD&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;CAR&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;PROGN&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;PRINC&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Lisp rocks!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;TAIL&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;CDR&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;PROGN&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;PRINC&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Lisp rocks!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;FORMAT&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;This can be split into ~a and ~a.&amp;#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;HEAD&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;TAIL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;FORMAT&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;This cannot be split.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;T&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この問題の解決方法を考えてみると、次のようにローカル変数を使ってみれば良いことに気付く。
(この新しい&lt;code&gt;split&lt;/code&gt;マクロでは、間に作った&lt;code&gt;let1&lt;/code&gt;マクロを使ってみている。マクロの中で別のマクロを使うことに問題はない。)&lt;br /&gt;
この定義を使用すれば、valの式は1度しか評価されないから、上のように&lt;code&gt;princ&lt;/code&gt;が呼ばれることはない。&lt;br /&gt;
&lt;strong&gt;NOTE:&lt;/strong&gt; しかしながら、これにはまだバグがある。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;; 注意! これにもまだバグがある&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defmacro&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;split&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;yes&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;no&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;let1&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;val&lt;/span&gt;
     &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;
         &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;head&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
               &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;tail&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cdr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
           &lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;yes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
         &lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;no&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;変更捕捉を避ける&#34;&gt;変更捕捉を避ける&lt;/h3&gt;

&lt;p&gt;上の&lt;code&gt;split&lt;/code&gt;のバグを見るには、次のコードを実行すれば分かる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;let1&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1000&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;split&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;vg&#34;&gt;***&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;number&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;macroexpand&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;split&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;LET&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;X&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;IF&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;X&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;LET&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;HEAD&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;CAR&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;TAIL&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;CDR&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;X&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;HEAD&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
        &lt;span class=&#34;no&#34;&gt;NIL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;T&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このように、&lt;code&gt;split&lt;/code&gt;のには&lt;code&gt;x&lt;/code&gt;の展開が含まれるが、これがマクロに渡したコードと衝突を起こしてしまっている。
この例では、&lt;code&gt;split&lt;/code&gt;マクロが変数&lt;code&gt;x&lt;/code&gt;を意図せず捕捉してしまい、見たい値をシャドウしてしまった。
これによって、&lt;code&gt;split&lt;/code&gt;の外で宣言した&lt;code&gt;x&lt;/code&gt;には、最初に&lt;code&gt;1000&lt;/code&gt;を代入したにもかかわらず、&lt;code&gt;split&lt;/code&gt;の中で&lt;code&gt;x&lt;/code&gt;をシャドウして、
さらにリスト&lt;code&gt;&#39;(2 3)&lt;/code&gt;を代入しようとしたために型違いエラーが発生した。&lt;/p&gt;

&lt;p&gt;このような変数名の衝突を回避するための素朴な解決策としては、衝突しなさそうな&lt;code&gt;aeicfnuhaceknf&lt;/code&gt;のようなおかしな名前の変数を使うというものがある。&lt;br /&gt;
これを実現するための仕組みとして、&lt;code&gt;gensym&lt;/code&gt;関数がCommon Lispには予め備わっている。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;gensym&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;ss&#34;&gt;#:G8695&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;gensym&lt;/code&gt;関数が作る名前は、コード中で唯一だと保証される。
また、&lt;code&gt;gensym&lt;/code&gt;が返した値と同じ名前をコード中に上書き定義できないようにされており、それが分かるようにプレフィックス(&lt;code&gt;#:&lt;/code&gt;)がつけられている。
したがって、&lt;code&gt;gensym&lt;/code&gt;を実行してから、その返り値と全く同じ変数名を宣言しても、別々の変数として扱われる。&lt;/p&gt;

&lt;p&gt;ここで、&lt;code&gt;gensym&lt;/code&gt;を使って&lt;code&gt;split&lt;/code&gt;マクロを変数補足に対して安全になるように修正してみる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;; 安全なバージョン&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defmacro&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;split&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;yes&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;no&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;let1&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;g&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;gensym&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;; マクロ展開時にgにシンボル名を代入&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;;; マクロ展開時には既にgはシンボル名に評価されている&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;let1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;g&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;val&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;g&lt;/span&gt;
           &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;head&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;tail&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cdr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
             &lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;yes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
           &lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;no&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;[9]&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;macroexpand&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;split&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;LET&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;#:G2985&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;IF&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;#:G2985&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;LET&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;HEAD&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;CAR&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;#:G2985&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;TAIL&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;CDR&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;#:G2985&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;X&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;HEAD&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;no&#34;&gt;NIL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;no&#34;&gt;T&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;[10]&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;macroexpand&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;split&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;LET&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;#:G2986&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;IF&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;#:G2986&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;LET&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;HEAD&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;CAR&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;#:G2986&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;TAIL&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;CDR&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;#:G2986&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;X&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;HEAD&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;no&#34;&gt;NIL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;no&#34;&gt;T&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;[11]&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;macroexpand&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;split&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;LET&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;#:G2987&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;IF&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;#:G2987&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;LET&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;HEAD&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;CAR&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;#:G2987&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;TAIL&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;CDR&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;#:G2987&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;X&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;HEAD&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;no&#34;&gt;NIL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;T&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上のコードの&lt;code&gt;(let1 g (gensym))&lt;/code&gt;部分にバッククォートが無い(=準クォートではない)ことに注意すること。
すなわち、この部分は、 &lt;strong&gt;マクロが作り出したコードの実行時&lt;/strong&gt; ではなく、 &lt;strong&gt;マクロ自身の展開時&lt;/strong&gt; に評価される。
また、マクロが展開されるたびに、&lt;code&gt;gensym&lt;/code&gt;が異なる変数名を生成していることも分かる。&lt;/p&gt;

&lt;p&gt;また、当然だが、変数名が衝突しないことと変数捕捉しないことは同じではない。
このバージョンでも&lt;code&gt;head&lt;/code&gt;と&lt;code&gt;tail&lt;/code&gt;という変数を使用しているため、これらの変数を別の意味で使っているコードと混ぜて使用したら、やはり問題は起こる。
しかし、&lt;code&gt;head&lt;/code&gt;と&lt;code&gt;tail&lt;/code&gt;に関しては、むしろわざと変数を捕捉しているのだ。
アナフォリックマクロでは、マクロ本体内でこれらの変数を使えるようにわざわざ捕捉しているわけであるから、予め決まっている変数を捕捉するのはバグではなく &lt;strong&gt;仕様&lt;/strong&gt; である。&lt;/p&gt;

&lt;h3 id=&#34;再帰呼び出しマクロ&#34;&gt;再帰呼び出しマクロ&lt;/h3&gt;

&lt;p&gt;ここで、もう一度、&lt;code&gt;my-length&lt;/code&gt;を修正する。
前に作った&lt;code&gt;my-length&lt;/code&gt;を再掲する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;my-length&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;labels&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;acc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
             &lt;span class=&#34;c1&#34;&gt;;; lst: リスト&lt;/span&gt;
             &lt;span class=&#34;c1&#34;&gt;;; acc: アキュムレータ&lt;/span&gt;
             &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;split&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;
               &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tail&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;1+&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;acc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
               &lt;span class=&#34;nv&#34;&gt;acc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;先述の通り、このコードにもまだ繰り返し出てくるパターンがある。
すなわち、ローカル関数&lt;code&gt;f&lt;/code&gt;を定義しているところである。&lt;/p&gt;

&lt;p&gt;ここで、再帰部分を隠す&lt;code&gt;recurse&lt;/code&gt;マクロを次に示す。
まず、&lt;code&gt;recurse&lt;/code&gt;マクロの使用例を示す。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;recurse&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;fresh-line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;zerop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;princ&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;lift-off!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;progn&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;princ&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
             &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;self&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;1-&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;lift-off!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;recurse&lt;/code&gt;マクロの最初のパラメータは、変数とその初期値のリストである。
この例では、変数&lt;code&gt;n&lt;/code&gt;を宣言し、その初期値を&lt;code&gt;9&lt;/code&gt;に設定している。&lt;br /&gt;
残りの行は再帰関数の本体を構成する。&lt;/p&gt;

&lt;p&gt;再帰関数の本体では、まず、改行している。
次に、&lt;code&gt;n&lt;/code&gt;がゼロになったか否かを調べ、ゼロになっていれば&amp;rdquo;lift-off!&amp;ldquo;を表示する。
そうでなければ現在の&lt;code&gt;n&lt;/code&gt;の値を出力し、自分自身を再帰呼び出しする。
&lt;code&gt;split&lt;/code&gt;マクロと同様、このマクロもアナフォリックである。
すなわち、&lt;code&gt;recurse&lt;/code&gt;マクロでは、変数&lt;code&gt;self&lt;/code&gt;で自分自身の関数を参照できる。
再帰の条件が整ったら、&lt;code&gt;self&lt;/code&gt;を呼び出せば良い。
この例では&lt;code&gt;(1- n)&lt;/code&gt;を引数として渡して、カウントダウンを実現している。&lt;/p&gt;

&lt;p&gt;では、&lt;code&gt;recurse&lt;/code&gt;マクロを実装してみる。
まず、変数とその初期値の対を切り出すのに便利なように、補助関数&lt;code&gt;pairs&lt;/code&gt;関数を定義する。
&lt;code&gt;pairs&lt;/code&gt;関数は末尾呼び出し最適化可能な、リストを舐める関数である。
この関数を定義するためにローカル関数&lt;code&gt;f&lt;/code&gt;を定義するはめに陥っているが、後述する方法でこういった関数定義をしなくて良くなる。
この関数&lt;code&gt;f&lt;/code&gt;の中では、&lt;code&gt;split&lt;/code&gt;マクロを使ってリストを分解しているが、今回はリストから2つずつ要素を取り出したいため、&lt;code&gt;tail&lt;/code&gt;が空でないかを改めて調べている。
これにより、リストが空か、要素が1つしか残っていない(&lt;code&gt;(if tail)&lt;/code&gt;が偽)場合は、蓄積した値を返す。
そうでなければ最初の2つの要素をペアにしてアキュムレータ&lt;code&gt;acc&lt;/code&gt;に追加し、再帰する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;pairs&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;;; lst: 2要素ずつコンスセルを作る対象となるリスト&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;;; acc: 作ったコンスセルを格納するアキュムレータ&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;labels&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;acc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
               &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;split&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;
                 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tail&lt;/span&gt;
                   &lt;span class=&#34;c1&#34;&gt;;; lstが空でなく、かつ、残り部分も空でない場合、&lt;/span&gt;
                   &lt;span class=&#34;c1&#34;&gt;;; =&amp;gt; ((head . tail) これまでに作ったコンスセル達)&lt;/span&gt;
                   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cdr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tail&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cons&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cons&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;head&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tail&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;acc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                   &lt;span class=&#34;c1&#34;&gt;;; lstが空ではないが、残り部分が空の場合、&lt;/span&gt;
                   &lt;span class=&#34;c1&#34;&gt;;; これまでに作ったコンスセル達は逆順なので、順序を正してから返す&lt;/span&gt;
                   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;reverse&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;acc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                 &lt;span class=&#34;c1&#34;&gt;;; lstが空の場合、&lt;/span&gt;
                 &lt;span class=&#34;c1&#34;&gt;;; これまでに作ったコンスセル達は逆順なので、順序を正してから返す&lt;/span&gt;
                 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;reverse&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;acc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;PAIRS&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;pairs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;d&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;C&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;E&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;F&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次に、いよいよ&lt;code&gt;recurse&lt;/code&gt;マクロを定義する。
変数&lt;code&gt;p&lt;/code&gt;には、&lt;code&gt;pair&lt;/code&gt;関数を使って最初のリストを変数と初期値のコンスセルのリストにしたものを代入する。
次に、&lt;code&gt;self&lt;/code&gt;ローカル関数を定義する。
&lt;code&gt;self&lt;/code&gt;の引数は、最初のリストの基数番目の要素(つまり&lt;code&gt;recurse&lt;/code&gt;に渡した&lt;code&gt;vars&lt;/code&gt;のリスト中の変数)を並べたものである。
&lt;code&gt;self&lt;/code&gt;は、マクロ展開された式の中から参照できる(つまりアナフォリックに参照できる)必要があるため、&lt;code&gt;(gensym)&lt;/code&gt;を使わず、直接名前を書いている。
そしてマクロの最後で、初期値を引数として&lt;code&gt;self&lt;/code&gt;を呼び出す。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defmacro&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;recurse&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;vars&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;&amp;amp;body&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;;; p: varsで得られた変数とその初期値のコンスセルのリスト&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;let1&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;pairs&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;vars&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;;; ローカル関数self&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;;; 引数: varsで得られた変数&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;;; 関数本体 bodyで得られたリスト(複数可)&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;labels&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;self&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;mapcar&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                &lt;span class=&#34;o&#34;&gt;,@&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
       &lt;span class=&#34;c1&#34;&gt;;; ローカル関数selfに初期値を適用&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;self&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;,@&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;mapcar&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cdr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最後に、&lt;code&gt;recurse&lt;/code&gt;マクロを使って&lt;code&gt;my-length&lt;/code&gt;関数を更に簡潔にする。
&lt;code&gt;my-length&lt;/code&gt;に必要な補助関数やマクロ定義も全て示す。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defmacro&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;let1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;&amp;amp;body&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;;; 変数を1つだけ代入して式を実行する&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;;; var: 代入先の変数&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;;; val: 代入する値&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;;; body: 実行する式(複数可)&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;val&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
     &lt;span class=&#34;o&#34;&gt;,@&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defmacro&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;split&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;yes&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;no&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;;; valに対して頭と残りへの分解を試みる&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;;; val: 分解対象の式&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;;; yes: 分解成功時に実行する式&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;;; no: 分解失敗時に実行する式&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;let1&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;g&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;gensym&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;; マクロ展開時にgにシンボル名を代入&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;;; マクロ展開時には既にgはシンボル名に評価されている&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;let1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;g&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;val&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;g&lt;/span&gt;
           &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;head&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;tail&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cdr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
             &lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;yes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
           &lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;no&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;pairs&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;2要素ずつコンスセルを作る
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   lst: 2要素ずつコンスセルを作る対象となるリスト&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;;; lst: 2要素ずつコンスセルを作る対象となるリスト&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;;; acc: 作ったコンスセルを格納するアキュムレータ&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;labels&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;acc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
             &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;split&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;
               &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tail&lt;/span&gt;
                 &lt;span class=&#34;c1&#34;&gt;;; lstが空でなく、かつ、残り部分も空でない場合、&lt;/span&gt;
                 &lt;span class=&#34;c1&#34;&gt;;; =&amp;gt; ((head . tail) これまでに作ったコンスセル達)&lt;/span&gt;
                 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cdr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tail&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cons&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cons&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;head&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tail&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;acc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                 &lt;span class=&#34;c1&#34;&gt;;; lstが空ではないが、残り部分が空の場合、&lt;/span&gt;
                 &lt;span class=&#34;c1&#34;&gt;;; これまでに作ったコンスセル達は逆順なので、順序を正してから返す&lt;/span&gt;
                 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;reverse&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;acc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
               &lt;span class=&#34;c1&#34;&gt;;; lstが空の場合、&lt;/span&gt;
               &lt;span class=&#34;c1&#34;&gt;;; これまでに作ったコンスセル達は逆順なので、順序を正してから返す&lt;/span&gt;
               &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;reverse&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;acc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defmacro&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;recurse&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;vars&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;&amp;amp;body&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;;; 再帰処理を定義する&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;;; vars: 変数とその初期値(連続してOK)&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;;; body: 再帰する処理(再帰呼び出しする関数は変数self)&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;;; p: varsで得られた変数とその初期値のコンスセルのリスト&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;let1&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;pairs&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;vars&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;;; ローカル関数self&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;;; 引数: varsで得られた変数&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;;; 関数本体 bodyで得られたリスト(複数可)&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;labels&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;self&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;mapcar&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                &lt;span class=&#34;o&#34;&gt;,@&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
       &lt;span class=&#34;c1&#34;&gt;;; ローカル関数selfに初期値を適用&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;self&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;,@&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;mapcar&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cdr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;my-length&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;リストの長さを返す
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   lst: 対象のリスト
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   ret: リストの長さ&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;recurse&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;acc&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
           &lt;span class=&#34;c1&#34;&gt;;; lst: 走査対象のリスト 初期値lst&lt;/span&gt;
           &lt;span class=&#34;c1&#34;&gt;;; acc: リストの長さ保持用 初期値0&lt;/span&gt;
           &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;split&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;
             &lt;span class=&#34;c1&#34;&gt;;; リストに残りがあれば残りに対して再帰呼び出しする&lt;/span&gt;
             &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;self&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tail&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;1+&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;acc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
             &lt;span class=&#34;c1&#34;&gt;;; リストが空になったらリストの長さを返す&lt;/span&gt;
             &lt;span class=&#34;nv&#34;&gt;acc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;16-3-マクロの危険と代替案&#34;&gt;16.3 マクロの危険と代替案&lt;/h2&gt;

&lt;p&gt;マクロはコードを生成するコードを書く手段である。
これにより、Lispはメタプログラミングや新しい言語のアイデアやプロトタイプを作るのに適した言語であるといえる。
しかし、マクロはある意味、小手先のテクニックである。
自作の言語を、標準のLispであるかのようにLispコンパイラ/インタプリタに読み込ませるためのトリックである。
道具立てとしては非常に強力なものだが、エレガントではない。&lt;/p&gt;

&lt;p&gt;マクロの一番の欠点は、コードが理解しにくくなることである。
つまり、他のプログラマにとって初見となるプログラミング方言を作っているわけである。
したがって、しばらく後にマクロを駆使したプログラムを読み解くのは非常に骨が折れる作業になる。&lt;/p&gt;

&lt;p&gt;初心者Lisperがマクロを書きたくなる場合の多くは、もっとエレガントな解法があるものである。
例えば、&lt;code&gt;my-length&lt;/code&gt;をマクロを使わずに簡潔に表現する方法は、実は存在する。
次のように、高階関数&lt;code&gt;reduce&lt;/code&gt;を使えば良いだけである。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;my-length&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;reduce&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;1+&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
          &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;
          &lt;span class=&#34;ss&#34;&gt;:initial-value&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;高階関数&lt;code&gt;reduce&lt;/code&gt;は、リストの各要素に対して関数適用するための関数である。
&lt;code&gt;reduce&lt;/code&gt;関数の第1引数には、縮約を行う関数を渡してやる。
ここでは&lt;code&gt;lambda&lt;/code&gt;によって無名関数を作っている。
この&lt;code&gt;lambda&lt;/code&gt;関数の第1引数&lt;code&gt;x&lt;/code&gt;は、最初に、&lt;code&gt;reduce&lt;/code&gt;関数のキーワード引数の&lt;code&gt;:initial-value&lt;/code&gt;の値&lt;code&gt;0&lt;/code&gt;を束縛する。
そして&lt;code&gt;lambda&lt;/code&gt;関数本体の処理を行い、その結果をまた次に呼んだ&lt;code&gt;lambda&lt;/code&gt;関数の&lt;code&gt;x&lt;/code&gt;に束縛する。
これにより、リストの各要素に対して&lt;code&gt;lambda&lt;/code&gt;が呼ばれただけ&lt;code&gt;x&lt;/code&gt;がインクリメントされつつ&lt;code&gt;lambda&lt;/code&gt;に渡される。
(すなわち&lt;code&gt;x&lt;/code&gt;はアキュムレータである。)&lt;/p&gt;

&lt;p&gt;また、縮約関数には、その時に見ているリストの各要素の値も引数に渡されている。
それが引数&lt;code&gt;i&lt;/code&gt;である。
ただし、&lt;code&gt;my-length&lt;/code&gt;関数では&lt;code&gt;i&lt;/code&gt;を使う必要はない。&lt;/p&gt;

&lt;p&gt;このように、高階関数が使える場合はそちらを使った方がくだらないバグに悩まされることもなく、簡単である。
しかし、高階関数が使えない場合もあるから、その場合にマクロを使えるようになっておくことが望ましい。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>書籍 Land of Lisp 17章 ドメイン特化言語</title>
      <link>https://otaon.github.io/web/ja-jp/2019/03/07/%E6%9B%B8%E7%B1%8D-land-of-lisp-17%E7%AB%A0-%E3%83%89%E3%83%A1%E3%82%A4%E3%83%B3%E7%89%B9%E5%8C%96%E8%A8%80%E8%AA%9E/</link>
      <pubDate>Thu, 07 Mar 2019 00:00:00 +0900</pubDate>
      
      <guid>https://otaon.github.io/web/ja-jp/2019/03/07/%E6%9B%B8%E7%B1%8D-land-of-lisp-17%E7%AB%A0-%E3%83%89%E3%83%A1%E3%82%A4%E3%83%B3%E7%89%B9%E5%8C%96%E8%A8%80%E8%AA%9E/</guid>
      
        <description>

&lt;h2 id=&#34;t-o-c&#34;&gt;T.O.C.&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#171-ドメインとは何か&#34;&gt;17.1 ドメインとは何か&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#172-svgファイルを書き出す&#34;&gt;17.2 SVGファイルを書き出す&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#173-魔法使いのアドベンチャーゲームに新コマンドを追加する&#34;&gt;17.3 魔法使いのアドベンチャーゲームに新コマンドを追加する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;マクロが最も効果的な場面の一つは、 &lt;strong&gt;ドメイン特化言語(DSL)&lt;/strong&gt; を作る場面である。
DSLプログラミングは高度なマクロプログラミングテクニックの1つで、難しい問題を解くために、Lispの構造をその問題に最適な言語へと大幅に変更するというものである。
DSLプログラミングにマクロが必須というわけではないが、Lispではいくつかのマクロを書くことで簡単にDSLを作ることができる。&lt;/p&gt;

&lt;h1 id=&#34;17-1-ドメインとは何か&#34;&gt;17.1 ドメインとは何か&lt;/h1&gt;

&lt;p&gt;例えば、「平均的なプログラム」というものを思い浮かべたとしても、個々のプログラムはその「平均」からは外れている。
すなわち、各プログラムは、特定の問題を解くために作られる。
そして、人が考えを及ぼす領域( &lt;strong&gt;ドメイン&lt;/strong&gt; )には、それぞれ、その領域でこれまでに考え出された様々な枠組みがあり、それが問題を解くプログラムの書き方にも影響を与える。
&lt;strong&gt;DSL&lt;/strong&gt; を使うと、元のプログラミング言語を、ドメイン特有の枠組みに合わせた言語へ拡張できる。&lt;/p&gt;

&lt;p&gt;ここからは、特定のドメインを取り上げて、そのドメインでLispを使いやすくするDSLを2つ作ってみる。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;作成するDSL&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SVG(scalable vector graphics)ファイルを書き出すためのDSL&lt;/li&gt;
&lt;li&gt;魔法使いのアドベンチャーゲームのコマンドのためのDSL&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;17-2-svgファイルを書き出す&#34;&gt;17.2 SVGファイルを書き出す&lt;/h1&gt;

&lt;p&gt;SVGフォーマットは、グラフィクスの描画のためのファイルフォーマットである。
円や多角形といったオブジェクトを配置し、コンピュータによってそれを描画する。
SVGフォーマットでは、画像をピクセルではなくベクタによって記述するため、SVGイメージは任意の大きさに拡大縮小して描画できる。&lt;/p&gt;

&lt;p&gt;SVGフォーマットはWebブラウザで描画できる。
実際に、SVGフォーマットのファイルをWebブラウザで描画してみる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;svg&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;xmlns=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;http://www.w3.org/2000/svg&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&#34;nt&#34;&gt;&amp;lt;circle&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;cx=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;50&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;cy=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;50&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;r=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;50&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;style=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;fill:rgb(255,0,0);stroke:rgb(155,0,0)&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&#34;nt&#34;&gt;&amp;lt;/circle&amp;gt;&lt;/span&gt;
	&lt;span class=&#34;nt&#34;&gt;&amp;lt;circle&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;cx=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;100&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;cy=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;100&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;r=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;50&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;style=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;fill:rgb(0,0,255);stroke:rgb(0,0,155)&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&#34;nt&#34;&gt;&amp;lt;/circle&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;タグマクロを使ってxmlとhtmlを生成する&#34;&gt;タグマクロを使ってXMLとHTMLを生成する&lt;/h2&gt;

&lt;p&gt;XMLフォーマットは(HTMLフォーマットと同様に)入れ子になったタグによって構成されている。
開きタグは、それぞれ、閉じタグと対になっている。
閉じタグは、開きタグと同じ名前だが、先頭に&lt;code&gt;/&lt;/code&gt;がついている。
また、タグには属性をつけられる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;mytag&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;color=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;BLUE&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;height=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;9&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&#34;nt&#34;&gt;&amp;lt;inner_tag&amp;gt;&lt;/span&gt;
	&lt;span class=&#34;nt&#34;&gt;&amp;lt;/inner_tag&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/mytag&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;マクロの補助関数を書く&#34;&gt;マクロの補助関数を書く&lt;/h3&gt;

&lt;p&gt;マクロを作成していると、マクロの仕事の大部分は関数でこなせると気付く場面が多々ある。
実際、マクロの仕事の殆どは補助関数に任せて、それからマクロを実装する方が良い。
そうすれば、マクロそのものはシンプルに保てる。&lt;/p&gt;

&lt;p&gt;ここからは、LispからXML形式のタグを出力するための補助関数を先に作成する。
まず、補助関数&lt;code&gt;print-tag&lt;/code&gt;を作成する。
この関数は、1つの開きタグ、または閉じタグを出力する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;print-tag&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;alst&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;closingp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;xmlフォーマットの開きタグ、または、閉じタグを出力する
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   name: タグ名
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   alst: 属性名と属性値のコンスセルのリスト
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   closingp: 閉じタグか否か&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;princ&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;#\&amp;lt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;; タグの開き角括弧&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;;; 閉じタグならタグ名の頭に/をつける&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;closingp&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;princ&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;#\/&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;;; タグ名を小文字に変換する&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;princ&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;string-downcase&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;;; 小文字の属性名と属性値を出力する&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;mapc&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;att&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;format&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34; ~a=\&amp;#34;~a\&amp;#34;&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;string-downcase&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;att&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cdr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;att&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;alst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;princ&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;#\&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;; タグの閉じ角括弧&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;print-tag&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;mytag&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;color&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;blue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;height&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;&amp;lt;mytag&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;color=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;BLUE&amp;#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;height=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;9&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この通り、XMLタグを出力するだけであればこの関数で十分である。
しかし、全てのタグ出力をこのように出力するのは手間がかかる。
そこで、&lt;code&gt;tag&lt;/code&gt;マクロを書いて効率化を図る。&lt;/p&gt;

&lt;h3 id=&#34;tagマクロを作る&#34;&gt;tagマクロを作る&lt;/h3&gt;

&lt;p&gt;これから書く&lt;code&gt;tag&lt;/code&gt;マクロは、 &lt;strong&gt;Paul Graham&lt;/strong&gt; によるLisp方言Arcにある同名のマクロを採用したものである。
このマクロでは、&lt;code&gt;print-tag&lt;/code&gt;を次の3点において改善する。
どれも、マクロでなければ改善できないものばかりである。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;タグは常に対になっている必要がある。
しかし、タグがネストしていると、1つの関数だけでは閉じタグと開きタグの間に、内側の要素のタグを表記できない。
ネストを考慮しつつタグを対にして表示するには、内側のタグの表示処理の実行前と実行後に外側のタグの表示処理を実行する必要があるが、関数は実行前に引数が全て実行されてしまう。&lt;/li&gt;
&lt;li&gt;タグ名と属性名は動的に変える必要がないため、静的なデータとして持っておいて良い。
すなわち、そのようなデータに対してクオートをつけて呼び出すのは手間である。換言すれば、タグ名はデフォルトでデータモードとして扱われるべきである。&lt;/li&gt;
&lt;li&gt;タグ名と違い、属性値の方は一般的に動的に変えられる。
したがって、ここで作るマクロでは、属性値はコードモードとする。そして、Lispコードを書いておけばその実行結果が属性値として使えるようにする。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これらをまとめると、例えばREPL上で&lt;code&gt;tag&lt;/code&gt;マクロを使ったら次のように実行されてほしいわけである。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;tag&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;mytag&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;color&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;blue&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;height&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;&amp;lt;mytag&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;color=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;BLUE&amp;#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;height=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;9&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&amp;lt;/mytag&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;タグ名と属性リストがクオートされていないことに注目すること。
また、属性値にLispコードを書いて計算させていることにも注目すること。&lt;/p&gt;

&lt;p&gt;これを実現する&lt;code&gt;tag&lt;/code&gt;マクロのコードを次に示す。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defmacro&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tag&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;atts&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;&amp;amp;body&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;progn&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;print-tag&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;,name&lt;/span&gt;
                     &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;,@&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;mapcar&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                                       &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cons&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;,&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cdr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
                                     &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;pairs&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;atts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
                     &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
          &lt;span class=&#34;o&#34;&gt;,@&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;body&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;print-tag&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;,name&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;マクロは、まず&lt;code&gt;print-tag&lt;/code&gt;を呼んで開きタグを生成する。
この部分は、属性の&lt;code&gt;alist&lt;/code&gt;を作成する必要があり、しかも属性の部分はコードモードにする必要があるため、少々複雑なコードとなっている。
まず、属性リスト属性名と属性値の組を&lt;code&gt;pairs&lt;/code&gt;関数(前章で作成した)で切り出し、それに対して&lt;code&gt;mapcar&lt;/code&gt;を適用して、&lt;code&gt;print-tag&lt;/code&gt;関数に渡す属性リストを生成している。
属性名の方はクオートし、属性値の方は式のままとしている。
&lt;code&gt;tag&lt;/code&gt;マクロの残りの引数に渡されたコードを開きタグの次に実行するようにして、最後に閉じタグを出力している。&lt;/p&gt;

&lt;p&gt;ネストしたタグの例を次に示す。
みやすさを考慮して改行とインデントを入れている。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;tag&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;mytag&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;color&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;blue&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;size&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;big&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;tag&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;first_inner_tag&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;tag&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;second_inner_tag&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()))&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;&amp;lt;mytag&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;color=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;BLUE&amp;#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;height=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;9&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&#34;nv&#34;&gt;&amp;lt;first_inner_tag&amp;gt;&lt;/span&gt;
	&lt;span class=&#34;nv&#34;&gt;&amp;lt;/first_inner_tag&amp;gt;&lt;/span&gt;
	&lt;span class=&#34;nv&#34;&gt;&amp;lt;second_inner_tag&amp;gt;&lt;/span&gt;
	&lt;span class=&#34;nv&#34;&gt;&amp;lt;/second_inner_tag&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;&amp;lt;/mytag&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;tagマクロを使ってhtmlを生成する&#34;&gt;tagマクロを使ってHTMLを生成する&lt;/h3&gt;

&lt;p&gt;当然だが、&lt;code&gt;tag&lt;/code&gt;マクロはXMLにもHTLにも使える。
例えば、&amp;rdquo;Hello World&amp;rdquo;を表示するHTMLドキュメントを生成するコードは次のとおりである。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;tag&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;html&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;tag&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;body&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;princ&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Hello World!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;Hello&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;World!&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;HTMLはXMLと異なり、使えるタグ名が既に定まっている。
したがって、それぞれのHTMLタグを出力する簡易マクロを定義しておけば、LispからHTMLを生成するのが更に簡単になる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defmacro&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;html&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;&amp;amp;body&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;tag&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;html&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;,@&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defmacro&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;body&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;&amp;amp;body&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;tag&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;body&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;,@&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;html&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;body&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;princ&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;Hello&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;World!&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;Hello&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;World!&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;svg特有のマクロと関数を作る&#34;&gt;SVG特有のマクロと関数を作る&lt;/h3&gt;

&lt;p&gt;ここからは、DSLをSVGのドメインに向けて拡張していく。
まず、SVGの画像全体を囲む&lt;code&gt;svg&lt;/code&gt;マクロを書いてみる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defmacro&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;svg&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;width&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;height&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;&amp;amp;body&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;tag&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;svg&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;xmlns&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;http://www.w3.org/2000/svg&amp;#34;&lt;/span&gt;
                   &lt;span class=&#34;s&#34;&gt;&amp;#34;xmlns:xlink&amp;#34;&lt;/span&gt;
                   &lt;span class=&#34;s&#34;&gt;&amp;#34;http://www.w3.org/1999/xlink&amp;#34;&lt;/span&gt;
                   &lt;span class=&#34;nv&#34;&gt;height&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;height&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;width&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;,@&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;SVGイメージには、次の2つの属性を用意する。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1つ目の属性・・・&lt;code&gt;xmlns&lt;/code&gt;属性。SVGビューワ(例えばWebブラウザ)がSVGフォーマットのための適切なドキュメントを参照できるようにする。&lt;/li&gt;
&lt;li&gt;2つ目の属性・・・画像の中にハイパーリンクを置けるようにする。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;画像を描くためには色を扱えなければならない。
簡単のために、色はRGBのリストとして表現することとする。
つまり、&lt;code&gt;(255 0 0)&lt;/code&gt;は真っ赤な色を表す。
特定の色を基準に、より明るい色やより暗い色が必要になる場合がある。
そういった場合のために、&lt;code&gt;brightness&lt;/code&gt;関数を定義する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;brightness&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;col&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;amt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;mapcar&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;min&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;max&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;amt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;
          &lt;span class=&#34;nv&#34;&gt;col&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;明るい赤をこの関数に渡し、輝度調整値&lt;code&gt;amt&lt;/code&gt;に&lt;code&gt;-100&lt;/code&gt;を渡せば、暗い赤が返される。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;brightness&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;-100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;155&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次に、SVGの描画要素のスタイルを生成する関数を実装する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;svg-style&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;表面の色と、枠線の色のスタイルを出力する
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   スタイルは、枠線の色=表面の色-100&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;format&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;
          &lt;span class=&#34;s&#34;&gt;&amp;#34;~{fill:rgb(~a,~a,~a);stroke:rgb(~a,~a,~a)~}&amp;#34;&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;append&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;color&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;brightness&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;color&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;-100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次に、円を描く関数を実装する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;circle&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;center&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;radius&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;円を描画する
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   center: 円の中心の座標(コンスセル)
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   radius: 円の半径
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   color: 円の色(r,g,b)&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;tag&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;circle&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cx&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;center&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
               &lt;span class=&#34;nv&#34;&gt;cy&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;center&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
               &lt;span class=&#34;nv&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;radius&lt;/span&gt;
               &lt;span class=&#34;nv&#34;&gt;style&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;svg-style&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;svg&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;150&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;150&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;circle&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;50&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;50&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;circle&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;50&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;&amp;lt;svg&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;xmlns=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;http://www.w3.org/2000/svg&amp;#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;xmlns:xlink=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;http://www.w3.org/1999/xlink&amp;#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;height=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;150&amp;#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;width=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;150&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&#34;nv&#34;&gt;&amp;lt;circle&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cx=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;50&amp;#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cy=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;50&amp;#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;r=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;50&amp;#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;style=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;fill:rgb(255,0,0);stroke:rgb(155,0,0)&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&amp;lt;/circle&amp;gt;&lt;/span&gt;
	&lt;span class=&#34;nv&#34;&gt;&amp;lt;circle&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cx=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;100&amp;#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cy=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;100&amp;#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;r=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;50&amp;#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;style=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;fill:rgb(0,0,255);stroke:rgb(0,0,155)&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&amp;lt;/circle&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;circles.svg&#34; alt=&#34;circles&#34; /&gt;&lt;/p&gt;

&lt;p&gt;これで、基本的なSVG DSLは作成できた。
ここからは、機能をどんどん追加していく。&lt;/p&gt;

&lt;h3 id=&#34;もっと複雑なsvg画像を描画する&#34;&gt;もっと複雑なSVG画像を描画する&lt;/h3&gt;

&lt;p&gt;SVG DSLに、任意の多角形(ポリゴン)を描く関数を追加する。
SVGのポリゴンは頂点座標を&lt;code&gt;points&lt;/code&gt;属性に格納する。
頂点のリストは、&lt;code&gt;format&lt;/code&gt;関数の&lt;code&gt;~{~}&lt;/code&gt;制御文字列を使って生成している。
11章の「&lt;code&gt;format&lt;/code&gt;関数でテキストを表示する」で見たように、この制御文字列は引数に渡されたリストをループする。
ここでは頂点をループするためにまず、座標値のペアのリストを&lt;code&gt;mapcan&lt;/code&gt;によってネストのないリストへと &lt;em&gt;スプライス&lt;/em&gt; している。&lt;br /&gt;
すなわち、&lt;code&gt;mapcan&lt;/code&gt;=&lt;code&gt;mapcar&lt;/code&gt;+&lt;code&gt;append&lt;/code&gt;である。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;polygon&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;points&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;tag&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;polygon&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;points&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;format&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;
                               &lt;span class=&#34;s&#34;&gt;&amp;#34;~{~a,~a ~}&amp;#34;&lt;/span&gt;
                               &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;mapcan&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;tp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                                         &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cdr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
                                       &lt;span class=&#34;nv&#34;&gt;points&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                       &lt;span class=&#34;nv&#34;&gt;style&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;svg-style&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次の例は、 &lt;strong&gt;ランダムウォーク&lt;/strong&gt; を表現する関数である。
ランダムウォークとは、1歩進む度に方向をランダムに変えながら歩く軌跡を表すグラフである。
横方向は右に一定に進み、上下のみランダムにすれば、株価変動のようなグラフが表現できる。
実際に、金融市場のモデルの初期値として使用されることもある。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;random-walk&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;1次元のランダムウォークの軌跡をリストで返す
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   value: 初期値
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   length: ランダムウォークの長さ
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   ret: ランダムウォークの軌跡のリスト&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;unless&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;zerop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cons&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;value&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;random-walk&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;zerop&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;random&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;1-&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;1+&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;1-&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実行結果は次のとおりである。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;random-walk&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;101&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;99&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;101&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;102&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;101&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;102&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;101&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;では、SVG DSLを使って、いくつかのランダムウォークをSVG画像として表示してみる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;; ランダムウォークを描画したSVGファイルを作成する&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;with-open-file&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;*standard-output*&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;random-walk.svg&amp;#34;&lt;/span&gt;
                                   &lt;span class=&#34;ss&#34;&gt;:direction&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:output&lt;/span&gt;
                                   &lt;span class=&#34;ss&#34;&gt;:if-exists&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:supersede&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;;; svg画像を描画する&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;;; 横: 400&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;;; 縦: 200&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;;; 描画対象: 上辺がランダムウォークの多角形10個&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;;; 色: ランダム&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;svg&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;400&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;repeat&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;
                &lt;span class=&#34;nv&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;polygon&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;append&lt;/span&gt;
                              &lt;span class=&#34;c1&#34;&gt;;; 左下の頂点&lt;/span&gt;
                              &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                              &lt;span class=&#34;c1&#34;&gt;;; 左上から右上までの頂点&lt;/span&gt;
                              &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;
                                    &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;random-walk&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;400&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                                    &lt;span class=&#34;nv&#34;&gt;collect&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cons&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                              &lt;span class=&#34;c1&#34;&gt;;; 右下の頂点&lt;/span&gt;
                              &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;400&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
                            &lt;span class=&#34;c1&#34;&gt;;; 多角形の色&lt;/span&gt;
                            &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;repeat&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;
                                  &lt;span class=&#34;nv&#34;&gt;collect&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;random&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;256&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;random-walk.svg&#34; alt=&#34;random-walk&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ここまでで、Lispによって簡単にXML,HTML,SVGのためのDSLが書けることが分かった。
これらのDSLは、どれも、Lispのリスト構造そのものを、見た目を表現するためのマークアップ言語に変換するものだった。&lt;/p&gt;

&lt;p&gt;次の章では、全く別の種類のDSLを作成する。&lt;/p&gt;

&lt;h1 id=&#34;17-3-魔法使いのアドベンチャーゲームに新コマンドを追加する&#34;&gt;17.3 魔法使いのアドベンチャーゲームに新コマンドを追加する&lt;/h1&gt;

&lt;p&gt;この章では、ゲームにありがちな問題を解決するためのDSLを実装する。
つまり、特定のアイテム、特定の場所、それらの組み合わせによって、特別なコマンドが起動できるようにする。&lt;/p&gt;

&lt;p&gt;コマンドの実現方針としては、次のとおりである。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ゲームとして共通の部分は、何度も記述したくない&lt;/li&gt;
&lt;li&gt;特定のアイテムに特有の処理については、Lispで直接コーディングしたい&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これらを実現するためのDSLについて、ここから学んでいく。
まずは、&lt;a href=&#34;https://github.com/otaon/LandOfLisp-AdventureGame/blob/master/AdventureGame.lisp&#34;&gt;魔法使いのアドベンチャーゲーム&lt;/a&gt;をREPLにロードしておくこと。
さもなければ本章のコードは実行できない。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; &lt;code&gt;game-repl&lt;/code&gt;コマンドと使って直接コマンドを入力できること、および、&lt;code&gt;game-repl&lt;/code&gt;から抜けるには&lt;code&gt;quit&lt;/code&gt;コマンドを使うように実装したことを思い出すこと。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;; ゲームの実行例&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;load&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;AdventureGame.lisp&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;; Loading file AdventureGame.lisp ...&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;;; Loaded file AdventureGame.lisp&lt;/span&gt;
&lt;span class=&#34;no&#34;&gt;T&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;game-repl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;You&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;are&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;the&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;living-room.&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;Awizard&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;snoring&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;loudly&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;on&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;the&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;couch.&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.......&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;quit&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;ゲームコマンドを直接定義する&#34;&gt;ゲームコマンドを直接定義する&lt;/h2&gt;

&lt;p&gt;ゲームDSLは、結局の所どのようにあるべきか。
それを知るために、まずはいくつかのコマンドを直接LSIPで書いてみることにする。
その後、異なるコマンドの間に存在する &lt;strong&gt;共通パターン&lt;/strong&gt; を見つけ出して、それを基礎としてDSLを作成することにする。&lt;/p&gt;

&lt;h3 id=&#34;溶接-コマンド&#34;&gt;「溶接」コマンド&lt;/h3&gt;

&lt;p&gt;魔法使いの屋敷の屋根裏には、溶接機がある。
プレイヤーが鎖とバケツを屋根裏に持っていき、バケツに鎖を溶接できる(&lt;code&gt;weld&lt;/code&gt;)ようにしてみる。&lt;/p&gt;

&lt;p&gt;まず、プレイヤーが特定のアイテムを持っているか否かを調べやすくするため、&lt;code&gt;have&lt;/code&gt;関数を定義している。
プレイヤーの持ち物全てを返す&lt;code&gt;inventory&lt;/code&gt;コマンドの返り値に引数のアイテムが含まれていれば、プレイヤーはそのアイテムを持っていることになる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;have&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;member&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;object&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cdr&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;inventory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次に、鎖とバケツが溶接されているかどうかという情報を保持する必要がある。
ゲームにおいて、これらのアイテムが溶接されているときのみ可能なアクションがあるかもしれない。
この目的のためにグローバル変数&lt;code&gt;*chain-welded*&lt;/code&gt;を用意する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defparameter&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*chain-welded*&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最後に、溶接(&lt;code&gt;weld&lt;/code&gt;)コマンドを定義している。
溶接は、次の条件を全て満たす時に可能となる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;プレイヤーが屋根裏にいる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;weld&lt;/code&gt;コマンドでは、「バケツ&lt;strong&gt;を&lt;/strong&gt;」「鎖&lt;strong&gt;に&lt;/strong&gt;」溶接する、というアクションのみを処理する&lt;/li&gt;
&lt;li&gt;プレイヤーは、既に鎖とバケツを持っている必要がある&lt;/li&gt;
&lt;li&gt;鎖とバケツはまだ溶接されていない状態である必要がある&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;weld&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;subject&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;eq&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*location*&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;attic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
           &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;eq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;subject&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;chain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
           &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;eq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;object&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;bucket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
           &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;have&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;chain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
           &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;have&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;bucket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
           &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*chain-welded*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;progn&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;setf&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*chain-welded*&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
           &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;the&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;chain&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;now&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;securely&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;welded&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;the&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;bucket.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;you&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cannot&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;weld&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;like&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;that.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;game-repl&lt;/code&gt;には、予め登録されているコマンドのみ実行可能にしている。
したがって、&lt;code&gt;weld&lt;/code&gt;コマンドを使用するために、許可コマンドリストに&lt;code&gt;weld&lt;/code&gt;を追加する必要がある。
&lt;code&gt;pushnew&lt;/code&gt;コマンドを使うことで、&lt;code&gt;weld&lt;/code&gt;がまだ許可コマンドリストに追加されていない場合にのみ&lt;code&gt;push&lt;/code&gt;されるようになる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;pushnew&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;weld&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*allowed-commands*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;WELD&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;LOOK&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;WALK&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;PICKUP&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;INVENTORY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;game-repl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;weld&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;chain&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;bucket&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;You&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cannot&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;weld&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;like&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;that.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;投げ入れる-コマンド&#34;&gt;「投げ入れる」コマンド&lt;/h3&gt;

&lt;p&gt;魔法使いの野屋敷の庭には井戸がある。
プレイヤーがバケツを投げ入れて(dunk)、水を汲めるようにする。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;weld&lt;/code&gt;と同様に、まずバケツに水が入っているかどうかを覚えておく変数を用意する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defparameter&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*bucket-filled*&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次に、&lt;code&gt;dunk&lt;/code&gt;関数を定義する。
&lt;code&gt;weld&lt;/code&gt;同様に、&lt;code&gt;dunk&lt;/code&gt;にも「投げ入れる」動作をしても良いか判断するための条件式がある。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;dunk&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;subject&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;eq&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*location*&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;garden&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
           &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;eq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;subject&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;bucket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
           &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;eq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;object&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;well&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
           &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;have&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;bucket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
           &lt;span class=&#34;vg&#34;&gt;*chain-welded*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;progn&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;setf&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*bucket-filled*&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
             &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;the&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;bucket&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;now&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;full&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;water&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
      &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;You&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cannot&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;dunk&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;like&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;that.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最後に、&lt;code&gt;dunk&lt;/code&gt;関数を許可コマンドリストに追加する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;pushnew&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;dunk&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*allowed-commands*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;game-action-マクロ&#34;&gt;&lt;code&gt;game-action&lt;/code&gt;マクロ&lt;/h2&gt;

&lt;p&gt;先述の&lt;code&gt;weld&lt;/code&gt;コマンドと&lt;code&gt;dunk&lt;/code&gt;コマンドを実装したことで、これらに似た処理の部分があることが分かった。
また、それぞれのコマンドには、コマンド固有の処理というものが存在することも分かった。
これらを上手くまとめ上げるために、&lt;code&gt;game-action&lt;/code&gt;マクロを作成する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defmacro&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;game-action&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;command&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;subj&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;obj&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;place&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;&amp;amp;body&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;;; ゲームアクションを定義するマクロ&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;;; command: コマンド名&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;;; subj: コマンド実行に必要な主体&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;;; obj: コマンド実行に必要な客体&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;;; place: コマンド実行に適した場所&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;;; body: コマンド処理本体&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;progn&lt;/span&gt;
     &lt;span class=&#34;c1&#34;&gt;;; コマンド定義&lt;/span&gt;
     &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;command&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;subject&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
       &lt;span class=&#34;c1&#34;&gt;;; コマンド実行可能条件&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;eq&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*location*&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;,place&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;; 有効な場所&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;eq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;subject&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;,subj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;; 有効な主体&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;eq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;object&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;,obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;; 有効な客体&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;have&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;,subj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;; 主体を持っている&lt;/span&gt;
           &lt;span class=&#34;c1&#34;&gt;;; コマンド実行 &lt;/span&gt;
           &lt;span class=&#34;o&#34;&gt;,@&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;body&lt;/span&gt;
           &lt;span class=&#34;c1&#34;&gt;;; コマンド実行不可時のメッセージ&lt;/span&gt;
           &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cant&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;command&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;like&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;that.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
     &lt;span class=&#34;c1&#34;&gt;;; 許可コマンドリストに定義したコマンドを追加&lt;/span&gt;
     &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;pushnew&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;,command&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*allowed-commands*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;game-action&lt;/code&gt;マクロの主な仕事は、コマンドを実現する新たな関数を定義することである。
このように、マクロはその中で関数定義することも可能である。&lt;/p&gt;

&lt;p&gt;このマクロの中では、場所、主体となるアイテムの有無、客体となるアイテムの有無、主体を持っているか否かのチェック機構を入れている。
しかし、それ以外の条件は、コマンドごとに本体の中でチェックするようにしている。&lt;/p&gt;

&lt;p&gt;共通部分の条件が満たされたら、追加のチェックは各コマンドのロジックの中で書くようにする。
共通部分の条件が満たされなかったら、「コマンド実行不可時のメッセージ」を返す。
最後に&lt;code&gt;pushnew&lt;/code&gt;を使って、作成したコマンドを&lt;code&gt;game-repl&lt;/code&gt;の「許可コマンドリスト」に追加する。&lt;/p&gt;

&lt;p&gt;このマクロで実装していないのは、状態を管理するグローバル変数を定義したり変数したりする処理である。
すなわち、&lt;code&gt;*chain-welded*&lt;/code&gt;や&lt;code&gt;*bucket-filled*&lt;/code&gt;といった変数を作るなら、マクロとは別に実装する必要がある。
何故別々に実装するようにするのか。
理由は、特定のコマンドと、特定の状態を管理する変数が1対1対応するとは限らないからである。
コマンドによっては、状態を持たずに実行できるものもあるだろうし、反対に、複数の状態に依存するものもあるだろう。&lt;/p&gt;

&lt;p&gt;このマクロによって、新しいゲームアクションを作るための簡単なDSLが完成した。
すなわち、このコマンドによって、ゲームコマンドのドメインに特化した新たなプログラミング言語が作り出されたということになる。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;weld&lt;/code&gt;と&lt;code&gt;dunk&lt;/code&gt;を、このDSLを使って書き直してみる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defparameter&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*chain-weided*&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;game-action&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;weld&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;chain&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;bucket&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;attic&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;have&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;bucket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*chain-welded*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;progn&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;setf&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*chain-welded*&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
             &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;the&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;chain&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;now&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;securely&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;welded&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;the&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;bucket.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
             &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;you&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;have&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;a&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;bucket.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defparameter&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*bucket-filled*&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;game-action&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;dunk&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;bucket&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;well&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;garden&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*chain-welded*&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;progn&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;setf&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*bucket-filled*&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
             &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;the&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;bucket&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;now&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;full&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;water&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
             &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;the&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;water&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;level&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;too&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;low&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;reach.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;見て分かる通り、各コマンドのロジックが簡潔に表されている。
&lt;code&gt;weld&lt;/code&gt;はバケツを持っていることをチェックしているが、&lt;code&gt;dunk&lt;/code&gt;ではwellをチェックする必要はないことが分かりやすい。&lt;/p&gt;

&lt;p&gt;マクロでゲームコマンドDSLを作る利点をもっと示すために、より複雑なコマンドを実装してみる。
次に示すコマンドは、状況によって3つの異なる結果を返す。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;バケツが空の場合、特に何も起こらない。(メッセージ:バケツは空だ)&lt;/li&gt;
&lt;li&gt;バケツが一杯で既にカエルを取っていた場合、プレイヤーの負けとなる。&lt;/li&gt;
&lt;li&gt;バケツが一杯でカエルを取っていなかった場合、プレイヤーの勝利となる。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;game-action&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;splash&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;bucket&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;wizard&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;living-room&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cond&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*bucket-filled*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;the&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;bucket&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;has&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;nothing&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;it.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;have&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;frog&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;the&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;wizard&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;awakens&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;sees&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;that&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;you&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;stole&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;his&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;frog.&lt;/span&gt;
                        &lt;span class=&#34;nv&#34;&gt;he&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;so&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;upset&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;he&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;banishes&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;you&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;the&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;netherworlds-&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;you&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lose!&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;the&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;end.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;the&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;wizard&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;awakens&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;his&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;slumber&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;greets&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;you&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;warmly.&lt;/span&gt;
             &lt;span class=&#34;nv&#34;&gt;he&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;hands&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;you&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;the&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;magic&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;low-carb&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;donut-&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;you&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;win!&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;the&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;end.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;game-action&lt;/code&gt;マクロを使えば、それぞれの特徴的なゲームアクションコマンドをたくさん作成できる。
しかも、似たようなコードを繰り返し書く手間を省ける。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt;&lt;br /&gt;
&lt;code&gt;game-action&lt;/code&gt;コマンドは、捜査の対象となるアイテムを束縛した変数&lt;code&gt;subject&lt;/code&gt;と&lt;code&gt;object&lt;/code&gt;をマクロのボディ中で使えるようにする。
ゲームコマンドはこれらの変数で情報にアクセスできるようになるが、&lt;code&gt;game-action&lt;/code&gt;コマンドを作り出すコードが&lt;code&gt;subject&lt;/code&gt;や&lt;code&gt;object&lt;/code&gt;という名前の変数を既に使用している場合は、名前衝突を起こす。
安全を期すなら、&lt;code&gt;gensym&lt;/code&gt;コマンドを用いたマクロに書き直したほうが良い。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>書籍 Land of Lisp 18章 遅延プログラミング</title>
      <link>https://otaon.github.io/web/ja-jp/2019/03/07/%E6%9B%B8%E7%B1%8D-land-of-lisp-18%E7%AB%A0-%E9%81%85%E5%BB%B6%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/</link>
      <pubDate>Thu, 07 Mar 2019 00:00:00 +0900</pubDate>
      
      <guid>https://otaon.github.io/web/ja-jp/2019/03/07/%E6%9B%B8%E7%B1%8D-land-of-lisp-18%E7%AB%A0-%E9%81%85%E5%BB%B6%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/</guid>
      
        <description>

&lt;h2 id=&#34;t-o-c&#34;&gt;T.O.C.&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#181-lispに遅延評価を足す&#34;&gt;18.1 Lispに遅延評価を足す&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#182-ダイスオブドゥームver2&#34;&gt;18.2 ダイスオブドゥームVer2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#183-大きなゲーム盤でaiを動かす&#34;&gt;18.3 大きなゲーム盤でAIを動かす&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;関数型プログラミングによって、コードが簡潔になることが分かった。
数学的な関数は、同じ引数に対して常に同じ結果を返すことによる利点である。&lt;/p&gt;

&lt;p&gt;しかし、15章で関数型プログラミングによってゲームを造ったとき、問題点も明らかになった。
すなわち、引数のみに依存して関数の値を計算しようとすると、引数に &lt;strong&gt;膨大&lt;/strong&gt; な情報量を渡す羽目になる。&lt;/p&gt;

&lt;p&gt;ダイスオブドゥームでは、ゲーム盤でこれから起き得る全ての状態を表した&lt;code&gt;game-tree&lt;/code&gt;引数を渡していた。
この引数は、たった3x3のゲーム盤でさえ巨大な構造となっていた。
このときの設計は、コードを簡単でエレガントにしてはいたものの、より大きなゲーム盤に対して容易にはスケールしてくれない。
なぜなら、ゲーム木はゲーム盤が大きくなるにつれて指数関数的に大きくなるからである。&lt;/p&gt;

&lt;p&gt;幸いにも、コードの現在のエレガントさを保ったまま(関数型プログラミングのまま)、より大きなゲーム盤で複雑なゲームを実現する方法は存在する。
すなわち、ゲームの最初から全ての可能性を見なくて済むように、 &lt;strong&gt;遅延評価&lt;/strong&gt; という機能を使う。
この章では、遅延評価を使ってダイスオブドゥームを改善する。&lt;/p&gt;

&lt;h1 id=&#34;18-1-lispに遅延評価を足す&#34;&gt;18.1 Lispに遅延評価を足す&lt;/h1&gt;

&lt;p&gt;遅延評価を使っても、コード上ではゲームの初期化時にゲーム木を作ってしまうことに変わりはない。
ただし、ゲーム木の一部以外は、本物の枝を作る時にやっていたような実際の計算を行わない。
すなわち、実際にゲーム木のその箇所を評価する必要ができてからはじめて計算するのである。
プレーヤーがゲーム中のある手を指さず、AIもその手を考慮しなかったとしたら、プログラムはその枝から先がどうなっているかを計算しなくても良いのである。&lt;/p&gt;

&lt;p&gt;計算の必要が出てきてからはじめて計算する部分を、遅延評価における &lt;strong&gt;遅延部分&lt;/strong&gt; と呼ぶ。&lt;/p&gt;

&lt;p&gt;HaskellやClojureといった言語では、遅延評価が言語のコアでサポートされている。
むしろ、Clojureでは遅延評価が推奨されている。
しかし、残念なことにCommon Lispには遅延評価やそれに類する機能がサポートされていない。
そこで、Common Lispのマクロ機能を使用することで、自分で遅延評価の機能を実現することとする。&lt;/p&gt;

&lt;h2 id=&#34;lazy-コマンドと-force-コマンドを作成する&#34;&gt;&lt;code&gt;lazy&lt;/code&gt;コマンドと&lt;code&gt;force&lt;/code&gt;コマンドを作成する&lt;/h2&gt;

&lt;p&gt;遅延評価の機能を実現するために、&lt;code&gt;lazy&lt;/code&gt;コマンドと&lt;code&gt;force&lt;/code&gt;コマンドを作成する。
まず、&lt;code&gt;lazy&lt;/code&gt;コマンドは、コードを包むことでLispにそのコードの評価を後回しにするように指示する。
&lt;code&gt;lazy&lt;/code&gt;の使用例を次に示す。
見て分かる通り、&lt;code&gt;lazy&lt;/code&gt;コマンドで包まれたコードは関数としてまとめられる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;&amp;lt;FUNCTION&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次に、&lt;code&gt;force&lt;/code&gt;コマンドは、先程の&lt;code&gt;lazy&lt;/code&gt;コマンドによってまとめられた関数を実行する。
&lt;code&gt;force&lt;/code&gt;の使用例を次に示す。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;force&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ここで重要な点は、「実際の計算が、遅延された値が作られたときではなく、その結果が要求された時にはじめて行われた」という事実である。
これを実感するため、より複雑な例を示す。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;add&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;princ&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;I am adding now&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;ADD&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defparameter&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*foo*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;add&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;span class=&#34;vg&#34;&gt;*FOO*&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;force&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*foo*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;I&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;am&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;adding&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;now&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この例では、2個の数を足す&lt;code&gt;add&lt;/code&gt;関数を定義した。
この関数は、評価されるときに副作用としてコンソールにメッセージを表示する。
コンソールにメッセージが表示されているタイミングが、&lt;code&gt;force&lt;/code&gt;を呼び出したときであることから、&lt;code&gt;add&lt;/code&gt;の計算が実際にこの部分でなされたことが分かる。&lt;/p&gt;

&lt;h3 id=&#34;lazy-コマンド&#34;&gt;&lt;code&gt;lazy&lt;/code&gt;コマンド&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;lazy&lt;/code&gt;の簡単な実装は次のとおりである。
&lt;code&gt;lazy&lt;/code&gt;はマクロによって実現している。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defmacro&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lazy&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;&amp;amp;body&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;forced&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;gensym&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;value&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;gensym&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;forced&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
           &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
         &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;unless&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;forced&lt;/span&gt;
           &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;setf&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;progn&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;,@&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
           &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;setf&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;forced&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
         &lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;マクロは生成されたコード中で変数を2つ使用するため、&lt;code&gt;gensym&lt;/code&gt;を使って変数の名前を作り出している。&lt;/p&gt;

&lt;p&gt;次に来るのが、マクロが実際に生成するコード本体である(行頭にバッククォートがついている行)。
コード本体の行頭では、&lt;code&gt;gensym&lt;/code&gt;によって作られた変数名を使って、ローカル変数を2つ生成している(&lt;code&gt;,forced&lt;/code&gt;と&lt;code&gt;,value&lt;/code&gt;)。
最初の変数&lt;code&gt;,forced&lt;/code&gt;は、遅延した値が既に評価されたかどうかのフラグである。
これが&lt;code&gt;nil&lt;/code&gt;であれば、値はまだ評価されていない。
これが&lt;code&gt;t&lt;/code&gt;なら、すでに評価済みである。
次の変数&lt;code&gt;,value&lt;/code&gt;は、評価された関数の戻り値を格納する変数である。&lt;/p&gt;

&lt;p&gt;このマクロによって生成された&lt;code&gt;lambda&lt;/code&gt;は、クロージャの仕組みを使って&lt;code&gt;,forced&lt;/code&gt;変数と&lt;code&gt;,value&lt;/code&gt;変数を捕捉している。
さらに、この&lt;code&gt;lambda&lt;/code&gt;は、マクロの引数に渡された式をそのまま中に取り込んでいる。
これによって、&lt;code&gt;lambda&lt;/code&gt;は、次の2種類の情報を持っている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;クロージャによって呼び出されたか否かといった情報を持つ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lazy&lt;/code&gt;呼び出し時に渡された式を内部にすべて持つ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ここで、&lt;code&gt;force&lt;/code&gt;コマンドによって&lt;code&gt;lambda&lt;/code&gt;が計算されると、次のとおり動作する。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;,forced&lt;/code&gt;が&lt;code&gt;nil&lt;/code&gt;(まだ計算されていない場合)

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;nil&lt;/code&gt;で初期化しておいた&lt;code&gt;,value&lt;/code&gt;に計算結果を格納する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;,forced&lt;/code&gt;を&lt;code&gt;t&lt;/code&gt;に更新する&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;,forced&lt;/code&gt;が&lt;code&gt;t&lt;/code&gt;(すでに計算されている場合)

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;,value&lt;/code&gt;の値を返す(&lt;code&gt;lambda&lt;/code&gt;は一切評価しない)&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;force-マクロ&#34;&gt;&lt;code&gt;force&lt;/code&gt;マクロ&lt;/h3&gt;

&lt;p&gt;次に&lt;code&gt;force&lt;/code&gt;マクロを実装する。
&lt;code&gt;lazy&lt;/code&gt;マクロのようなトリッキーな実装ではなく、&lt;code&gt;force&lt;/code&gt;は非常に素朴な実装である。
単純に、引数に渡された関数を呼び出すだけである。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;force&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;funcall&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lazy-value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;遅延リストライブラリを作る&#34;&gt;遅延リストライブラリを作る&lt;/h2&gt;

&lt;p&gt;先程作ったコマンドを基にして、 &lt;strong&gt;遅延リスト&lt;/strong&gt; のライブラリを作ることにする。
この遅延リストライブラリはClojureのものを参考にしている(Clojureでは遅延リストを &lt;strong&gt;遅延シーケンス&lt;/strong&gt; と呼ぶ)。&lt;/p&gt;

&lt;p&gt;Lispにおいてリストを扱う最も基本的なコマンドは&lt;code&gt;cons&lt;/code&gt;である。
したがって、遅延リストでは&lt;code&gt;lazy-cons&lt;/code&gt;コマンドから作成する。
このマクロは&lt;code&gt;cons&lt;/code&gt;と似ているが、結果を&lt;code&gt;lazy&lt;/code&gt;マクロで包んで返す。
ついでに、&lt;code&gt;lazy-car&lt;/code&gt;と&lt;code&gt;lazy-cdr&lt;/code&gt;も作っておくことにする。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defmacro&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lazy-cons&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cons&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lazy-car&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;force&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lazy-cdr&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cdr&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;force&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これらの使用例を次に示す。
実行結果から分かるように、&lt;code&gt;lazy-cons&lt;/code&gt;と&lt;code&gt;lazy-car&lt;/code&gt;と&lt;code&gt;lazy-cdr&lt;/code&gt;は、それぞれ、&lt;code&gt;cons&lt;/code&gt;と&lt;code&gt;car&lt;/code&gt;と&lt;code&gt;cdr&lt;/code&gt;と同じように使用できる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defparameter&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*foo*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-cons&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;vg&#34;&gt;*FOO*&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-car&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*foo*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-cdr&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*foo*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;7&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これらの単純な関数で、次のような有用な定義を実現できる。
すなわち、全ての正整数のリスト&lt;code&gt;*integers*&lt;/code&gt;を定義しているのである。
無限長のリストを定義しているにも関わらず、遅延評価を導入したことで全ての評価をしてシステムダウンするような自体を回避できている。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defparameter&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*integers*&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;labels&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
             &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-cons&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;1+&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実際にこれを評価すると次のとおりになる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-car&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*integers*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-car&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-cdr&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*integers*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-car&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-cdr&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-cdr&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*integers*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;マクロを展開すると、次のとおりになる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-car&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-cdr&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-cdr&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*integers*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; =&amp;gt;&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-car&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-cdr&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-cdr&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;labels&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-cons&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;1+&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; =&amp;gt;&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;force&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cdr&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;force&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cdr&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;force&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;labels&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy&lt;/span&gt;
                         &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cons&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;1+&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))))&lt;/span&gt;
              &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;lazy-&lt;/code&gt;コマンドを使っている限り、この正整数のリスト&lt;code&gt;*integers*&lt;/code&gt;から、欲しいだけ正整数を取り出すことができる。
取り出したいところまでの整数が、必要に応じて計算されるのである。&lt;/p&gt;

&lt;p&gt;このような無限長のリストばかりが遅延リストではない。
すなわち、終端を持つ遅延リストも存在する。&lt;/p&gt;

&lt;p&gt;終端を持つ遅延リストを実現するためには、&lt;code&gt;lazy-nil&lt;/code&gt;コマンドも必要となる。
そして、通常のリストに対して、終端に達したかどうかを調べる&lt;code&gt;null&lt;/code&gt;関数に対応する、遅延リストの終端を調べる&lt;code&gt;lazy-null&lt;/code&gt;関数も必要となる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lazy-nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;forceされるとnilを返す&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lazy-null&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;遅延リストがnilならtを返す&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;force&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;通常のリストと遅延リストとの変換&#34;&gt;通常のリストと遅延リストとの変換&lt;/h2&gt;

&lt;p&gt;ここからは、遅延リストの操作に便利な関数を作っていく。&lt;/p&gt;

&lt;p&gt;まず必要となるのは、通常のリストを遅延リストに変換する関数である。
これを実現する&lt;code&gt;make-lazy&lt;/code&gt;関数を実装する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;make-lazy&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cons&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;make-lazy&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cdr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この&lt;code&gt;make-lazy&lt;/code&gt;関数は、大雑把に言えば、再帰で与えられたリストを順に見ていき、それぞれのコンスを&lt;code&gt;lazy&lt;/code&gt;なマクロで包んでいるということになる。
しかしながら、この関数の実際の意味を正しく理解するには、&lt;code&gt;lazy&lt;/code&gt;と&lt;code&gt;force&lt;/code&gt;の意味を考える必要がある。
幸いなことに、遅延リストライブラリを完成させてしまえば、これらの遅延評価にまつわる奇妙さはライブラリの中に隠されることとなる。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;make-lazy&lt;/code&gt;関数は普通のリストを遅延リストに変換した。
では反対に、遅延リストを普通のリストに変換するための&lt;code&gt;take&lt;/code&gt;および&lt;code&gt;take-all&lt;/code&gt;関数を実装する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;take&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;遅延リストから指定した数の要素だけ取り出す&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;unless&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;zerop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-null&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cons&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;take&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;1-&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-cdr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;take-all&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;遅延リストから全ての要素を取り出す
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   無限長の遅延リストには使用禁止&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;unless&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-null&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cons&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;take-all&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-cdr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これらを使用すると、次のようになる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;take&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*integers*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;take&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;make-lazy&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;q&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;w&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;u&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;o&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;d&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;Q&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;W&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;E&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;R&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;Y&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;U&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;I&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;O&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;take-all&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;make-lazy&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;q&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;w&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;u&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;o&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;d&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;Q&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;W&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;E&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;R&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;Y&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;U&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;I&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;O&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;P&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;S&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;D&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;F&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;遅延リストに対するマッピングと検索&#34;&gt;遅延リストに対するマッピングと検索&lt;/h2&gt;

&lt;p&gt;遅延リストに対して、マップや検索を実現する関数を次に示す。
&lt;code&gt;mapcar&lt;/code&gt;、&lt;code&gt;mapcan&lt;/code&gt;、&lt;code&gt;find-if&lt;/code&gt;、&lt;code&gt;nth&lt;/code&gt;に対する遅延リスト版の関数を実装する。
これらの関数は、引数に遅延リストを取り、戻り値もリストを返す場合は遅延リストを返す。
これらの関数の実装には、&lt;code&gt;lazy-null&lt;/code&gt;、&lt;code&gt;lazy-car&lt;/code&gt;、&lt;code&gt;lazy-cdr&lt;/code&gt;を使う必要がある。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lazy-mapcar&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;fun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;unless&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-null&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cons&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;funcall&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;fun&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-mapcar&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;fun&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-cdr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lazy-mapcan&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;fun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;labels&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lst-cur&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
             &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-null&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst-cur&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;force&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-mapcan&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;fun&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-cdr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
                 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cons&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst-cur&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-cdr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst-cur&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))))&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;unless&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-null&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;funcall&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;fun&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lazy-find-if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;fun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;unless&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-null&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-null&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;funcall&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;fun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-find-if&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;fun&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-cdr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lazy-nth&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;zerop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-nth&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;1-&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-cdr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上の関数の使い方は、次のとおりである。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;take&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-mapcar&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;sqrt&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*integers*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.4143135&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.7320508&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;2.236068&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;2.4494898&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;2.6457512&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;2.828427&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;3.1622777&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;lazy-mapcar&lt;/code&gt;を使って無限長の正整数リストに&lt;code&gt;sqrt&lt;/code&gt;をマップすると、全ての正整数の平方根の遅延リストが得られる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;take&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-mapcan&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;evenp&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                              &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;make-lazy&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                              &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
                        &lt;span class=&#34;vg&#34;&gt;*integers*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;12&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;14&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;18&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;lazy-mapcan&lt;/code&gt;を使って、各正整数について、それが偶数ならその数だけからなる遅延リストを、それが奇数なら遅延空リストを返す関数を適用している。
ここでは、結果として、無限正整数リストから偶数だけを取り出したリストを、要素10個分だけ返している。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-find-if&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;oddp&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;make-lazy&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;7&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;find-if&lt;/code&gt;を使って、遅延リストから最初の奇数を探している。
この例では、結果として&lt;code&gt;7&lt;/code&gt;を返している。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-nth&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;make-lazy&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;d&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;E&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;lazy-nth&lt;/code&gt;を使って、遅延リストの指定箇所の要素を取り出している。&lt;/p&gt;

&lt;p&gt;これら、遅延リスト版の関数を、例えば&lt;code&gt;lazy.lisp&lt;/code&gt;ファイルに記載しておき、このファイルをロードしていつでも使えるようにしておくと良い。&lt;/p&gt;

&lt;h1 id=&#34;18-2-ダイスオブドゥームver2&#34;&gt;18.2 ダイスオブドゥームVer2&lt;/h1&gt;

&lt;p&gt;15章で作成したダイスオブドゥームVer1に、遅延リストライブラリを適用する。
まず、ダイスオブドゥームのコードと、遅延リストライブラリをロードする。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;load&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;dice_of_doom_v1.lisp&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;load&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;lazy-lisp&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ロードしたコードに変更を加えることで、ゲームを遅延リスト版に変更する。&lt;/p&gt;

&lt;p&gt;次に、ゲーム盤の大きさを4x4に拡大する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defparameter&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*board-size*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defparameter&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*board-hexnum*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*board-size*&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*board-size*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この大きさのゲームを実用的な速度で実行するには、ゲーム木のそれぞれの枝を遅延リストとして表現する必要がある。
そのためには、バージョン1のゲームのいくつかの関数を遅延リスト関数を使ったものに差し替える必要がある。&lt;/p&gt;

&lt;p&gt;まず、与えられたゲーム盤の状態に対して、攻撃と手番終了の手を計算する関数を変更する。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;add-passing-move&lt;/code&gt;関数では、1箇所だけ変更する。
手のリストを遅延リストにするため、可能な手のリストに手番を終える手を加えるのに&lt;code&gt;lazy-cons&lt;/code&gt;を使う。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;add-passing-move&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;board&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;player&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;spare-dice&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;first-move&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;moves&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;first-move&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;moves&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-cons&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;
                     &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;game-tree&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;add-new-dice&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;board&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;player&lt;/span&gt;
                                              &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;1-&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;spare-dice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                                &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;mod&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;1+&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;player&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*num-players*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                                &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
                                &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
               &lt;span class=&#34;nv&#34;&gt;moves&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;attacking-moves&lt;/code&gt;関数では、多めの変更が必要である。&lt;br /&gt;
まず、遅延リストを返すために、手のリストを組み立てる2箇所の&lt;code&gt;mapcan&lt;/code&gt;を&lt;code&gt;lazy-mapcan&lt;/code&gt;に置き換える。&lt;br /&gt;
&lt;code&gt;lazy-mapcan&lt;/code&gt;関数はその中で作るリストも遅延リストでなければならないので、&lt;code&gt;make-lazy&lt;/code&gt;関数を使うようにする。&lt;br /&gt;
また、&lt;code&gt;nil&lt;/code&gt;を返していたところは&lt;code&gt;lazy-nil&lt;/code&gt;を返すようにする。&lt;br /&gt;
最後に、計算されたゲーム盤のリストも遅延リストにする。
このリストは外側の&lt;code&gt;lazy-mapcan&lt;/code&gt;に使われる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;attacking-moves&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;board&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cur-player&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;spare-dice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;labels&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;player&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
             &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;aref&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;board&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
           &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;dice&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
             &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cadr&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;aref&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;board&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-mapcan&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;eq&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;player&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cur-player&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-mapcan&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;dst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
              &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;eq&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;player&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;dst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                                &lt;span class=&#34;nv&#34;&gt;cur-player&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;dice&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;dice&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;dst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;make-lazy&lt;/span&gt;
                  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;src&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;dst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                              &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;game-tree&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;board-attack&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;board&lt;/span&gt;
                                                       &lt;span class=&#34;nv&#34;&gt;cur-player&lt;/span&gt;
                                                       &lt;span class=&#34;nv&#34;&gt;src&lt;/span&gt;
                                                       &lt;span class=&#34;nv&#34;&gt;dst&lt;/span&gt;
                                                       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;dice&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                                         &lt;span class=&#34;nv&#34;&gt;cur-player&lt;/span&gt;
                                         &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;spare-dice&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;dice&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;dst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                                         &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;make-lazy&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;neighbors&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;make-lazy&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;below&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*board-hexnum*&lt;/span&gt;
                       &lt;span class=&#34;nv&#34;&gt;collect&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次に、人間のプレイヤーに対応する2つの関数に変更を加える。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;handle-human&lt;/code&gt;関数では、ローカル関数&lt;code&gt;print-moves&lt;/code&gt;を定義している。
これは可能な手のリストを舐めていく関数である。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;リスト終端のチェック&lt;/li&gt;
&lt;li&gt;リストの先頭からの手を取り出す&lt;/li&gt;
&lt;li&gt;リストの残りの部分で再帰する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上の3箇所について、遅延版のコマンドを使うように変更する。
さらに、プレイヤーが選んだ手を可能な手のリストから取り出すところに&lt;code&gt;lazy-nth&lt;/code&gt;を使うようにする。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;handle-human&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;fresh-line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;princ&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;choose your move:&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;moves&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;caddr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;labels&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;print-moves&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;moves&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
               &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;unless&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-null&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;moves&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;let*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;move&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;moves&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;action&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;move&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
                   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;fresh-line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;format&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;~a. &amp;#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;action&lt;/span&gt;
                     &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;format&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;~a -&amp;gt; ~a&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;action&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cadr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;action&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                     &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;princ&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;end turn&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
                 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;print-moves&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-cdr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;moves&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;1+&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;print-moves&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;moves&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;fresh-line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cadr&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-nth&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;1-&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;moves&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;paly-vs-human&lt;/code&gt;関数では、変更は1箇所だけである。
ゲームの終了状態に達したかどうかを判断するのに、可能な手のリストが空かどうかを調べ、もし空なら勝者を計算する。
この、リストが空かどうかを調べる箇所を、&lt;code&gt;lazy-null&lt;/code&gt;に置き換える。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;play-vs-human&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;print-info&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-null&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;caddr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;play-vs-human&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;handle-human&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;announce-winner&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cadr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ここまでの変更で、より大きな盤面を使ったダイスオブドゥームを人間対人間で遊べるようになった。
すなわち、ゲーム技はプレイヤーがその状態を選んだ場合にしか計算されない。
4x4のゲーム盤でゲームを開始するには、バージョン1と同様に、次のコマンドを入力すれば良い。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;play-vs-human&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;game-tree&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;gen-board&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;current&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;player&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;a&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;a-1&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;a-3&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;a-1&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;b-2&lt;/span&gt;
      &lt;span class=&#34;nv&#34;&gt;b-3&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;a-3&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;a-3&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;a-1&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;a-3&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;a-3&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;b-1&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;a-2&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;b-3&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;a-3&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;a-1&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;a-3&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;choose&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;your&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;move:&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1.&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;2.&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;3.&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;4.&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;11&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;5.&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;15&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;10&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;18-3-大きなゲーム盤でaiを動かす&#34;&gt;18.3 大きなゲーム盤でAIを動かす&lt;/h1&gt;

&lt;p&gt;ここでは、ゲームAIの関数を遅延リストライブラリに対応させる。
また、ついでにAIコードにいくつかの改善をする。&lt;/p&gt;

&lt;h2 id=&#34;ゲーム木の刈り込み&#34;&gt;ゲーム木の刈り込み&lt;/h2&gt;

&lt;p&gt;ダイスオブドゥームver1のAIコードは、ある意味では最強だった。
というのも、手を決める全ての機会に、AIは &lt;strong&gt;将来起こりうる全ての状態&lt;/strong&gt; を調べて、その中で最良手を指していたからである。&lt;/p&gt;

&lt;p&gt;しかし、この方法は、ゲーム盤の規模が少し大きくなるだけで計算量が爆発して破綻する。
そもそも、ゲーム木に遅延評価を入れた目的は、全ての枝を計算対象にしたくないからであった。&lt;/p&gt;

&lt;p&gt;したがって、このバージョンにおいては、ゲームAIには「最大でも何手までしか計算しなくて良い」と指示できる仕組みが必要となる。&lt;/p&gt;

&lt;p&gt;関数型プログラミングスタイルを使ったダイスオブドゥームでは、この変更は非常に簡潔に記述できるが、すぐには思いつかないような方法である。
そこで、ステップバイステップで考えることとする。&lt;/p&gt;

&lt;p&gt;すぐに思いつく方法としては、バージョン1の&lt;code&gt;get-rating&lt;/code&gt;と&lt;code&gt;rate-position&lt;/code&gt;を変更して、&lt;code&gt;search-depth&lt;/code&gt;という新しいアキュムレータを引数に足すことである。
そして、これらの関数を呼び出す度に、先読みの最大値に達したかどうかを調べる。&lt;/p&gt;

&lt;p&gt;でもこの方法には問題がある。
それぞれの関数が余分な引数を背負わされて、本来の関数の処理が分かりにくくなってしまっている。
本来、盤面の状態を評価することと、なんて先まで読むかを判断することは、別々の関心事のはずである。
つまり、これらの関心事は直行している、といえる。
したがって、各々の処理は別々の関数で扱われるべきである。&lt;/p&gt;

&lt;p&gt;ここで、先程の遅延ゲーム木を使うと、探索木を「刈り込む」という仕事だけをする関数を、可能な手を評価して次の手を考えるAIコードとは完全に独立して記述できる。&lt;/p&gt;

&lt;p&gt;ゲーム木を刈り込む関数を次に示す。
この関数は、引数を2つだけ取る、かなり簡単な関数である。
返り値は、新しく作られるゲーム木のコピーである。
コピーの枝は、この関数を再帰的に呼んで作成されるが、再帰する度に&lt;code&gt;depth&lt;/code&gt;をデクリメントする。
&lt;code&gt;depth&lt;/code&gt;が&lt;code&gt;0&lt;/code&gt;になったら、そこか刈り込む深さであるから、可能な指し手に対応する遅延ゲーム木を空にする。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;limit-tree-depth&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;depth&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;ゲーム木を指定の深さで刈り込む
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   tree: 遅延ゲーム木
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   depth: 何手先まで読むか(何手先で枝を刈るか)
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   ret: 新しく作られる遅延ゲーム木のコピー&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;; プレイヤーID&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cadr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; ゲーム盤情報&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;;; 刈り込む深さになったら、指し手の遅延リスト部分を空にする&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;;; 刈り込む深さでなかったら、可能な指し手に対応する遅延ゲーム木を取得する&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;zerop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;depth&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;; 空のゲーム木&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-mapcar&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;move&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                           &lt;span class=&#34;c1&#34;&gt;;; 指定された指し手に対応する遅延ゲーム木を取得する&lt;/span&gt;
                           &lt;span class=&#34;c1&#34;&gt;;; move: 指し手をキーに持つ遅延ゲーム木のalist&lt;/span&gt;
                           &lt;span class=&#34;c1&#34;&gt;;; ret: 指し手に対応する遅延ゲーム木&lt;/span&gt;
                           &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;move&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;; 指し手&lt;/span&gt;
                                 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;limit-tree-depth&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cadr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;move&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;1-&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;depth&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; 指し手に対応するゲーム盤情報&lt;/span&gt;
                         &lt;span class=&#34;c1&#34;&gt;;; 指し手をキーに持つ遅延ゲーム木のalistのリスト&lt;/span&gt;
                         &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;caddr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;他に必要となるのは、ゲームAIが手を評価する直前にこの&lt;code&gt;limit-tree-depth&lt;/code&gt;を呼んでやることだけである。
&lt;code&gt;hadle-computer&lt;/code&gt;関数を少し変更すれば実現できる。
すなわち、&lt;code&gt;get-ratings&lt;/code&gt;を呼んで現在の木から先の手を評価する前に、現在の木を刈り込む。
すると、元のゲーム木の全容をゲームAIは意識しない。
さらに細かな変更として、評価後の手を遅延リストから選び出すために&lt;code&gt;lazy-nth&lt;/code&gt;を使用するようにした。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;; ゲームAIが先読みする遅延ゲーム木の深さ&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defparameter&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*ai-level*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;handle-computer&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;ゲームAIを操作する
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   tree: 現在の遅延ゲーム木
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   ret: ゲームAIの指し手に対応する遅延ゲーム木&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;;; ratings: 現在のゲーム盤情報における、各指し手に対する点数のリスト&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;ratings&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;get-ratings&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;limit-tree-depth&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*ai-level*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                              &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;;; 最高得点を得られる指し手を計算し、それに対応する遅延ゲーム木を返す&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cadr&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-nth&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;position&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;apply&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;max&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ratings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ratings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;caddr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;さらに、&lt;code&gt;play-vs-computer&lt;/code&gt;にも1箇所変更がある。
可能な指し手の遅延リストが空であるか確かめるために&lt;code&gt;lazy-null&lt;/code&gt;を使うように変更する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;play-vs-computer&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;対コンピュータ戦を開始する
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   tree: 遅延ゲーム木
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   ret: &amp;#34;&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;;; ゲーム情報を表示する&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;print-info&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;;; 指し手をキーとする遅延ゲーム木のalistが空なら、現在のゲーム盤情報から勝者を表示してゲーム終了&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;;; プレイヤーIDが0(人間の手番)なら、人間から指し手を要求してゲーム続行する&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;プレイヤーIDがゲームAIの手番なら&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;、&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;ゲームAIに指し手を計算させてゲーム続行する&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cond&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-null&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;caddr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;announce-winner&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cadr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;zerop&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;play-vs-computer&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;handle-human&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;play-vs-computer&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;handle-computer&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;ヒューリスティクスを適用する&#34;&gt;ヒューリスティクスを適用する&lt;/h2&gt;

&lt;p&gt;ここでは、AIを強化する方法について考える。&lt;/p&gt;

&lt;p&gt;ゲーム木を刈り込む事により、ゲームAIについて本質的に変化が生じた。
すなわち、刈り込みがなければ完璧なプレイを見せたゲームAIは、いまや、勝てる指し手を「見逃す」可能性を生じるようになった。
これは、性能と引き換えに、完璧な手を指すことを捨てたといえる。&lt;/p&gt;

&lt;p&gt;このような状況は、ヒューリスティクスな状況であるといえる。
コンピュータサイエンスにおけるヒューリスティクスは、完全ではないが及第点以上の良い結果を素早く得られるようなプログラミングテクニックを意味する。
ダイスオブドゥームにおいても、簡単なチューニングを実施することで、ゲームAIの性能を大幅に引き上げることができる。&lt;/p&gt;

&lt;h2 id=&#34;大きく勝つか小さく勝つか&#34;&gt;大きく勝つか小さく勝つか&lt;/h2&gt;

&lt;p&gt;ゲーム木の全ての枝について勝敗を評価する場合、ゲームAIはどのくらい差をつけて勝つかを気にする必要はなかった。
つまり、ゲームの終了時点で、相手より1つでも多くのマスを確保していれば勝ちであった。&lt;/p&gt;

&lt;p&gt;しかし、今のゲームAIはヒューリスティックなアルゴリズムとなった。
すなわち、ゲームの任意の時点において、どの程度相手をリードしているのかはとても重要な勝因となる。&lt;/p&gt;

&lt;p&gt;ここで有効な経験則としては、「今、相手を十分に引き離していれば、たとえ数手先しか読まなくとも相手に追いつかれる確率は低い」というものがある。&lt;/p&gt;

&lt;p&gt;このゲームのゲームAIに実装したミニマックスアルゴリズムでは、ゲーム木の「葉」にそれぞれスコアをつけていた。
まず、バージョン1(全ての枝を確認するVer.)では、このスコアは0(AIの負け)、1(AIの勝ち)、1/2(引き分け)という単純なものであった。&lt;/p&gt;

&lt;p&gt;しかし、バージョン2においては、評価関数が見ることのできる範囲でのゲーム木の「葉」は、本当のゲームの勝敗を決するものではなく、その先に刈られた枝が続いている。
この場合、スコアの範囲を拡大して、どの手を指すと「より大きく」勝ち、どの手を指すと「より小さく」勝つのかということを判断できるようにしたい。&lt;/p&gt;

&lt;p&gt;もっと複雑なヒューリスティクスを使用して、葉の部分のゲーム盤の状態を評価する&lt;code&gt;score-board&lt;/code&gt;を記述してみる。
&lt;code&gt;score-board&lt;/code&gt;関数は、ゲーム盤の全てのマスをループして、&lt;code&gt;loop&lt;/code&gt;マクロの&lt;code&gt;sum&lt;/code&gt;を使って各マスのスコアを合計する。
プレイヤーが現在のマスを占領していれば正のスコアを加算する。
下記のルールで各マスのスコアを算出する。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;プレイヤーが所有するマスで、より強い敵のマスが隣にない:2&lt;/li&gt;
&lt;li&gt;プレイヤーが所有するマスで、より強い敵のマスが隣にある:1&lt;/li&gt;
&lt;li&gt;敵が所有するマス:-1&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; &lt;code&gt;score-board&lt;/code&gt;はヒューリスティックな関数であって、スコアの付け方に絶対的な正解は無い。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;score-board&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;board&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;player&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;指定のプレイヤーにとっての現在のゲーム盤情報のスコアを算出する
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   board: ゲーム盤情報
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   player: プレイヤーID
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   ret: ゲーム盤情報のスコア&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;;; ゲーム盤を走査しながら、各マスのスコアを合計する&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;hex&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;across&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;board&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;pos&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;;; 下記のルールで各マスのスコアを算出する&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;;; - プレイヤーが所有するマスで、より強い敵のマスが隣にない:2&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;;; - プレイヤーが所有するマスで、より強い敵のマスが隣にある:1&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;;; - 敵が所有するマス:-1&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;sum&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;eq&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;hex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;player&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;threatened&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;pos&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;board&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                    &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
                    &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                &lt;span class=&#34;mi&#34;&gt;-1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上の&lt;code&gt;score-board&lt;/code&gt;関数で使われている&lt;code&gt;threatened&lt;/code&gt;関数を次に示す。
この関数では、引数で指定したマスの隣を走査して、敵が所有している、かつ、サイコロが引数のマスよりも多いマスが無いかを調べる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;threatened&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;pos&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;board&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;隣のマスにより強い敵のマスがあるか判定する
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   pos: ゲーム盤の位置
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   board: ゲーム盤情報
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   ret: t:隣により強い敵のマスがある nil:ない&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;let*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;hex&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;aref&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;board&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;; 引数posで指定したマス情報&lt;/span&gt;
         &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;player&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;hex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;; マスを所有するプレイヤーのID&lt;/span&gt;
         &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;dice&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cadr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;hex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;; マスに置かれたサイコロの数&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;neighbors&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
          &lt;span class=&#34;nv&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;let*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;nhex&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;aref&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;board&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; posの隣のマス情報&lt;/span&gt;
                    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;nplayer&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;nhex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;; posの隣のマスを所有するプレイヤーのID&lt;/span&gt;
                    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;ndice&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cadr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;nhex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;; posの隣のマスに置かれたサイコロの数&lt;/span&gt;
               &lt;span class=&#34;c1&#34;&gt;;; posの隣のマスが、異なる所有者でより多くのサイコロを持っていたら、&lt;/span&gt;
               &lt;span class=&#34;c1&#34;&gt;;; 隣のマスにより強い敵のマスがあると評価する&lt;/span&gt;
               &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;eq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;player&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;nplayer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ndice&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;dice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次に、上の&lt;code&gt;score-board&lt;/code&gt;と&lt;code&gt;threatened&lt;/code&gt;を使って、&lt;code&gt;get-ratings&lt;/code&gt;と&lt;code&gt;rate-position&lt;/code&gt;を改良してみる。
大きな改良点としては、これ以上続く指し手のないゲーム木に対して、得点をつけていることである。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;get-ratings&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;player&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;現在の遅延ゲーム木における指定したプレイヤーが取りうる得点を全パターン返す
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   tree: 遅延ゲーム木
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   player: 得点を算出したいプレイヤーのID
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   ret: 得点のリスト&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;take-all&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-mapcar&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;move&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                           &lt;span class=&#34;c1&#34;&gt;;; 指し手に対応するそのマスの得点を計算する&lt;/span&gt;
                           &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rate-position&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cadr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;move&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;player&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                         &lt;span class=&#34;c1&#34;&gt;;; 可能な全ての指し手&lt;/span&gt;
                         &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;caddr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;rate-position&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;player&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;現在のゲーム木から指定プレイヤーの得点を算出する
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   tree: 遅延ゲーム木
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   player: プレイヤーID
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   ret: 得点&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;moves&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;caddr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;; 可能な指し手&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;;; 現在のゲーム木に可能な指し手があれば、次に取りうる全てのゲーム木を見ていき、&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;;; ミニマックスアルゴリズムを適用したときの得点を返す&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;;; 現在のゲーム木に可能な指し手がなければ、現在のゲーム盤の得点を返す&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-null&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;moves&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;apply&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;eq&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;player&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                   &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;max&lt;/span&gt;
                   &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;min&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;get-ratings&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;player&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;score-board&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cadr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;player&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで、ヒューリスティクスを用いたゲームAIが大きな盤面で動かせる。
以前の例と同様に、プレイヤーBの指してはAIアルゴリズムで自動的に計算されたものとなる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;play-vs-computer&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;game-tree&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;gen-board&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;アルファ-ベータ法&#34;&gt;アルファ・ベータ法&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;アルファ・ベータ法&lt;/strong&gt; はミニマックスアルゴリズムにおける、よく知られた最適化手法である。
最終的なミニマックス評価の結果に影響を及ぼさないと判断した枝を飛ばしてしまう(枝刈りする)ことで処理速度を上げるのである。&lt;/p&gt;

&lt;p&gt;ゲーム木のとある枝が最終的な評価に影響を及ぼさないというのはどういう場合か。&lt;br /&gt;
アルファ・ベータ法を理解するため、2x2のゲーム盤でのゲーム木を示した図を見てみる。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;alpha-beta-pruning.svg&#34; alt=&#34;alpha-beta-pruning&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;図の意味&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ゲームは図の一番上からスタートする&lt;/li&gt;
&lt;li&gt;矢印が可能な手を表す&lt;/li&gt;
&lt;li&gt;各四角には、どちらが手番化を示してある&lt;/li&gt;
&lt;li&gt;各ゲーム盤の右下の数字が、(&lt;code&gt;score-board&lt;/code&gt;関数を使った)最新の&lt;code&gt;get-ratings&lt;/code&gt;による評価値

&lt;ul&gt;
&lt;li&gt;葉ノードでは、評価値は&lt;code&gt;score-board&lt;/code&gt;により直接計算される&lt;/li&gt;
&lt;li&gt;葉ノード以外では、数値はミニマックスアルゴリズムにより選ばれる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ゲーム木の各状態の中で、指し手を選ぶ余地のあるノード(分岐のあるノード)はMAXノード、または、MINと示してある

&lt;ul&gt;
&lt;li&gt;プレイヤーAが選べる分岐はMAXノード&lt;/li&gt;
&lt;li&gt;プレイヤーBが選べる分岐はMINノード&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ミニマックスアルゴリズムは、&lt;strong&gt;深さ優先探索&lt;/strong&gt;である。
つまり、ゲーム木を左から右に、深さ優先で、全ての葉を調べていく。
(ここでは、&lt;code&gt;*ai-level*&lt;/code&gt;が高く設定されていて、木が一切刈り込まれていないとしよう。)
全ての葉を見た後、分岐があるノードについて、最小または最大のスコアを採用する。&lt;/p&gt;

&lt;p&gt;ここで、MINの分岐に注目する。
ミニマックスアルゴリズムを適用すると、MINノードの最初(左側)のぶん機のスコアは&lt;code&gt;8&lt;/code&gt;であることが分かる。
AIエンジンが右側の枝を見に行く際には、スコアが8以下になることだけが重要である。
8とそれより大きい数から最小を取れば常に8であるから、&lt;strong&gt;8より大きな数&lt;/strong&gt;は結果に影響しない。&lt;/p&gt;

&lt;p&gt;したがって、AIが左の分岐でスコア8を見つけたら、その時点でもうそれ以上右側の枝を調べる必要がない事がわかる。
つまり、ミニマックスアルゴリズムにおいては、図中の点線で示されている部分の枝を調べる必要はないということである。&lt;/p&gt;

&lt;p&gt;この例においては、枝刈りできた部分はごく一部分のみであったが、ゲーム木の規模が大きくなれば、大抵は大部分の枝を刈り取ることができる。&lt;/p&gt;

&lt;h3 id=&#34;アルファ-ベータ法のライブラリを作る&#34;&gt;アルファ・ベータ法のライブラリを作る&lt;/h3&gt;

&lt;p&gt;巷でよく見られるアルファ・ベータ法においては、&lt;code&gt;alpha&lt;/code&gt;と&lt;code&gt;beta&lt;/code&gt;という変数を利用する。
つまり、MINノードかMAXノードかによって、&lt;code&gt;alpha&lt;/code&gt;と&lt;code&gt;beta&lt;/code&gt;の役割(上限か下限か)を適宜入れ替えて使うことで、同じコードを両方の種類のノードに使えるようにする。&lt;br /&gt;
しかし、ここで作成するコードでは、わかりやすさを優先して、&lt;code&gt;upper-limit&lt;/code&gt;と&lt;code&gt;lower-limit&lt;/code&gt;という変数を受け渡していくことにする。
これらは、それぞれ、ゲーム木を調べている最中に気にすべき上限値と下限値を表す。
&lt;code&gt;alpha&lt;/code&gt;と&lt;code&gt;beta&lt;/code&gt;を使わないことで、MINとMAXそれぞれの場合分けのコードに重複が生じるが、上限値と下限値を明確にしておくことで、アルファ・ベータ法のコードをより平易にする意味がある。&lt;/p&gt;

&lt;p&gt;もう一つの注意として、ここでは、ミニマックスアルゴリズムのコード部分と、アルファ・ベータ法のコード部分を分離しない。
先程のダイスオブドゥームにおける「先読み制限」のコードでは、先読みを制限する&lt;code&gt;limit-tree-depth&lt;/code&gt;関数をAIコードの残りの部分と独立して実践した。
アルファ・ベータ法も同様に、ゲーム木を変換する独立した関数として実装できなくはない。
しかし、アルファ・ベータ法のコードはミニマックスの計算の中間結果を参照しなければならないので、少しややこしくなる。
もっと進んだAIエンジンなら、それでも分離しておくのが良い設計となるが、この規模のゲームであれば、アルファ・ベータ法のチェックもミニマックスアルゴリズムのコード中に入れてしまっても良いであろう。&lt;/p&gt;

&lt;p&gt;ここからは、実装に入る。
まず、&lt;code&gt;get-ratings&lt;/code&gt;関数を、&lt;code&gt;ab-get-ratings-max&lt;/code&gt;関数と&lt;code&gt;ab-get-ratings-min&lt;/code&gt;関数で置き換える。
&lt;code&gt;get-ratings&lt;/code&gt;関数は、与えられたゲーム盤の状態から、可能な指し手のうち最良のものを計算する関数であった。
そして、これから実装したいのは、「評価関数が「これ以上の指しては存在しない」と判断したら直ちに評価を打ち切る処理」である。
打ち切りの決定ロジックは、今見ているノードがMAX(自分のプレイヤーの手番)か、MIN(相手プレイヤーの手番)かによって異なる。&lt;/p&gt;

&lt;p&gt;まず、MAXノードについて計算する関数&lt;code&gt;ab-get-ratings-max&lt;/code&gt;を実装する。
この関数は引数として&lt;code&gt;get-ratings&lt;/code&gt;関数が受け取っていた引数に加え、&lt;code&gt;upper-limit&lt;/code&gt;と&lt;code&gt;lower-limit&lt;/code&gt;を受け取る。
この関数自身は最大値だけに関心があるため、&lt;code&gt;lower-limit&lt;/code&gt;は参照しない。
ただし、子ノードにMINノードがあれば、再帰呼出しの先では最小値を求める必要がある。
したがって、再帰呼び出し先のために下限を引数に持つ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ab-get-ratings-max&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;player&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;upper-limit&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lower-limit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;MAXノードにおいて、現在のゲーム盤で取りうるスコアの最大値を計算する
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   tree: 現在の遅延ゲーム木
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   player: プレイヤーID
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   upper-limit: スコアの上限
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   lower-limit: スコアの下限
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   ret: スコアの最大値&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;labels&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;moves&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lower-limit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
             &lt;span class=&#34;c1&#34;&gt;;; 可能な指し手の中からスコアの最大値を求める&lt;/span&gt;
             &lt;span class=&#34;c1&#34;&gt;;; moves: 可能な指し手&lt;/span&gt;
             &lt;span class=&#34;c1&#34;&gt;;; lower-limit: 探索すべきスコアの下限&lt;/span&gt;
             &lt;span class=&#34;c1&#34;&gt;;; ret: スコアの最大値&lt;/span&gt;
             &lt;span class=&#34;c1&#34;&gt;;; 可能な指し手があれば、それらに対してスコアの最大値を計算する&lt;/span&gt;
             &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;unless&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-null&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;moves&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
               &lt;span class=&#34;c1&#34;&gt;;; x: 未探索の指し手のうち一番左側の指し手のスコアを計算する&lt;/span&gt;
               &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;ab-rate-position&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cadr&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;moves&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                                          &lt;span class=&#34;nv&#34;&gt;player&lt;/span&gt;
                                          &lt;span class=&#34;nv&#34;&gt;upper-limit&lt;/span&gt;
                                          &lt;span class=&#34;nv&#34;&gt;lower-limit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
                 &lt;span class=&#34;c1&#34;&gt;;; - xが上限以上なら、それ以上探索する必要はないので評価を打ち切る&lt;/span&gt;
                 &lt;span class=&#34;c1&#34;&gt;;; - xがそれ以外なら、残りの枝をさらに探索する必要がある&lt;/span&gt;
                 &lt;span class=&#34;c1&#34;&gt;;;   - xがそれまでのlower-limitより大きければxを新たなlower-limitとして採用する&lt;/span&gt;
                 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;upper-limit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                     &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                     &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cons&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-cdr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;moves&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;max&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lower-limit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))))))&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;;; 可能な指し手と下限を指定して、スコアの最大値を計算する&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;caddr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lower-limit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次に、MINノードについて計算する関数&lt;code&gt;ab-get-ratings-min&lt;/code&gt;を実装する。
この関数は引数として&lt;code&gt;get-ratings&lt;/code&gt;関数が受け取っていた引数に加え、&lt;code&gt;upper-limit&lt;/code&gt;と&lt;code&gt;lower-limit&lt;/code&gt;を受け取る。
この関数自身は最小値だけに関心があるため、&lt;code&gt;upper-limit&lt;/code&gt;は参照しない。
ただし、子ノードにMAXノードがあれば、再帰呼出しの先では最大値を求める必要がある。
したがって、再帰呼び出し先のために上限を引数に持つ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ab-get-ratings-min&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;player&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;upper-limit&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lower-limit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;MINノードにおいて、現在のゲーム盤で取りうるスコアの最小値を計算する
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   tree: 現在の遅延ゲーム木
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   player: プレイヤーID
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   upper-limit: スコアの上限
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   lower-limit: スコアの下限
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   ret: スコアの最大値&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;labels&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;moves&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;upper-limit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
             &lt;span class=&#34;c1&#34;&gt;;; 可能な指し手の中からスコアの最大値を求める&lt;/span&gt;
             &lt;span class=&#34;c1&#34;&gt;;; moves: 可能な指し手&lt;/span&gt;
             &lt;span class=&#34;c1&#34;&gt;;; upper-limit: 探索すべきスコアの上限&lt;/span&gt;
             &lt;span class=&#34;c1&#34;&gt;;; ret: スコアの最大値&lt;/span&gt;
             &lt;span class=&#34;c1&#34;&gt;;; 可能な指し手があれば、それらに対してスコアの最大値を計算する&lt;/span&gt;
             &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;unless&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-null&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;moves&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
               &lt;span class=&#34;c1&#34;&gt;;; x: 未探索の指し手のうち一番左側の指し手のスコアを計算する&lt;/span&gt;
               &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;ab-rate-position&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cadr&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;moves&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                                          &lt;span class=&#34;nv&#34;&gt;player&lt;/span&gt;
                                          &lt;span class=&#34;nv&#34;&gt;upper-limit&lt;/span&gt;
                                          &lt;span class=&#34;nv&#34;&gt;lower-limit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
                 &lt;span class=&#34;c1&#34;&gt;;; - xが下限以下なら、それ以上探索する必要はないので評価を打ち切る&lt;/span&gt;
                 &lt;span class=&#34;c1&#34;&gt;;; - xがそれ以外なら、残りの枝をさらに探索する必要がある&lt;/span&gt;
                 &lt;span class=&#34;c1&#34;&gt;;;   - xがそれまでのupper-limitより大きければxを新たなupper-limitとして採用する&lt;/span&gt;
                 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lower-limit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                     &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                     &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cons&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-cdr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;moves&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;min&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;upper-limit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))))))&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;;; 可能な指し手と上限を指定して、スコアの最小値を計算する&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;caddr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;upper-limit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;新たな関数&lt;code&gt;ab-rate-position&lt;/code&gt;では、まず現在のノードが自分の手番化相手の手番化を確認する。
自分の手番であればMAXノードということであるから、処理を&lt;code&gt;ab-get-ratings-max&lt;/code&gt;に任せる。
相手の手番であればMINノードということであるから、処理を&lt;code&gt;ab-get-ratings-min&lt;/code&gt;に任せる。
その他の部分は以前の&lt;code&gt;rate-position&lt;/code&gt;と同じである。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ab-rate-position&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;player&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;upper-limit&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lower-limit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;moves&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;caddr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-null&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;moves&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;eq&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;player&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;apply&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;max&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;ab-get-ratings-max&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;
                                             &lt;span class=&#34;nv&#34;&gt;player&lt;/span&gt;
                                             &lt;span class=&#34;nv&#34;&gt;upper-limit&lt;/span&gt;
                                             &lt;span class=&#34;nv&#34;&gt;lower-limit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;apply&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;min&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;ab-get-ratings-min&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;
                                             &lt;span class=&#34;nv&#34;&gt;player&lt;/span&gt;
                                             &lt;span class=&#34;nv&#34;&gt;upper-limit&lt;/span&gt;
                                             &lt;span class=&#34;nv&#34;&gt;lower-limit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;score-board&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cadr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;player&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最後に、ミニマックスアルゴリズムを起動する&lt;code&gt;handle-computer&lt;/code&gt;関数を、新しい関数を呼ぶように変更する。
この関数は、&lt;code&gt;ab-get-ratings-max&lt;/code&gt;を呼び出すことでミニマックスアルゴリズムを起動する。
この関数が呼ばれるのは、自分の手番なわけだから、最初に評価されるノードはMAXノードである。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;handle-computer&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;ratings&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;ab-get-ratings-max&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;limit-tree-depth&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*ai-level*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                                     &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                                     &lt;span class=&#34;nv&#34;&gt;most-positive-fixnum&lt;/span&gt;
                                     &lt;span class=&#34;nv&#34;&gt;most-negative-fixnum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cadr&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-nth&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;position&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;apply&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;max&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ratings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ratings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;caddr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この関数を呼び出すにあたって、&lt;code&gt;upper-limit&lt;/code&gt;と&lt;code&gt;lower-limit&lt;/code&gt;の初期値を決めてやらないとならない。
ミニマックスアルゴリズムをこれから開始するわけであるから、上限および上限はできる限り無限に近づけておきたい。
多くのLisp環境では無限大が定義されているが、ANSI Common Lispには無限大が含まれていない。
ただし、規格としては、&lt;code&gt;most-positive-fixnum&lt;/code&gt;と&lt;code&gt;most-negative-fixnum&lt;/code&gt;を定めていて、これらはとても大きな絶対値を持つ正負の数である。
今回の目的としてはこれで十分であるため、これらの値を&lt;code&gt;ab-get-ratings-max&lt;/code&gt;に渡している。&lt;/p&gt;

&lt;p&gt;AIエンジンの効率をもう少し上げたいなら、&lt;code&gt;upper-limit&lt;/code&gt;と&lt;code&gt;lower-limit&lt;/code&gt;を&lt;code&gt;score-board&lt;/code&gt;が返しうる最大値と最小値にしておくことも考えられる。
そうすれば、多少は枝刈りできる機会が増えるであろう。
しかし、&lt;code&gt;score-board&lt;/code&gt;が返す値の範囲はゲーム盤の大きさに依存しており、将来、点数計算を更に最適化したら変化するリスクを持つ。
したがって、今のところは初期値には安全なものを採用することとする。&lt;/p&gt;

&lt;p&gt;ここまでの最適化を完了させたところで、ゲーム盤の大きさを5x5に拡張してみる。
ここまでで、下の最適化を実装したAIアルゴリズムであれば、この大きさのゲーム盤でも難なく処理できるであろう。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;遅延評価&lt;/li&gt;
&lt;li&gt;先読み制限&lt;/li&gt;
&lt;li&gt;枝刈り&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;5x5ゲーム盤でゲーム開始&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defparameter&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*board-size*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defparameter&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*board-hexnum*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*board-size*&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*board-size*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>書籍 Land of Lisp 19章 ダイスオブドゥームにグラフィカルなWebインターフェースをつける</title>
      <link>https://otaon.github.io/web/ja-jp/2019/03/07/%E6%9B%B8%E7%B1%8D-land-of-lisp-19%E7%AB%A0-%E3%83%80%E3%82%A4%E3%82%B9%E3%82%AA%E3%83%96%E3%83%89%E3%82%A5%E3%83%BC%E3%83%A0%E3%81%AB%E3%82%B0%E3%83%A9%E3%83%95%E3%82%A3%E3%82%AB%E3%83%AB%E3%81%AAweb%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%95%E3%82%A7%E3%83%BC%E3%82%B9%E3%82%92%E3%81%A4%E3%81%91%E3%82%8B/</link>
      <pubDate>Thu, 07 Mar 2019 00:00:00 +0900</pubDate>
      
      <guid>https://otaon.github.io/web/ja-jp/2019/03/07/%E6%9B%B8%E7%B1%8D-land-of-lisp-19%E7%AB%A0-%E3%83%80%E3%82%A4%E3%82%B9%E3%82%AA%E3%83%96%E3%83%89%E3%82%A5%E3%83%BC%E3%83%A0%E3%81%AB%E3%82%B0%E3%83%A9%E3%83%95%E3%82%A3%E3%82%AB%E3%83%AB%E3%81%AAweb%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%95%E3%82%A7%E3%83%BC%E3%82%B9%E3%82%92%E3%81%A4%E3%81%91%E3%82%8B/</guid>
      
        <description>

&lt;h2 id=&#34;t-o-c&#34;&gt;T.O.C.&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#191-ゲーム盤をsvgフォーマットで描画する&#34;&gt;19.1 ゲーム盤をSVGフォーマットで描画する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#192-webサーバインターフェースを作る&#34;&gt;19.2 Webサーバインターフェースを作る&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#193-ダイスオブドゥームver3をプレイする&#34;&gt;19.3 ダイスオブドゥームVer3をプレイする&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;18章で作ったダイスオブドゥームVer2では、Ver1よりも大きなゲーム盤でプレイ可能となった。
この規模だと、コンソールでの可視化には視認性に限界がある。&lt;br /&gt;
そこで、この章では、ダイスオブドゥームにグラフィックをつけ、クリックして手が指せるように改造する。&lt;/p&gt;

&lt;h2 id=&#34;19-1-ゲーム盤をsvgフォーマットで描画する&#34;&gt;19.1 ゲーム盤をSVGフォーマットで描画する&lt;/h2&gt;

&lt;p&gt;13章でWebサーバを作成し、17章ではDSLを使ってSVGを描画した。
これらを組み合わせれば、ブラウザ上でグラフィック表示を簡単に実現できる。&lt;/p&gt;

&lt;p&gt;HTML5の規格では、SVG画像をHTMLドキュメント内に埋め込むことができるから、これを利用する方針とする。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; ここからは、18章で作成した&lt;code&gt;dice of doom version.2&lt;/code&gt;と、13章で作成した&lt;code&gt;webserver&lt;/code&gt;と、16,17章で作成した&lt;code&gt;SVG&lt;/code&gt;レンダリングライブラリを使用する。&lt;/p&gt;

&lt;p&gt;まず、ゲーム盤の各部の大きさを決める定数を定義する。&lt;br /&gt;
ボードの幅と高さは900x500とする。&lt;br /&gt;
&lt;code&gt;*board-scale*&lt;/code&gt;は1つの升の幅の半分の長さをピクセル数で表したものである。&lt;br /&gt;
&lt;code&gt;*top-offset*&lt;/code&gt;は、盤の上に3マス分の空白を開けることを表す。&lt;br /&gt;
&lt;code&gt;*dice-scale*&lt;/code&gt;は、1つのサイコロの大きさ(幅、高さ)を指定する。&lt;br /&gt;
&lt;code&gt;*dot-size*&lt;/code&gt;はサイコロの目の点の大きさで、ここではサイコロ自体の大きさの0.05倍としている。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defparameter&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*board-width*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;900&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;; ゲーム盤の横幅(pixel)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defparameter&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*board-height*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;500&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;; ゲーム盤の高さ(pixel)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defparameter&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*board-scale*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;; 1つのマスの幅の半分の長さ(pixel)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defparameter&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*top-offset*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;; ゲーム盤の上にあける空白の大きさ(何マス分か)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defparameter&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*dice-scale*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;40&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;     &lt;span class=&#34;c1&#34;&gt;; 1つのサイコロの大きさ(pixel)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defparameter&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*dot-size*&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.05&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;     &lt;span class=&#34;c1&#34;&gt;; サイコロの目の大きさ(サイコロ自体の何倍か)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;サイコロを描く&#34;&gt;サイコロを描く&lt;/h3&gt;

&lt;p&gt;サイコロを描くコードを示す。ここでは、サイコロを、SVGを使って全てコードとして記載する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;draw-die-svg&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;col&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;指定した座標にサイコロを1つ描画する
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   x: サイコロを描画するx座標(pixel)
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   y: サイコロを描画するy座標(pixel)
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   col: サイコロの色(RGB値)
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   ret: -&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;labels&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;calc-pt&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;pt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
             &lt;span class=&#34;c1&#34;&gt;;; 描画対象の座標を補正する&lt;/span&gt;
             &lt;span class=&#34;c1&#34;&gt;;; pt:  補正する前の座標コンスセル&lt;/span&gt;
             &lt;span class=&#34;c1&#34;&gt;;; ret: 補正した後の座標コンスセル&lt;/span&gt;
             &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cons&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*dice-scale*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;pt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
                   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*dice-scale*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cdr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;pt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))&lt;/span&gt;
           &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;pol&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;col&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
             &lt;span class=&#34;c1&#34;&gt;;; 指定した頂点座標と色情報をもとにポリゴンを描画する&lt;/span&gt;
             &lt;span class=&#34;c1&#34;&gt;;; pol: ポリゴンの頂点座標&lt;/span&gt;
             &lt;span class=&#34;c1&#34;&gt;;; col: ポリゴンの色情報(RGB値)&lt;/span&gt;
             &lt;span class=&#34;c1&#34;&gt;;; ret: ポリゴンのsvg記述&lt;/span&gt;
             &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;polygon&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;mapcar&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;calc-pt&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;pol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;col&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;;; サイコロの上面を描画する&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;-1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;-0.6&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;-0.75&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;-0.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.6&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;-0.75&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;brightness&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;col&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;40&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;;; サイコロの左面を描画する&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;-0.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;-0.6&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;-0.75&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;-0.6&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.25&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
       &lt;span class=&#34;nv&#34;&gt;col&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;;; サイコロの右面を描画する&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;-0.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.6&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;-0.75&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.6&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.25&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;brightness&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;col&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;-40&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;;; サイコロの目を描画する(サイコロ1つの3面分を一気に)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;mapc&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;polygon&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;mapcar&lt;/span&gt;
                       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;xx&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;yy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                         &lt;span class=&#34;c1&#34;&gt;;; サイコロの目を描画する&lt;/span&gt;
                         &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;calc-pt&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cons&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;xx&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*dot-size*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                                        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;yy&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*dot-size*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))&lt;/span&gt;
                       &lt;span class=&#34;c1&#34;&gt;;; サイコロの目のx座標とy座標&lt;/span&gt;
                       &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;-1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;-1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                       &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;-1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;-1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                     &lt;span class=&#34;c1&#34;&gt;;; サイコロの目の色(白)&lt;/span&gt;
                     &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
          &lt;span class=&#34;c1&#34;&gt;;; サイコロの目のx座標とy座標&lt;/span&gt;
          &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;-0.05&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.125&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.3&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;-0.3&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;-0.125&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.05&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.2&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.2&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.45&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.45&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;-0.45&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;-0.2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
          &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;-0.875&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;-0.80&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;-0.725&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;-0.775&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;-0.70&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;-0.625&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;-0.35&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;-0.05&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;-0.45&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;-0.15&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;-0.45&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;-0.05&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;では、&lt;code&gt;x=50, y=50&lt;/code&gt;の位置に、RGB値&lt;code&gt;(255 0 0)&lt;/code&gt;(赤)のサイコロを描く。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;svg&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;draw-die-svg&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;50&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;50&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; サイコロ1つ分のSVGコードが表示される&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;マスを描く&#34;&gt;マスを描く&lt;/h3&gt;

&lt;p&gt;次に、6角マスとその上に積み上がったサイコロを描く関数を書こう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;draw-tile-svg&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;pos&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;hex&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;xx&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;yy&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;col&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;chosen-tile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;六角形のマスとその上に積み上がったサイコロを描く
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   x: マスのx座標(マス目)
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   y: マスのy座標(マス目)
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   pos: 描画対象のマス
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   hex: プレイヤーIDとサイコロ数のコンスセル
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   xx: マスの描画用x座標(pixel)
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   yy: マスの描画用y座標(pixel)
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   col: マスとサイコロの色
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   chosen-tile: 選択中のマスの番号
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   ret: -&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;;; マスを描く(厚みを持たせるため、縦をずらして2重に描く)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;z&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;below&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;polygon&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;mapcar&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;pt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                              &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cons&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;xx&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*board-scale*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;pt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
                                    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;yy&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*board-scale*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cdr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;pt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))))&lt;/span&gt;
                            &lt;span class=&#34;c1&#34;&gt;;; 六角形のマスの座標(上から時計回り)&lt;/span&gt;
                            &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;-1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;-0.2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;-0.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;-0.2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;-1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
                    &lt;span class=&#34;c1&#34;&gt;;; 選択中のマスを明るくする&lt;/span&gt;
                    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;eql&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;pos&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;chosen-tile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;brightness&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;col&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                        &lt;span class=&#34;nv&#34;&gt;col&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;;; サイコロを描く&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;z&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;below&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;second&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;hex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;draw-die-svg&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;xx&lt;/span&gt;
                            &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*dice-scale*&lt;/span&gt;
                               &lt;span class=&#34;mf&#34;&gt;0.3&lt;/span&gt;
                               &lt;span class=&#34;c1&#34;&gt;;; サイコロを左右にブレさせる&lt;/span&gt;
                               &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;oddp&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                                   &lt;span class=&#34;mf&#34;&gt;-0.3&lt;/span&gt;
                                   &lt;span class=&#34;mf&#34;&gt;0.3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
                         &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;yy&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*dice-scale*&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;z&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                         &lt;span class=&#34;nv&#34;&gt;col&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;では、1マス分のタイルを描く。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;svg&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;300&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;300&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;draw-tile-svg&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;150&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; サイコロ3つが載ったタイル1つ分のSVGコードが表示される&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;ゲーム盤を描く&#34;&gt;ゲーム盤を描く&lt;/h3&gt;

&lt;p&gt;ゲーム盤全体をSVG画像として描く。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;; サイコロの色(赤と青)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defparameter&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*die-colors*&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;63&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;63&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;63&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;63&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;SVGには、webリンクを埋め込むことができる。&lt;br /&gt;
これは、通常のHTMLにおける&lt;code&gt;&amp;lt;a href=&amp;quot;...&amp;quot;&amp;gt;&lt;/code&gt;によるハイパーリンクと同様に動作する。&lt;br /&gt;
プレイヤーが次に選択できるマスについて、そのマスのSVGをリンクで囲んでやることにより、マスがクリック可能になる。&lt;/p&gt;

&lt;p&gt;ゲーム盤は、斜めから見下ろした形で描画するため、真上からみた形の座標を変換している。&lt;br /&gt;
また、奥に行くにつれてマスを暗くすることにより、奥行きを出している。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;draw-board-svg&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;board&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;chosen-tile&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;legal-tiles&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;ゲーム盤をsvg記述する
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   board: ゲーム盤情報
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   chosen-tile: 選択中のマス
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   legal-tiles: プレイヤーが次に選択可能なマスのリスト
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   ret: -&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;;; ゲーム盤の全マスを走査する&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;below&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*board-size*&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;below&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*board-size*&lt;/span&gt;
                 &lt;span class=&#34;c1&#34;&gt;;; 現在のマスの番号&lt;/span&gt;
                 &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;pos&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*board-size*&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                 &lt;span class=&#34;c1&#34;&gt;;; 現在のマスの情報(プレイヤーIDとサイコロ数)&lt;/span&gt;
                 &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;hex&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;aref&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;board&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                 &lt;span class=&#34;c1&#34;&gt;;; 現在のマスの表示座標(x座標)&lt;/span&gt;
                 &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;xx&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*board-scale*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*board-size*&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
                 &lt;span class=&#34;c1&#34;&gt;;; 現在のマスの表示座標(y座標)&lt;/span&gt;
                 &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;yy&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*board-scale*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*top-offset*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                 &lt;span class=&#34;c1&#34;&gt;;; マスとサイコロの色(上の行ほど暗く補正する)&lt;/span&gt;
                 &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;col&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;brightness&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;nth&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;first&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;hex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*die-colors*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                                       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;-15&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*board-size*&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
                 &lt;span class=&#34;c1&#34;&gt;;; 現在のマスが、プレイヤーが次に選択可能なマス、または、選択中のマスの場合、&lt;/span&gt;
                 &lt;span class=&#34;c1&#34;&gt;;; リンクで囲ってクリック可能にする&lt;/span&gt;
                 &lt;span class=&#34;c1&#34;&gt;;; 現在のマスが、それ以外の場合、そのまま選択される&lt;/span&gt;
                 &lt;span class=&#34;nv&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;member&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;pos&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;legal-tiles&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;eql&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;pos&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;chosen-tile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                        &lt;span class=&#34;c1&#34;&gt;;; リンクの場合は1マス分を&amp;lt;g&amp;gt;タグで囲んでグルーピングする&lt;/span&gt;
                        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;tag&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;g&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
                             &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;tag&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;xlink:href&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;make-game-link&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                                  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;draw-tile-svg&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;pos&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;hex&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;xx&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;yy&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;col&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;chosen-tile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
                        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;draw-tile-svg&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;pos&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;hex&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;xx&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;yy&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;col&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;chosen-tile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;make-game-link&lt;/code&gt;は、適切なURLを作って返す関数である。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;make-game-link&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;リンクするURLを生成する
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   pos: リンク対象のマスの番号
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   ret: -&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;format&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;/game.html?chosen=~a&amp;#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下記を実行した結果をファイルに保存してwebブラウザで表示すると、ゲーム盤が表示される。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;svg&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*board-width*&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*board-height*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;draw-board-svg&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;gen-board&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;; ゲーム盤のSVGコードが表示される&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;19-2-webサーバインターフェースを作る&#34;&gt;19.2 Webサーバインターフェースを作る&lt;/h2&gt;

&lt;h3 id=&#34;リクエストハンドラの作成&#34;&gt;リクエストハンドラの作成&lt;/h3&gt;

&lt;p&gt;webサーバの中心となる関数は、&lt;code&gt;dod-request-handler&lt;/code&gt;である。
この関数は、先に作ったwebブラウザからくる全てのリクエストを処理する役割を持つ。
次に示すのが、&lt;code&gt;dod-request-handler&lt;/code&gt;のコードである。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;; 現在のゲーム木&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defparameter&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*cur-game-tree*&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defparameter&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*from-tile*&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;dod-request-handler&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;path&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;header&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;params&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;Webブラウザから来る全てのリクエストを処理する
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   path: URL
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   header: *未使用*
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   params: URLのパラメータ
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   ret: -&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;;; アクセスされたURLがgame.htmlならゲーム処理する&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;equal&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;path&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;game.html&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;c1&#34;&gt;;; doctypeを指定して、html5だと認識させる&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;progn&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;princ&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;lt;!doctype html&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
             &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;tag&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;center&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
                  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;princ&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Welcome to DICE OF DOOM!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;tag&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;br&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
                  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;chosen&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;assoc&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;chosen&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;params&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
                    &lt;span class=&#34;c1&#34;&gt;;; どのマスも選択されていないか、ゲーム木が空なら、&lt;/span&gt;
                    &lt;span class=&#34;c1&#34;&gt;;; ゲームを初期化する&lt;/span&gt;
                    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*cur-game-tree*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;chosen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;setf&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;chosen&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;web-initialize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                    &lt;span class=&#34;c1&#34;&gt;;; ゲーム木における可能な手が空なら、ゲームを終了させる&lt;/span&gt;
                    &lt;span class=&#34;c1&#34;&gt;;; 人間のプレイヤーの手番なら、パラメータから指し手を取得し、htmlを組み立てる&lt;/span&gt;
                    &lt;span class=&#34;c1&#34;&gt;;; ゲームAIの手番なら、ゲームAIに指し手を選ばせ、htmlを組み立てる&lt;/span&gt;
                    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cond&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-null&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;caddr&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*cur-game-tree*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                           &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;web-announce-winner&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cadr&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*cur-game-tree*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
                          &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;zerop&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*cur-game-tree*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                           &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;web-handle-human&lt;/span&gt;
                             &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;chosen&lt;/span&gt;
                               &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;read-from-string&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cdr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;chosen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))&lt;/span&gt;
                          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;web-handle-computer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;
                  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;tag&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;br&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
                  &lt;span class=&#34;c1&#34;&gt;;; ゲーム盤を描く&lt;/span&gt;
                  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;draw-dod-page&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*cur-game-tree*&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*from-tile*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;princ&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Sorry... I don&amp;#39;t know that page.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;dod-request-handler&lt;/code&gt;では、まず、リクエストされたページが&lt;code&gt;game.html&lt;/code&gt;であるかどうかをチェックする。&lt;br /&gt;
このページが、webサーバ上でゲームを置いておくことにするページである。&lt;/p&gt;

&lt;p&gt;ページの先頭では、まず*doctype*を指定する。
これにより、webブラウザは返されたページがHTML5であると認識する。&lt;br /&gt;
その後、オープニングメッセージを画面中央に表示するHTMLを出力する。&lt;/p&gt;

&lt;h3 id=&#34;このゲームwebサーバの制限&#34;&gt;このゲームwebサーバの制限&lt;/h3&gt;

&lt;p&gt;このwebサーバには、制限が存在する。&lt;br /&gt;
まず、処理を簡単にするため、&lt;code&gt;dod-request-handler&lt;/code&gt;は誰からのwebリクエストが来たのかを一切チェックしていない。&lt;br /&gt;
したがって、複数のプレイヤーが別々のゲームを同時にプレイしようとしたら、&lt;code&gt;dod-request-handler&lt;/code&gt;は正常に動作しない。&lt;br /&gt;
マルチユーザ対応したいのであれば、セッション情報をキーとするハッシュテーブルに、グローバル変数の情報を格納してしまうことにより、ユーザごとのゲーム木を保持させることができる。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;dod-request-handler&lt;/code&gt;のもう一つの制限は、URLからの情報を読むために&lt;code&gt;read-from-string&lt;/code&gt;関数を使っていることである。&lt;br /&gt;
この関数は、悪意のあるLispプログラマであれば、簡単に任意コードを実行されてしまう。&lt;br /&gt;
したがって、このサーバをインターネット上に公開するのは強く非推奨である。&lt;/p&gt;

&lt;h3 id=&#34;ゲームを初期化する&#34;&gt;ゲームを初期化する&lt;/h3&gt;

&lt;p&gt;新規にダイスオブドゥームを始めるために、ゲームエンジンを初期化する&lt;code&gt;web-initialize&lt;/code&gt;のコードを次に示す。
&lt;code&gt;dod-request-handler&lt;/code&gt;では、&lt;code&gt;param&lt;/code&gt;を見て、ゲーム木が空、あるいは、どのマスも選択されていない場合、&lt;code&gt;web-initialize&lt;/code&gt;関数を呼んでゲームを新規で開始する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;web-initialize&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;ゲームエンジンを初期化する
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   ret: -&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;;; ランダムなゲーム盤を作成して保持する&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;setf&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*from-tile*&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;setf&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*cur-game-tree*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;game-tree&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;gen-board&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;勝者を表示する&#34;&gt;勝者を表示する&lt;/h3&gt;

&lt;p&gt;webブラウザに勝者を表示する関数を示す。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;web-announce-winner&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;board&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;勝者を表示する&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;fresh-line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;w&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;winners&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;board&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;format&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;The game is a tie between ~a&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;mapcar&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;player-letter&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;format&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;The winner is ~a&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;player-letter&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;tag&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;href&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;game.html&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;princ&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34; play again&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;人間のプレイヤーの処理&#34;&gt;人間のプレイヤーの処理&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;web-handle-human&lt;/code&gt;は、人間のプレイヤーの手番である場合のHTMLページの作成を行う。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;web-handle-human&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;人間のプレイヤーを処理する
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   pos: 選択したマスの番号&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cond&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;;; マスを未選択:&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;;; 攻撃元のマス選択メッセージを表示&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;princ&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Please choose a hex to move from:&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;;; パスを選択済み:&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;;; プレイヤーの補給が完了したとメッセージを表示&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;;; パラメータにnilを渡すcontinueリンクを表示&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;eq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;pos&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;pass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;setf&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*cur-game-tree*&lt;/span&gt;
                          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cadr&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-car&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;caddr&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*cur-game-tree*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;
                    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;princ&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Your reinforcements have been placed.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;tag&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;href&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;make-game-link&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                         &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;princ&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;continue&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;;; マスを選択済み &amp;amp; 攻撃元のタイルがセットされていない:&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;;; 今選ばれたマスを攻撃元としてセット&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*from-tile*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;setf&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*from-tile*&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;princ&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Now choose a destination:&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;;; 今選択したマスが攻撃元のタイルと同じ:&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;;; 攻撃元のタイルをリセット&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;eq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;pos&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*from-tile*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;setf&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*from-tile*&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;princ&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Move cancelled.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;;; 上記以外(=攻撃元と攻撃先を選択完了した):&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;;; 攻撃元と攻撃先に対応するゲーム木に遷移する&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;;; 次の手を指すかパスするかを選ばせる&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;setf&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*cur-game-tree*&lt;/span&gt;
             &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cadr&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-find-if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;move&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                                   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;equal&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;move&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                                          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*from-tile*&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
                                 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;caddr&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*cur-game-tree*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;setf&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*from-tile*&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;princ&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;You may now &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;tag&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;href&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;make-game-link&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;pass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;princ&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;pass&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;princ&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34; or make another move:&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;コンピュータプレイヤの処理&#34;&gt;コンピュータプレイヤの処理&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;web-handle-computer&lt;/code&gt;は、ゲームAIプレイヤーの手番である場合のHTMLページの作成を行う。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;web-handle-computer&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;ゲームAIプレイヤーを処理する&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;;; ゲームAIにゲーム木を遷移させる&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;setf&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*cur-game-tree*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;handle-computer&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*cur-game-tree*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;princ&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;The computer has moved. &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;;; webブラウザを5秒毎にリロードさせる&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;;; これによりリロードしたときにはコンピュータの手番とさせるために、chosen=NILとしている&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;tag&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;script&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;princ&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;window.setTimeout(&amp;#39;window.location=\&amp;#34;game.html?chosen=NIL\&amp;#34;&amp;#39;,5000)&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;htmlの中にsvgゲーム盤を描く&#34;&gt;HTMLの中にSVGゲーム盤を描く&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;draw-dod-page&lt;/code&gt;関数は、ゲームサーバとSVG生成コードとをつなぎ、現在のゲーム盤を描く。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;draw-dod-page&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;selected-tile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;HTMLの中にSVGゲーム盤を描く
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   tree: ゲーム木
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;   selected-tile: タイルを選択中か&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;svg&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*board-width*&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;; ゲーム盤の幅&lt;/span&gt;
       &lt;span class=&#34;vg&#34;&gt;*board-height*&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;; ゲーム盤の高さ&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;draw-board-svg&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cadr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                       &lt;span class=&#34;nv&#34;&gt;selected-tile&lt;/span&gt;
                       &lt;span class=&#34;c1&#34;&gt;;; プレイヤーが選択可能なマスのリストを計算する&lt;/span&gt;
                       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;take-all&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;selected-tile&lt;/span&gt;
                                     &lt;span class=&#34;c1&#34;&gt;;; 攻撃元のタイルを選択中なら、&lt;/span&gt;
                                     &lt;span class=&#34;c1&#34;&gt;;; 有効な攻撃先を全て収集する&lt;/span&gt;
                                     &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-mapcar&lt;/span&gt;
                                       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;move&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                                         &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;eql&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;caar&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;move&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                                                    &lt;span class=&#34;nv&#34;&gt;selected-tile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                                           &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cadar&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;move&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
                                       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;caddr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                                     &lt;span class=&#34;c1&#34;&gt;;; 攻撃元のタイルを選択していなかったら、&lt;/span&gt;
                                     &lt;span class=&#34;c1&#34;&gt;;; 有効な攻撃から、攻撃元を収集する&lt;/span&gt;
                                     &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-mapcar&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;caar&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;caddr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;19-3-ダイスオブドゥームver3をプレイする&#34;&gt;19.3 ダイスオブドゥームVer3をプレイする&lt;/h2&gt;

&lt;p&gt;サーバ側で下記のコマンドを叩くことでゲームを起動できる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;serve&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;dod-request-handler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次に、クライアント側のwebブラウザで&lt;a href=&#34;http://localhost:8080/game.html&#34;&gt;ゲームページ&lt;/a&gt;にアクセスする。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>書籍 Land of Lisp 20章 ダイスオブドゥームをさらに面白く</title>
      <link>https://otaon.github.io/web/ja-jp/2019/03/07/%E6%9B%B8%E7%B1%8D-land-of-lisp-20%E7%AB%A0-%E3%83%80%E3%82%A4%E3%82%B9%E3%82%AA%E3%83%96%E3%83%89%E3%82%A5%E3%83%BC%E3%83%A0%E3%82%92%E3%81%95%E3%82%89%E3%81%AB%E9%9D%A2%E7%99%BD%E3%81%8F/</link>
      <pubDate>Thu, 07 Mar 2019 00:00:00 +0900</pubDate>
      
      <guid>https://otaon.github.io/web/ja-jp/2019/03/07/%E6%9B%B8%E7%B1%8D-land-of-lisp-20%E7%AB%A0-%E3%83%80%E3%82%A4%E3%82%B9%E3%82%AA%E3%83%96%E3%83%89%E3%82%A5%E3%83%BC%E3%83%A0%E3%82%92%E3%81%95%E3%82%89%E3%81%AB%E9%9D%A2%E7%99%BD%E3%81%8F/</guid>
      
        <description>

&lt;h2 id=&#34;t-o-c&#34;&gt;T.O.C.&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#201-プレイヤーの数を増やす&#34;&gt;20.1 プレイヤーの数を増やす&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#202-サイコロを降る&#34;&gt;20.2 サイコロを降る&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#203-ダイスオブドゥームの補給ルールの改善&#34;&gt;20.3 ダイスオブドゥームの補給ルールの改善&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#204-終わりに&#34;&gt;20.4 終わりに&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;ダイスオブドゥームのバージョン4を作る。&lt;br /&gt;
今までのバージョンでは、プログラムを簡単にするため、重要なルールを省略していた。&lt;br /&gt;
本章では、ゲームのプレイヤーを増やし、サイコロを振るようにし、さらにいくつかの改良をダイスオブドゥームに施す。&lt;/p&gt;

&lt;p&gt;まず、前章で作ったコードをファイルに保存し、呼び出すだけで使用できるようにしておく。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;load&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;dice_of_doom_v3.lisp&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;20-1-プレイヤーの数を増やす&#34;&gt;20.1 プレイヤーの数を増やす&lt;/h2&gt;

&lt;p&gt;最初の変更では、プレイヤーを2人から4人に増やす。&lt;br /&gt;
うち3人は、ゲームAIプレイヤーである。&lt;/p&gt;

&lt;p&gt;まず、変数&lt;code&gt;*num-players*&lt;/code&gt;の値を4にし、新たなプレイヤーのためのサイコロの色を追加する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defparameter&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*num-players*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defparameter&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*die-colors*&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;63&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;63&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;     &lt;span class=&#34;c1&#34;&gt;; 赤&lt;/span&gt;
                             &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;63&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;63&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;     &lt;span class=&#34;c1&#34;&gt;; 青&lt;/span&gt;
                             &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;63&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;63&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;     &lt;span class=&#34;c1&#34;&gt;; 緑&lt;/span&gt;
                             &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;63&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;; 紫&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;プレイヤーの数の定数を変更したため、他の定数も変えておく。&lt;br /&gt;
サイコロの最大数を5個に増やし、そしてAIのレベルを4から2に減らした。&lt;br /&gt;
ゲームAIが3人もいるため、対人としては賢さがそれほど必要ではなくなったわけである。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defparameter&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*max-dice*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;; サイコロの最大数&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defparameter&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*ai-level*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;; AIが思考するゲーム木の深さ&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;パラノイド戦略&#34;&gt;パラノイド戦略&lt;/h3&gt;

&lt;p&gt;これまで作ってきたゲームAIプレイヤーは、いわゆる「パラノイド戦略」をとっている。
すなわち、それぞれのAIプレイヤーは「他のプレイヤーはすべて敵で、他人を攻撃することしか眼中にない」と考えている。&lt;br /&gt;
これは必ずしも悪い戦略ではないが、プレイヤーが3人以上になると、他の有効な戦略も存在することは覚えておきたい。
例えば、負けているプレイヤー同士が結託して、トップのプレイヤーを攻撃する、などである。&lt;/p&gt;

&lt;p&gt;しかしながら、本書のAIエンジンは、そういった協力プレイは一切計算できない。&lt;/p&gt;

&lt;h2 id=&#34;20-2-サイコロを降る&#34;&gt;20.2 サイコロを降る&lt;/h2&gt;

&lt;p&gt;これまでのゲームにおける重大な欠陥の1つは、サイコロを一切振っていない点である。
これはつまりサイコロのランダム性を全く使っていないということである。&lt;/p&gt;

&lt;p&gt;このバージョンにおいては、攻撃にあたって、攻撃元のマスのサイコロ、攻撃先のサイコロ、それぞれをまとめて振り、目の合計の多いほうが勝つ。
目が同じだった場合は、防御側の勝ちとする。
攻撃側が失敗した場合は、攻撃側のマスはサイコロを1つだけ残して、残りを防御側のプレイヤーに渡すルールとする。&lt;/p&gt;

&lt;p&gt;上記のルールを実現するためには、AIプログラミング用語でいう&lt;strong&gt;確率ノード&lt;/strong&gt;(chance node)をゲーム木に足す必要がある。&lt;br /&gt;
次に、実装を示す。&lt;/p&gt;

&lt;h3 id=&#34;確率ノードを作る&#34;&gt;確率ノードを作る&lt;/h3&gt;

&lt;p&gt;今まで、ゲーム木の次の手を表す遅延リストの要素は、下記の2つの項目を持つリストであった。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;car: 手の記述(攻撃の場合は、攻撃元と攻撃先のマス。手番終了)&lt;/li&gt;
&lt;li&gt;cadr: 手が選ばれた場合の、次のゲーム木のノード&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ここに、3つ目の項目として、攻撃が失敗した場合のゲーム木のノードを追加する。&lt;br /&gt;
すなわち、ゲーム木のそれぞれの手から伸びる枝が、攻撃の成否によってさらに2つに分岐することになる。&lt;/p&gt;

&lt;p&gt;では、&lt;code&gt;attacking-moves&lt;/code&gt;関数を拡張し、それぞれの手が確率ノードとして動作するように要素を付け足していく。&lt;br /&gt;
ここでの変更における新しい変更は、ゲーム木に新たな手を付け加える時にもう一つの枝を足してやることである。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;attacking-moves&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;board&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cur-player&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;spare-dice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;labels&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;player&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
             &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;aref&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;board&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
           &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;dice&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
             &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cadr&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;aref&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;board&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-mapcan&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;eq&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;player&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cur-player&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-mapcan&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;dst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
              &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;eq&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;player&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;dst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cur-player&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;dice&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;make-lazy&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;list&lt;/span&gt;
                               &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;list&lt;/span&gt;
                                 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;src&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;dst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                                 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;game-tree&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;board-attack&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;board&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cur-player&lt;/span&gt;
                                                          &lt;span class=&#34;nv&#34;&gt;src&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;dst&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;dice&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                                             &lt;span class=&#34;nv&#34;&gt;cur-player&lt;/span&gt;
                                             &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;spare-dice&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;dice&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;dst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                                             &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                                 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;game-tree&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;board-attack-fail&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;board&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cur-player&lt;/span&gt;
                                                               &lt;span class=&#34;nv&#34;&gt;src&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;dst&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;dice&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                                            &lt;span class=&#34;nv&#34;&gt;cur-player&lt;/span&gt;
                                            &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;spare-dice&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;dice&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;dst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                                            &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;
                  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;make-lazy&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;neighbors&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;make-lazy&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;below&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*board-hexnum*&lt;/span&gt;
                   &lt;span class=&#34;nv&#34;&gt;collect&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この確率ノードから伸びる追加の枝のゲーム盤を作るには、次に示す&lt;code&gt;board-attack-fail&lt;/code&gt;を呼び出してやる。&lt;br /&gt;
&lt;code&gt;board-attack-fail&lt;/code&gt;は、ゲーム盤を受け取り、そして失敗した攻撃の攻撃元となったマスから、サイコロを1つだけ残して残りを取り上げた状態のゲーム盤を返す。&lt;br /&gt;
この関数は、ゲーム盤をループして、各マスを単純にコピーしている。&lt;br /&gt;
ただし、マスの番号が攻撃元と一致した場合に限り、そこに1個だけサイコロを残すようにする。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;board-attack-fail&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;board&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;player&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;src&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;dst&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;dice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;board-array&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;pos&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
                     &lt;span class=&#34;nv&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;hex&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;across&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;board&lt;/span&gt;
                     &lt;span class=&#34;nv&#34;&gt;collect&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;eq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;pos&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                                 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;player&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                                 &lt;span class=&#34;nv&#34;&gt;hex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;サイコロを実際に振る&#34;&gt;サイコロを実際に振る&lt;/h3&gt;

&lt;p&gt;サイコロを振るロジックを実装する。&lt;br /&gt;
次の関数では、引数で与えられた数のサイコロをまとめて振る。
そして、サイコロを振った結果をメッセージに表示し、合計を返す。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;roll-dice&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;dice-num&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;total&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;repeat&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;dice-num&lt;/span&gt;
                     &lt;span class=&#34;nv&#34;&gt;sum&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;1+&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;random&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;fresh-line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;format&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;On ~a dice rolled ~a. &amp;#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;dice-num&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;total&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;total&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;サイコロは常に攻撃側と守備側それぞれで振ることになるため、それらをまとめて行う関数も定義する。&lt;br /&gt;
この関数は単に&lt;code&gt;roll-dice&lt;/code&gt;を2回呼び、結果を比べるのみである。&lt;br /&gt;
ゲーム木をたどる過程でプレイヤーがサイコロを降る手を選択したらこの関数を呼び出し、結果に応じて勝った場合の枝か、負けた場合の枝のどちらかを次のゲーム木にする。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;roll-against&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;src-dice&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;dst-dice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;roll-dice&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;src-dice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rill-dice&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;dst-dice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;ゲームエンジンからサイコロを振るコードを呼び出す&#34;&gt;ゲームエンジンからサイコロを振るコードを呼び出す&lt;/h3&gt;

&lt;p&gt;ゲームエンジンにとっては、サイコロを振るのは人間かコンピュータのプレイヤーが手を選んだ時に確率ノードの枝のどちらかを選ぶときだけである。&lt;br /&gt;
この動作は、&lt;code&gt;pick-chance-branch&lt;/code&gt;関数で実現される。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;pick-chance-branch&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;branch&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;move&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;labels&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;dice&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
             &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cadr&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;aref&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;board&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;path&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;move&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;null&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
              &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;roll-against&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;dice&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                            &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;dice&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cadr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cadr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;move&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;caddr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;move&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この関数は現在のゲーム盤と指し手のエントリを受け取り、指し手が確率ノードを持っていたら、そのどちらの枝を選ぶかを決定する。&lt;br /&gt;
まず、指し手の&lt;code&gt;car&lt;/code&gt;を、すなわち&lt;code&gt;path&lt;/code&gt;を見て、これが&lt;code&gt;nil&lt;/code&gt;でなければこの指し手は攻撃なので、そこから攻撃元&lt;code&gt;(car path)&lt;/code&gt;と攻撃先&lt;code&gt;(cadr path)&lt;/code&gt;のマスを取り出し、それぞれのサイコロの個数を求めて&lt;code&gt;roll-against&lt;/code&gt;を呼び出す。&lt;br /&gt;
&lt;code&gt;path&lt;/code&gt;が&lt;code&gt;nil&lt;/code&gt;ならこの手は「手番を終える」手であるため、サイコロを振る必要はない。&lt;/p&gt;

&lt;p&gt;サイコロを振って攻撃が成功と出れば、確率ノードの最初のゲーム木を返す。
攻撃が失敗に終われば、確率ノードの2番目のゲーム木を返す。&lt;/p&gt;

&lt;p&gt;人間やコンピュータが指し手を選んだ時に、&lt;code&gt;pick-chance-branch&lt;/code&gt;が呼ばれるようにする。&lt;br /&gt;
まず、人間側を実装する。以前の&lt;code&gt;web-handle-human&lt;/code&gt;からの変更点は、次のゲームの状態を表すゲーム木を返す箇所に&lt;code&gt;pick-chance-branch&lt;/code&gt;を足しただけである。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;web-handle-human&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cond&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;princ&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Please choose a hex to move from:&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;eq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;pos&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;pass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;setf&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*cur-game-tree*&lt;/span&gt;
                              &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cadr&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-car&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;caddr&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*cur-game-tree*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;
         &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;princ&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Your reinforcements have been placed.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
         &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;tag&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;href&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;make-game-link&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
              &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;princ&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;continue&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*from-tile*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;setf&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*from-tile*&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
         &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;princ&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Move cancelled.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;setf&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*cur-game-tree*&lt;/span&gt;
                 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;pick-chance-branch&lt;/span&gt;
                   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cadr&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*cur-game-tree*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-find-if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;move&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                                   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;equal&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;move&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                                          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*from-tile*&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
                                 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;caddr&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*cur-game-tree*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;setf&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*from-tile*&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;princ&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;You may now &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;tag&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;href&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;make-game-link&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;pass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;princ&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;pass&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;princ&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34; or make another move:&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;コンピュータ側の&lt;code&gt;handle-computer&lt;/code&gt;も同様に変更する。&lt;br /&gt;
関数の最後に&lt;code&gt;pick-chance-branch&lt;/code&gt;を加えている。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;handle-computer&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;ratings&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;get-ratings&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;limit-tree-depth&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*ai-level*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;pick-chance-branch&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cadr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-nth&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;position&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;apply&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;max&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ratings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ratings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;caddr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ここまでの変更により、新しいダイスオブドゥームをプレイできるようになっているはずである。&lt;br /&gt;
ただ、このコードでは、ゲームAIは確率ノードのことを考慮できておらず、全ての攻撃が成功すると思って手を計算してしまう。&lt;br /&gt;
そこで、次章ではAIエンジンを改良して、サイコロのランダム要素を考慮できるようにする。&lt;/p&gt;

&lt;h3 id=&#34;aiの改良&#34;&gt;AIの改良&lt;/h3&gt;

&lt;p&gt;ゲームAIがサイコロについて考慮できるようにするためには、サイコロを振ったときの統計について知っておく必要がある。&lt;br /&gt;
全ての可能なサイコロの個数の組み合わせについて、攻撃が成功する確率を計算したものを表で用意しておく。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defparameter&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*dice-probability*&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;#(#(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.84&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.97&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.0&lt;/span&gt;  &lt;span class=&#34;mf&#34;&gt;1.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                                   &lt;span class=&#34;o&#34;&gt;#(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.44&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.78&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.94&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.99&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                                   &lt;span class=&#34;o&#34;&gt;#(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.15&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.45&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.74&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.91&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                                   &lt;span class=&#34;o&#34;&gt;#(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.04&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.19&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.46&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.72&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                                   &lt;span class=&#34;o&#34;&gt;#(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.01&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.06&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.22&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.46&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この表は、各行が守備側のサイコロの個数(1個〜5個)、各列が攻撃側のサイコロの個数(2個〜5個)の確率を表す。&lt;br /&gt;
例えば、攻撃側が2個、守備側が1個の時、攻撃が成功する確率は84%である。&lt;/p&gt;

&lt;p&gt;AIのコードの中心となる関数は&lt;code&gt;get-ratings&lt;/code&gt;である。&lt;br /&gt;
この関数は、可能な次の手それぞれに点数を与えるものであった。
点数の計算にサイコロを振る成功確率を考慮に入れる変更を施すこととする。
それぞれの攻撃について、成功した場合と失敗した場合それぞれの点数を、&lt;code&gt;*dice-probability*&lt;/code&gt;から分かる確率を使って結合する。&lt;br /&gt;
この新しい&lt;code&gt;get-ratings&lt;/code&gt;関数では、攻撃の手について、その成功確率をテーブルから取り出し、攻撃が成功した場合の点数に乗算する。&lt;br /&gt;
また、失敗確率(= 1 - 成功確率)を、失敗した場合の点数に乗算する。&lt;br /&gt;
この両者の我が、攻撃手の点数である。&lt;br /&gt;
これにより、&lt;code&gt;get-ratings&lt;/code&gt;関数は確率ノードを考慮した点数を返せるようになった。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;get-ratings&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;player&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;board&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cadr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;labels&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;dice&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
               &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cadr&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;aref&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;board&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;take-all&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-mapcar&lt;/span&gt;
                  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;move&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;path&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;move&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
                       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;path&lt;/span&gt;
                           &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;let*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;src&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                                  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;dst&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cadr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                                  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;probability&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;aref&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;aref&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*dice-probability*&lt;/span&gt;
                                                           &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;1-&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;dice&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;dst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
                                                     &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;dice&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;
                             &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;probability&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rate-position&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cadr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;move&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;player&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                                &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;probability&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rate-position&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;caddr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;move&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                                                                    &lt;span class=&#34;nv&#34;&gt;player&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;
                           &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;rate-position&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cadr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;move&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;player&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;caddr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ゲームAIを確率ノードに完全に対応させるには、もう1つ小さな変更を行う。&lt;br /&gt;
ゲーム木の大きさを制限する関数は、確率ノードから2つ枝が伸びていることを考慮する。
そして、勝つ場合と負ける場合の両方の枝を刈り込む必要がある。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;limit-tree-depth&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;depth&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cadr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;zerop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;depth&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lazy-mapcar&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;move&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                           &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cons&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;move&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                                 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;mapcar&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                                           &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;limit-tree-depth&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;1-&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;depth&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
                                   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cdr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;move&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;
              &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;caddr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;各指し手のリスト&lt;code&gt;(move)&lt;/code&gt;の&lt;code&gt;cdr&lt;/code&gt;に気を刈り込む関数を&lt;code&gt;mapcar&lt;/code&gt;することで、確率ノードの両方の枝を刈り込める。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;&lt;br /&gt;
ダイスオブドゥームのバージョン4では、アルファベータ法は使用しない。&lt;br /&gt;
なぜなら、確率ノードがある場合のアルファベータ法は非常に複雑になるためである。&lt;/p&gt;

&lt;h2 id=&#34;20-3-ダイスオブドゥームの補給ルールの改善&#34;&gt;20.3 ダイスオブドゥームの補給ルールの改善&lt;/h2&gt;

&lt;p&gt;これまで、手番を終えた時に補給されるサイコロは、常に&lt;code&gt;その手番で得たサイコロの総数 - 1&lt;/code&gt;であった。&lt;br /&gt;
この補給ルールは、ゲームが進むに連れて必ずサイコロの総数が減るため、ゲームが必ず終了し、ゲーム木が有限の大きさを持つことを保証できる。&lt;br /&gt;
しかし、バージョン2からゲーム木は遅延ツリーになっているため、大きさが無限になっても全く問題ない。
そこで、補給ルールを変更して、ゲームをより戦略的に面白くしてみよう。&lt;/p&gt;

&lt;p&gt;新しいルールでは、補給サイコロの数は、プレイヤーが専有している連続した領域のうち最も大きいものの広さに等しいとする。&lt;br /&gt;
こうすると、プレイヤーは、常に、領域が分断されるリスクを取れるかどうかの判断を迫れられる。あるいは、小さな領域を捨てて特攻攻撃を仕掛けるという手段もある。&lt;/p&gt;

&lt;p&gt;新たな補給ルールを実現するため、まず、指定したマスを起点として、現在のプレイヤーが専有する連続した領域のマスのリストを返す&lt;code&gt;get-connected&lt;/code&gt;を定義する。&lt;br /&gt;
この関数は、8章のGTWと同様のアルゴリズムを用いて、連続するマスを見つけ出す。
すなわち、注目しているマスから隣接するマスへと再帰的に移動しながら、既に見たマスのリストを更新していくわけである。&lt;br /&gt;
&lt;code&gt;get-connected&lt;/code&gt;関数では、2つのローカルな再帰関数を定義している。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;check-pos&lt;/code&gt;関数は現在見ているマスがプレイヤーの所有であり、かつまだ見たことがなければそれを&lt;code&gt;visited&lt;/code&gt;リストに追加する。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;check-neighbors&lt;/code&gt;関数は隣接したマスのリストを受け取ってその全てをチェックする。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この2つの関数は、相互に再帰して、連続したマスの一塊を見つけ出す。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;get-connected&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;board&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;player&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;labels&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;check-pos&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;pos&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;visited&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
             &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;eq&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;aref&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;board&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;player&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;member&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;pos&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;visited&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
                 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;check-neighbors&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;neighbors&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cons&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;pos&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;visited&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                 &lt;span class=&#34;nv&#34;&gt;visited&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
           &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;check-neighbors&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;visited&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
             &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;
               &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;check-neighbors&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cdr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;check-pos&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;visited&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
               &lt;span class=&#34;nv&#34;&gt;visited&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;check-pos&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;pos&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;相互再帰の起点は、目標のマス1つと、空の&lt;code&gt;visited&lt;/code&gt;リストで&lt;code&gt;check-pos&lt;/code&gt;を呼び出すことである。
この関数で連続するマスの1つの領域は見つけられるが、&lt;strong&gt;最大の領域&lt;/strong&gt;を見つけるために、&lt;code&gt;largest-cluster-size&lt;/code&gt;関数が必要となる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;largest-cluster-size&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;boardd&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;player&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;labels&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;pos&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;visited&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;best&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
             &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;pos&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*board-hexnum*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;eq&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;aref&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;board&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;player&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                          &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;member&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;pos&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;visited&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
                     &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;let*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cluster&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;get-connected&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;board&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;player&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                            &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;size&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cluster&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
                       &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;size&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;best&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                           &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;1+&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;append&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cluster&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;visited&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                           &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;1+&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;append&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cluster&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;visited&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;best&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
                     &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;1+&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;visited&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;best&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
               &lt;span class=&#34;nv&#34;&gt;best&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最後に、この新しい補給ルールを反映するため、&lt;code&gt;add-new-dice&lt;/code&gt;を変更する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;add-new-dice&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;board&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;player&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;spare-dice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;labels&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
             &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cond&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;zerop&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                   &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;null&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cur-player&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;caar&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                            &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cur-dice&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cadar&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
                        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;eq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cur-player&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;player&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cur-dice&lt;/span&gt; &lt;span class=&#34;vg&#34;&gt;*max-dice*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                            &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cons&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cur-player&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;1+&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cur-dice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                                  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cdr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;1-&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
                            &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cons&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cdr&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))))))&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;board-array&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;coerce&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;board&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;largest-cluster-size&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;board&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;player&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;新しい&lt;code&gt;add-new-dice&lt;/code&gt;でも&lt;code&gt;spare-dice&lt;/code&gt;引数を受け取っているが、これは&lt;code&gt;add-new-dice&lt;/code&gt;を呼び出している箇所との互換性のためだけで、この引数は無視される。&lt;br /&gt;
すなわち、追加される補給サイコロの数は最も大きな連続領域の大きさのみで決まる。&lt;br /&gt;
&lt;code&gt;add-new-dice&lt;/code&gt;関数の変更箇所はここのみである。&lt;/p&gt;

&lt;p&gt;これで、新たな補給ルールを有効にするための全てのコードが完成した。&lt;br /&gt;
この設計では、ゲームAIのプレイヤーがゲーム木の全てにアクセスできるようになっている。
ゲーム木はこの新たな補給を考慮したデータを持つので、ゲームAIは自動的に新たな補給ルールに合わせた最適な戦略を見つけるようになる。&lt;/p&gt;

&lt;h2 id=&#34;20-4-終わりに&#34;&gt;20.4 終わりに&lt;/h2&gt;

&lt;p&gt;ダイスオブドゥームのゲームは、これにて完成である。&lt;br /&gt;
プレイするには、下記のとおりコマンドを実行する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;nv&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;serve&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;dod-request-handler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;そして、webブラウザで&lt;a href=&#34;http://localhost:8080/game.html&#34;&gt;ゲームページ&lt;/a&gt;を開く。&lt;/p&gt;
</description>
      
    </item>
    
  </channel>
</rss>
